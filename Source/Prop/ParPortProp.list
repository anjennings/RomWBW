|===========================================================================|
Objects : -
ParPortProp
     |
     +-----AnsiTerm
     |         |
     |         +---vgacolour
     |         |
     |         +---E555_SPKEngine
     |
     +-----Keyboard
     |
     +-----safe_spi
     |
     +-----Parallax Serial Terminal Null
     |
     +-----FullDuplexSerial

Object Address : 0010 : Object Name : ParPortProp
Object Address : 0B74 : Object Name : AnsiTerm
Object Address : 1504 : Object Name : vgacolour
Object Address : 2874 : Object Name : E555_SPKEngine
Object Address : 28F4 : Object Name : Keyboard
Object Address : 2F64 : Object Name : safe_spi
Object Address : 3904 : Object Name : Parallax Serial Terminal Null
Object Address : 39B0 : Object Name : FullDuplexSerial

Binary Image Information :
PBASE : 0010
VBASE : 3C7C
DBASE : 533C
PCURR : 02B8
DCURR : 5344
|===========================================================================|
|===========================================================================|
Object ParPortProp
Object Base is 0010
|===========================================================================|
Object Constants
|===========================================================================|
Constant VERSION = 00600000 (6291456)
Constant _CLKMODE = 00000408 (1032)
Constant _XINFREQ = 004C4B40 (5000000)
Constant SLEEP = 00000000 (0)
Constant VGA_BASE = 00000010 (16)
Constant KBD_BASE = 0000000E (14)
Constant SD_BASE = 00000018 (24)
Constant STAT_ATTR1 = 00003000 (12288)
Constant STAT_ATTR = 00007000 (28672)
Constant PPI_CMD = 00000100 (256)
Constant PPI_STB = 00000200 (512)
Constant PPI_IBF = 00000400 (1024)
Constant PPI_ACK = 00000800 (2048)
Constant PPI_OBF = 00001000 (4096)
Constant PPI_DIRRD = 00000A00 (2560)
Constant PPI_DIRWR = 00000AFF (2815)
Constant FUNC_PUTBYTE = 00000010 (16)
Constant FUNC_GETBYTE = 00000011 (17)
Constant FUNC_PUTBUF = 00000020 (32)
Constant FUNC_GETBUF = 00000021 (33)
Constant CMD_NOP = 00000000 (0)
Constant CMD_ECHOBYTE = 00000001 (1)
Constant CMD_ECHOBUF = 00000002 (2)
Constant CMD_DSKRES = 00000010 (16)
Constant CMD_DSKSTAT = 00000011 (17)
Constant CMD_DSKPUT = 00000012 (18)
Constant CMD_DSKGET = 00000013 (19)
Constant CMD_DSKRD = 00000014 (20)
Constant CMD_DSKWR = 00000015 (21)
Constant CMD_DSKTYPE = 00000016 (22)
Constant CMD_DSKCAP = 00000017 (23)
Constant CMD_DSKCSD = 00000018 (24)
Constant CMD_VIDOUT = 00000020 (32)
Constant CMD_KBDSTAT = 00000030 (48)
Constant CMD_KBDRD = 00000031 (49)
Constant CMD_SPKTONE = 00000040 (64)
Constant CMD_SIOINIT = 00000050 (80)
Constant CMD_SIORX = 00000051 (81)
Constant CMD_SIOTX = 00000052 (82)
Constant CMD_SIORXST = 00000053 (83)
Constant CMD_SIOTXST = 00000054 (84)
Constant CMD_SIORXFL = 00000055 (85)
Constant CMD_SIOTXFL = 00000056 (86)
Constant CMD_RESET = 000000F0 (240)
Constant CMD_VERSION = 000000F1 (241)
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0004 Variable Cmd
VBASE : 0004 LONG Size 0004 Variable Func
VBASE : 0008 LONG Size 0004 Variable BufPtr
VBASE : 000C LONG Size 0004 Variable BufSize
VBASE : 0010 LONG Size 0200 Variable DskBuf
VBASE : 0210 LONG Size 0004 Variable DskStat
VBASE : 0214 LONG Size 0004 Variable DskBlock
VBASE : 0218 LONG Size 0040 Variable TimerStack
VBASE : 0258 LONG Size 0004 Variable TimerCount
VBASE : 025C LONG Size 0004 Variable CardType
VBASE : 0260 BYTE Size 0001 Variable ByteVal
VBASE : 0261 BYTE Size 0001 Variable statRows
VBASE : 0262 BYTE Size 0001 Variable statCols
|===========================================================================|
Object DAT Blocks
|===========================================================================|
00AC(0000) 46          | strVer        byte        "F/W v0.96",0
00AD(0000) 2F          | 
00AE(0000) 57          | 
00AF(0000) 20          | 
00B0(0001) 76          | 
00B1(0001) 30          | 
00B2(0001) 2E          | 
00B3(0001) 39          | 
00B4(0002) 36          | 
00B5(0002) 00          | 
00B6(0002) 50          | strHW        byte        "ParPortProp",0
00B7(0002) 61          | 
00B8(0003) 72          | 
00B9(0003) 50          | 
00BA(0003) 6F          | 
00BB(0003) 72          | 
00BC(0004) 74          | 
00BD(0004) 50          | 
00BE(0004) 72          | 
00BF(0004) 6F          | 
00C0(0005) 70          | 
00C1(0005) 00          | 
00C2(0005) 52          | strROM        byte        "RomWBW",0
00C3(0005) 6F          | 
00C4(0006) 6D          | 
00C5(0006) 57          | 
00C6(0006) 42          | 
00C7(0006) 57          | 
00C8(0007) 00          | 
00C9(0007)             |                         org 0
00CC(0000) 75 E8 BF A0 | Entry                   mov outa, xppi_idle             ' set ack and strobe to inactive state
00D0(0001) 78 EC BF A0 |                         mov dira, xppi_dirrd            ' pin direction to default (read)
00D4(0002) AA E8 FF 68 |                         or outa, #$AA
00D8(0003) 79 EC BF A0 |                         mov dira, xppi_dirwr            ' configure data bits for output
00DC(0004) 71 E8 BF 64 |                         andn outa, xppi_stb             ' assert strobe (low)
00E0(0005) 00 00 00 00 |                         nop                             ' time for PPI to see strobe
00E4(0006) 71 E8 BF 68 |                         or outa, xppi_stb               ' deassert strobe (high)
00E8(0007) 78 EC BF A0 |                         mov dira, xppi_dirrd            ' configure data bits for input
00EC(0008)             | DoCmd                   ' Discard incoming bytes until we see cmd signal
00EC(0008) F2 F5 BC A0 |                         mov xtmp, ina                   ' get pins
00F0(0009) 70 F4 3C 62 |                         test xtmp, xppi_cmd wz          ' is command ready?
00F4(000A) 11 00 54 5C |                         if_nz jmp #DoCmd1               ' yes, handle it now
00F8(000B) 74 F4 3C 62 |                         test xtmp, xppi_obf wz          ' is bogus data pending?
00FC(000C) 08 00 54 5C |                         if_nz jmp #DoCmd                ' nope, loop                        
0100(000D) 73 E8 BF 64 |                         andn outa, xppi_ack             ' assert ack (low)
0104(000E) 74 E8 3C F0 |                         waitpeq xppi_obf, xppi_obf      ' wait for OBF to be inactive (high)
0108(000F) 73 E8 BF 68 |                         or outa, xppi_ack               ' deassert ack (high)
010C(0010) 08 00 7C 5C |                         jmp #DoCmd                      ' bad byte swallowed, loop
0110(0011)             | DoCmd1                  ' Receive incoming commands
0110(0011) 74 DC 3C F0 |                         waitpeq Zero, xppi_obf          ' wait for it to show up (OBF low)
0114(0012) 73 E8 BF 64 |                         andn outa, xppi_ack             ' assert ack (low)
0118(0013) 74 E8 3C F0 |                         waitpeq xppi_obf, xppi_obf      ' wait for OBF to be inactive (high)
011C(0014) F2 F5 BC A0 |                         mov xtmp, ina                   ' now we can get the data bits                   
0120(0015) 73 E8 BF 68 |                         or outa, xppi_ack               ' deassert ack (high)
0124(0016) 70 DC 3C F0 |                         waitpeq Zero, xppi_cmd          ' wait for command signal to clear
0128(0017) FF F4 FC 60 |                         and xtmp, #$FF                  ' isolate data bits
012C(0018) 69 F4 3C 08 |                         wrlong xtmp, CmdAdr             ' Record it
0130(0019)             | DoFunc                  ' Function processing loop
0130(0019) 6A F4 BC 08 |                         rdlong xtmp, FuncAdr
0134(001A) 10 F4 7C 86 |                         cmp xtmp, #FUNC_PUTBYTE wz
0138(001B) 26 00 68 5C |                         if_e jmp #PutByte
013C(001C) 11 F4 7C 86 |                         cmp xtmp, #FUNC_GETBYTE wz
0140(001D) 35 00 68 5C |                         if_e jmp #GetByte
0144(001E) 20 F4 7C 86 |                         cmp xtmp, #FUNC_PUTBUF wz
0148(001F) 40 00 68 5C |                         if_e jmp #PutBuf
014C(0020) 21 F4 7C 86 |                         cmp xtmp, #FUNC_GETBUF wz
0150(0021) 55 00 68 5C |                         if_e jmp #GetBuf
0154(0022) 69 F4 BC 08 |                         rdlong xtmp, CmdAdr
0158(0023) 6E F4 3C 86 |                         cmp xtmp, Zero wz
015C(0024) 08 00 68 5C |                         if_e jmp #DoCmd
0160(0025) 19 00 7C 5C |                         jmp #DoFunc
0164(0026)             | PutByte                 ' Parm -> PPI
0164(0026) FF E8 FF 64 |                         andn outa, #$FF                 ' clear old data bits
0168(0027) 6B F4 BC 00 |                         rdbyte xtmp, ByteValAdr         ' get byte value into xtmp
016C(0028) FF F4 FC 60 |                         and xtmp, #$FF                  ' careful to ensure only data bits set
0170(0029) 7A E8 BF 68 |                         or outa, xtmp                   ' set new data bits
0174(002A) 76 E4 3C F4 |                         waitpne xppi_ibf, xppi_ibfcmd   ' wait for IBF empty or CMD flag
0178(002B) F2 F5 BC A0 |                         mov xtmp, ina                   ' read the pins
017C(002C) 70 F4 3C 62 |                         test xtmp, xppi_cmd wz          ' CMD pending?
0180(002D) 66 00 54 5C |                         if_nz jmp #AbortCmd             ' Yes, clear out                        
0184(002E) 79 EC BF A0 |                         mov dira, xppi_dirwr            ' configure data bits for output
0188(002F) 71 E8 BF 64 |                         andn outa, xppi_stb             ' assert strobe (low)
018C(0030) 00 00 00 00 |                         nop                             ' time for PPI to see strobe
0190(0031) 71 E8 BF 68 |                         or outa, xppi_stb               ' deassert strobe (high)
0194(0032) 78 EC BF A0 |                         mov dira, xppi_dirrd            ' configure data bits for input
0198(0033) 6A DC 3C 08 |                         wrlong Zero, FuncAdr            ' clear out original function request
019C(0034) 19 00 7C 5C |                         jmp #DoFunc                     ' and return                        
01A0(0035)             | GetByte                 ' PPI -> Parm
01A0(0035) 77 E8 3C F4 |                         waitpne xppi_obf, xppi_obfcmd   ' wait for OBF empty or CMD flag
01A4(0036) F2 F5 BC A0 |                         mov xtmp, ina                   ' read the pins
01A8(0037) 70 F4 3C 62 |                         test xtmp, xppi_cmd wz          ' CMD pending?
01AC(0038) 66 00 54 5C |                         if_nz jmp #AbortCmd             ' Yes, clear out
01B0(0039) 73 E8 BF 64 |                         andn outa, xppi_ack             ' assert ack (low)
01B4(003A) 74 E8 3C F0 |                         waitpeq xppi_obf, xppi_obf      ' wait for OBF to be inactive (high)
01B8(003B) F2 F5 BC A0 |                         mov xtmp, ina                   ' now we can get the data bits
01BC(003C) 73 E8 BF 68 |                         or outa, xppi_ack               ' deassert ack (high)
01C0(003D) 6B F4 3C 00 |                         wrbyte xtmp, ByteValAdr         ' Save it in main memory
01C4(003E) 6A DC 3C 08 |                         wrlong Zero, FuncAdr            ' clear out original function request
01C8(003F) 19 00 7C 5C |                         jmp #DoFunc                     ' and return                        
01CC(0040)             | PutBuf                  ' Buf -> PPI
01CC(0040) 6C F8 BC 08 |                         rdlong TempAdr, BufPtrAdr       ' get buffer pointer       
01D0(0041) 6D FA BC 08 |                         rdlong TempCnt,BufSizeAdr       ' get the buffer size for operation
01D4(0042) FF E8 FF 64 | PutBuf1                 andn outa, #$FF                 ' clear old data bits
01D8(0043) 7C F4 BC 00 |                         rdbyte xtmp, TempAdr             ' get value into xtmp
01DC(0044) FF F4 FC 60 |                         and xtmp, #$FF                  ' careful to ensure only data bits set
01E0(0045) 7A E8 BF 68 |                         or outa, xtmp                   ' set new data bits
01E4(0046) 76 E4 3C F4 |                         waitpne xppi_ibf, xppi_ibfcmd   ' wait for IBF empty or CMD flag
01E8(0047) F2 F5 BC A0 |                         mov xtmp, ina                   ' read the pins
01EC(0048) 70 F4 3C 62 |                         test xtmp, xppi_cmd wz          ' CMD pending?
01F0(0049) 66 00 54 5C |                         if_nz jmp #AbortCmd             ' Yes, clear out                        
01F4(004A) 79 EC BF A0 |                         mov dira, xppi_dirwr            ' configure data bits for output
01F8(004B) 71 E8 BF 64 |                         andn outa, xppi_stb             ' assert strobe (low)
01FC(004C) 00 00 00 00 |                         nop                             ' delay for PPI to see strobe
0200(004D) 71 E8 BF 68 |                         or outa, xppi_stb               ' deassert strobe (high)
0204(004E) 78 EC BF A0 |                         mov dira, xppi_dirrd            ' configure data bits for input
0208(004F) 01 FA FC 84 |                         sub TempCnt, #1
020C(0050) 01 F8 FC 80 |                         add TempAdr, #1
0210(0051) 6E FA 3C 86 |                         cmp TempCnt, Zero wz
0214(0052) 42 00 54 5C |                         if_ne jmp #PutBuf1
0218(0053) 6A DC 3C 08 |                         wrlong Zero, FuncAdr            ' clear out original function request
021C(0054) 19 00 7C 5C |                         jmp #DoFunc                     ' and return                        
0220(0055)             | GetBuf                  ' PPI -> Buf
0220(0055) 6C F8 BC 08 |                         rdlong TempAdr, BufPtrAdr       ' get buffer pointer       
0224(0056) 6D FA BC 08 |                         rdlong TempCnt,BufSizeAdr       ' get the buffer size for operation
0228(0057) 77 E8 3C F4 | GetBuf1                 waitpne xppi_obf, xppi_obfcmd   ' wait for OBF empty or CMD flag
022C(0058) F2 F5 BC A0 |                         mov xtmp, ina                   ' read the pins
0230(0059) 70 F4 3C 62 |                         test xtmp, xppi_cmd wz          ' CMD pending?
0234(005A) 66 00 54 5C |                         if_nz jmp #AbortCmd             ' Yes, clear out                        
0238(005B) 73 E8 BF 64 |                         andn outa, xppi_ack             ' assert ack (low)
023C(005C) 74 E8 3C F0 |                         waitpeq xppi_obf, xppi_obf      ' wait for OBF to be inactive (high)
0240(005D) F2 F5 BC A0 |                         mov xtmp, ina                   ' now we can get the data bits                   
0244(005E) 73 E8 BF 68 |                         or outa, xppi_ack               ' deassert ack (high)
0248(005F) 7C F4 3C 00 |                         wrbyte xtmp, TempAdr
024C(0060) 01 FA FC 84 |                         sub TempCnt, #1
0250(0061) 01 F8 FC 80 |                         add TempAdr, #1
0254(0062) 6E FA 3C 86 |                         cmp TempCnt, Zero wz
0258(0063) 57 00 54 5C |                         if_ne jmp #GetBuf1
025C(0064) 6A DC 3C 08 |                         wrlong Zero, FuncAdr            ' clear out original function request
0260(0065) 19 00 7C 5C |                         jmp #DoFunc                     ' and return
0264(0066) 78 EC BF A0 | AbortCmd                mov dira, xppi_dirrd            ' configure data bits for input
0268(0067) 6A DE 3C 08 |                         wrlong NegOne, FuncAdr          ' abort any active function
026C(0068) 19 00 7C 5C |                         jmp #DoFunc                     ' handle pending command
0270(0069) 00 00 00 00 | CmdAdr                  long    0
0274(006A) 00 00 00 00 | FuncAdr                 long    0
0278(006B) 00 00 00 00 | ByteValAdr              long    0
027C(006C) 00 00 00 00 | BufPtrAdr               long    0
0280(006D) 00 00 00 00 | BufSizeAdr              long    0
0284(006E) 00 00 00 00 | Zero                    long    0
0288(006F) FF FF FF FF | NegOne                  long    -1
028C(0070) 00 01 00 00 | xppi_cmd                long    PPI_CMD                 ' pin 8, active high
0290(0071) 00 02 00 00 | xppi_stb                long    PPI_STB                 ' pin 9, active low
0294(0072) 00 04 00 00 | xppi_ibf                long    PPI_IBF                 ' pin 10, active high
0298(0073) 00 08 00 00 | xppi_ack                long    PPI_ACK                 ' pin 11, active low
029C(0074) 00 10 00 00 | xppi_obf                long    PPI_OBF                 ' pin 12, active low
02A0(0075) 00 0A 00 00 | xppi_idle               long    PPI_STB + PPI_ACK
02A4(0076) 00 05 00 00 | xppi_ibfcmd             long    PPI_IBF + PPI_CMD
02A8(0077) 00 11 00 00 | xppi_obfcmd             long    PPI_OBF + PPI_CMD
02AC(0078) 00 0A 00 00 | xppi_dirrd              long    PPI_STB + PPI_ACK
02B0(0079) FF 0A 00 00 | xppi_dirwr              long    PPI_STB + PPI_ACK + $FF
02B4(007A) FF FF 00 00 | xtmp                    long    $FFFF
02B8(007B)             | TempVal                 res     1
02B8(007C)             | TempAdr                 res     1
02B8(007D)             | TempCnt                 res     1
02B8(007E)             |                         fit
02B8(007E)             | There are 370 ($172) Longs left in the cog
|===========================================================================|
|===========================================================================|
Spin Block main with 0 Parameters and 1 Extra Stack Longs. Method 1
PUB main | tmp

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - tmp
|===========================================================================|
Addr : 02B8:             01  : Drop Anchor   
Addr : 02B9:    3A 01 C2 00  : Constant 3 Bytes - 01 C2 00 
Addr : 02BD:       06 25 01  : Call Obj.Sub 37 1
Addr : 02C0:             01  : Drop Anchor   
Addr : 02C1: PBASE Constant Address of Label0002
Addr : 02C1:       87 85 8C  : Memory Op Byte PBASE + ADDRESS Address = 058C
Addr : 02C4:          05 1B  : Call Sub 27   
Addr : 02C6:             01  : Drop Anchor   
Addr : 02C7:          05 1A  : Call Sub 26   
Addr : 02C9:             01  : Drop Anchor   
Addr : 02CA: PBASE Constant Address of Label0003
Addr : 02CA:       87 85 A4  : Memory Op Byte PBASE + ADDRESS Address = 05A4
Addr : 02CD:          05 1B  : Call Sub 27   
Addr : 02CF:             00  : Drop Anchor Push 
Addr : 02D0:          37 03  : Constant Mask Y=3 00000010
Addr : 02D2:       06 22 01  : Call Obj.Sub 34 1
Addr : 02D5:             61  : Variable Operation Local Offset - 0 Write
Addr : 02D6:             60  : Variable Operation Local Offset - 0 Read
Addr : 02D7:             35  : Constant 1 $00000000
Addr : 02D8:             F9  : Math Op <     
Addr : 02D9: JZ Label0004
Addr : 02D9:          0A 0C  : jz Address = 02E7 12
Addr : 02DB:             01  : Drop Anchor   
Addr : 02DC: PBASE Constant Address of Label0006
Addr : 02DC:       87 85 BA  : Memory Op Byte PBASE + ADDRESS Address = 05BA
Addr : 02DF:          05 1B  : Call Sub 27   
Addr : 02E1:             01  : Drop Anchor   
Addr : 02E2:             60  : Variable Operation Local Offset - 0 Read
Addr : 02E3:          05 1C  : Call Sub 28   
Addr : 02E5: JMP Label0005
Addr : 02E5:          04 0A  : Jmp 02F1 10   
Addr : 02E7: Label0004
Addr : 02E7:             01  : Drop Anchor   
Addr : 02E8: PBASE Constant Address of Label0008
Addr : 02E8:       87 85 CD  : Memory Op Byte PBASE + ADDRESS Address = 05CD
Addr : 02EB:          05 1B  : Call Sub 27   
Addr : 02ED:             01  : Drop Anchor   
Addr : 02EE:       06 22 07  : Call Obj.Sub 34 7
Addr : 02F1: Label0007
Addr : 02F1: Label0005
Addr : 02F1:             01  : Drop Anchor   
Addr : 02F2:          05 1A  : Call Sub 26   
Addr : 02F4:             01  : Drop Anchor   
Addr : 02F5:       06 22 02  : Call Obj.Sub 34 2
Addr : 02F8:             00  : Drop Anchor Push 
Addr : 02F9:       06 22 0C  : Call Obj.Sub 34 12
Addr : 02FC:          37 02  : Constant Mask Y=2 00000008
Addr : 02FE:             E2  : Math Op >>    
Addr : 02FF:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 0301:             E8  : Math Op &     
Addr : 0302:       89 82 61  : Memory Op Byte VBASE + WRITE Address = 0261
Addr : 0305:             00  : Drop Anchor Push 
Addr : 0306:       06 22 0C  : Call Obj.Sub 34 12
Addr : 0309:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 030B:             E8  : Math Op &     
Addr : 030C:       89 82 62  : Memory Op Byte VBASE + WRITE Address = 0262
Addr : 030F:             01  : Drop Anchor   
Addr : 0310:             35  : Constant 1 $00000000
Addr : 0311:             35  : Constant 1 $00000000
Addr : 0312:       39 70 00  : Constant 2 Bytes - 70 00 
Addr : 0315:          37 04  : Constant Mask Y=4 00000020
Addr : 0317:       88 82 61  : Memory Op Byte VBASE + READ Address = 0261
Addr : 031A:       88 82 62  : Memory Op Byte VBASE + READ Address = 0262
Addr : 031D:             F4  : Math Op *     
Addr : 031E:       06 22 0E  : Call Obj.Sub 34 14
Addr : 0321:             01  : Drop Anchor   
Addr : 0322:             35  : Constant 1 $00000000
Addr : 0323:             35  : Constant 1 $00000000
Addr : 0324:       39 30 00  : Constant 2 Bytes - 30 00 
Addr : 0327:          37 04  : Constant Mask Y=4 00000020
Addr : 0329:       88 82 62  : Memory Op Byte VBASE + READ Address = 0262
Addr : 032C:       06 22 0E  : Call Obj.Sub 34 14
Addr : 032F:             01  : Drop Anchor   
Addr : 0330:             35  : Constant 1 $00000000
Addr : 0331:             36  : Constant 2 $00000001
Addr : 0332:       39 30 00  : Constant 2 Bytes - 30 00 
Addr : 0335:       87 80 B2  : Memory Op Byte PBASE + ADDRESS Address = 00B2
Addr : 0338:       06 22 0D  : Call Obj.Sub 34 13
Addr : 033B:             01  : Drop Anchor   
Addr : 033C:             35  : Constant 1 $00000000
Addr : 033D:       88 82 62  : Memory Op Byte VBASE + READ Address = 0262
Addr : 0340:       87 80 A6  : Memory Op Byte PBASE + ADDRESS Address = 00A6
Addr : 0343:             16  : StrSize(String)
Addr : 0344:             ED  : Math Op -     
Addr : 0345:          37 00  : Constant Mask Y=0 00000002
Addr : 0347:             F6  : Math Op /     
Addr : 0348:       39 30 00  : Constant 2 Bytes - 30 00 
Addr : 034B:       87 80 A6  : Memory Op Byte PBASE + ADDRESS Address = 00A6
Addr : 034E:       06 22 0D  : Call Obj.Sub 34 13
Addr : 0351:             01  : Drop Anchor   
Addr : 0352:             35  : Constant 1 $00000000
Addr : 0353:       88 82 62  : Memory Op Byte VBASE + READ Address = 0262
Addr : 0356:       87 80 9C  : Memory Op Byte PBASE + ADDRESS Address = 009C
Addr : 0359:             16  : StrSize(String)
Addr : 035A:             ED  : Math Op -     
Addr : 035B:             36  : Constant 2 $00000001
Addr : 035C:             ED  : Math Op -     
Addr : 035D:       39 30 00  : Constant 2 Bytes - 30 00 
Addr : 0360:       87 80 9C  : Memory Op Byte PBASE + ADDRESS Address = 009C
Addr : 0363:       06 22 0D  : Call Obj.Sub 34 13
Addr : 0366:             01  : Drop Anchor   
Addr : 0367: PBASE Constant Address of Label0009
Addr : 0367:       87 85 D1  : Memory Op Byte PBASE + ADDRESS Address = 05D1
Addr : 036A:          05 1B  : Call Sub 27   
Addr : 036C:             35  : Constant 1 $00000000
Addr : 036D:             41  : Variable Operation Global Offset - 0 Write
Addr : 036E:             35  : Constant 1 $00000000
Addr : 036F:             45  : Variable Operation Global Offset - 1 Write
Addr : 0370:             35  : Constant 1 $00000000
Addr : 0371:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 0374:             53  : Variable Operation Global Offset - 4 Address
Addr : 0375:             49  : Variable Operation Global Offset - 2 Write
Addr : 0376:             35  : Constant 1 $00000000
Addr : 0377:       C9 82 10  : Memory Op Long VBASE + WRITE Address = 0210
Addr : 037A:             35  : Constant 1 $00000000
Addr : 037B:       C9 82 14  : Memory Op Long VBASE + WRITE Address = 0214
Addr : 037E:             35  : Constant 1 $00000000
Addr : 037F:       C9 82 5C  : Memory Op Long VBASE + WRITE Address = 025C
Addr : 0382:             43  : Variable Operation Global Offset - 0 Address
Addr : 0383:       C5 82 60  : Memory Op Long PBASE + WRITE Address = 0260
Addr : 0386:             47  : Variable Operation Global Offset - 1 Address
Addr : 0387:       C5 82 64  : Memory Op Long PBASE + WRITE Address = 0264
Addr : 038A:       8B 82 60  : Memory Op Byte VBASE + ADDRESS Address = 0260
Addr : 038D:       C5 82 68  : Memory Op Long PBASE + WRITE Address = 0268
Addr : 0390:             4B  : Variable Operation Global Offset - 2 Address
Addr : 0391:       C5 82 6C  : Memory Op Long PBASE + WRITE Address = 026C
Addr : 0394:             4F  : Variable Operation Global Offset - 3 Address
Addr : 0395:       C5 82 70  : Memory Op Long PBASE + WRITE Address = 0270
Addr : 0398:             01  : Drop Anchor   
Addr : 0399: PBASE Constant Address of Label000A
Addr : 0399:       87 85 ED  : Memory Op Byte PBASE + ADDRESS Address = 05ED
Addr : 039C:          05 1B  : Call Sub 27   
Addr : 039E:             01  : Drop Anchor   
Addr : 039F:          05 1A  : Call Sub 26   
Addr : 03A1:             01  : Drop Anchor   
Addr : 03A2: PBASE Constant Address of Label000B
Addr : 03A2:       87 85 F1  : Memory Op Byte PBASE + ADDRESS Address = 05F1
Addr : 03A5:          05 1B  : Call Sub 27   
Addr : 03A7:             00  : Drop Anchor Push 
Addr : 03A8:          38 0E  : Constant 1 Bytes - 0E 
Addr : 03AA:          38 0E  : Constant 1 Bytes - 0E 
Addr : 03AC:             36  : Constant 2 $00000001
Addr : 03AD:             EC  : Math Op +     
Addr : 03AE:       06 23 01  : Call Obj.Sub 35 1
Addr : 03B1:             61  : Variable Operation Local Offset - 0 Write
Addr : 03B2:             60  : Variable Operation Local Offset - 0 Read
Addr : 03B3:             35  : Constant 1 $00000000
Addr : 03B4:             F9  : Math Op <     
Addr : 03B5: JZ Label000C
Addr : 03B5:          0A 0C  : jz Address = 03C3 12
Addr : 03B7:             01  : Drop Anchor   
Addr : 03B8: PBASE Constant Address of Label000E
Addr : 03B8:       87 86 0A  : Memory Op Byte PBASE + ADDRESS Address = 060A
Addr : 03BB:          05 1B  : Call Sub 27   
Addr : 03BD:             01  : Drop Anchor   
Addr : 03BE:             60  : Variable Operation Local Offset - 0 Read
Addr : 03BF:          05 1C  : Call Sub 28   
Addr : 03C1: JMP Label000D
Addr : 03C1:          04 06  : Jmp 03C9 6    
Addr : 03C3: Label000C
Addr : 03C3:             01  : Drop Anchor   
Addr : 03C4: PBASE Constant Address of Label0010
Addr : 03C4:       87 86 1D  : Memory Op Byte PBASE + ADDRESS Address = 061D
Addr : 03C7:          05 1B  : Call Sub 27   
Addr : 03C9: Label000F
Addr : 03C9: Label000D
Addr : 03C9:             01  : Drop Anchor   
Addr : 03CA:          05 1A  : Call Sub 26   
Addr : 03CC:             01  : Drop Anchor   
Addr : 03CD: PBASE Constant Address of Label0011
Addr : 03CD:       87 86 21  : Memory Op Byte PBASE + ADDRESS Address = 0621
Addr : 03D0:          05 1B  : Call Sub 27   
Addr : 03D2:             02  : Drop Anchor Push Try
Addr : 03D3:          38 18  : Constant 1 Bytes - 18 
Addr : 03D5:       06 24 01  : Call Obj.Sub 36 1
Addr : 03D8:             61  : Variable Operation Local Offset - 0 Write
Addr : 03D9:             60  : Variable Operation Local Offset - 0 Read
Addr : 03DA:             35  : Constant 1 $00000000
Addr : 03DB:             F9  : Math Op <     
Addr : 03DC: JZ Label0012
Addr : 03DC:          0A 0C  : jz Address = 03EA 12
Addr : 03DE:             01  : Drop Anchor   
Addr : 03DF: PBASE Constant Address of Label0014
Addr : 03DF:       87 86 39  : Memory Op Byte PBASE + ADDRESS Address = 0639
Addr : 03E2:          05 1B  : Call Sub 27   
Addr : 03E4:             01  : Drop Anchor   
Addr : 03E5:             60  : Variable Operation Local Offset - 0 Read
Addr : 03E6:          05 1C  : Call Sub 28   
Addr : 03E8: JMP Label0013
Addr : 03E8:          04 06  : Jmp 03F0 6    
Addr : 03EA: Label0012
Addr : 03EA:             01  : Drop Anchor   
Addr : 03EB: PBASE Constant Address of Label0016
Addr : 03EB:       87 86 4C  : Memory Op Byte PBASE + ADDRESS Address = 064C
Addr : 03EE:          05 1B  : Call Sub 27   
Addr : 03F0: Label0015
Addr : 03F0: Label0013
Addr : 03F0:             01  : Drop Anchor   
Addr : 03F1:          05 1A  : Call Sub 26   
Addr : 03F3:             01  : Drop Anchor   
Addr : 03F4: PBASE Constant Address of Label0017
Addr : 03F4:       87 86 50  : Memory Op Byte PBASE + ADDRESS Address = 0650
Addr : 03F7:          05 1B  : Call Sub 27   
Addr : 03F9:             00  : Drop Anchor Push 
Addr : 03FA:          37 24  : Constant Mask Y=36 Decrement 0000001F
Addr : 03FC:          38 1E  : Constant 1 Bytes - 1E 
Addr : 03FE:             35  : Constant 1 $00000000
Addr : 03FF:       39 25 80  : Constant 2 Bytes - 25 80 
Addr : 0402:       06 26 01  : Call Obj.Sub 38 1
Addr : 0405:             61  : Variable Operation Local Offset - 0 Write
Addr : 0406:             60  : Variable Operation Local Offset - 0 Read
Addr : 0407:             35  : Constant 1 $00000000
Addr : 0408:             F9  : Math Op <     
Addr : 0409: JZ Label0018
Addr : 0409:          0A 0C  : jz Address = 0417 12
Addr : 040B:             01  : Drop Anchor   
Addr : 040C: PBASE Constant Address of Label001A
Addr : 040C:       87 86 6C  : Memory Op Byte PBASE + ADDRESS Address = 066C
Addr : 040F:          05 1B  : Call Sub 27   
Addr : 0411:             01  : Drop Anchor   
Addr : 0412:             60  : Variable Operation Local Offset - 0 Read
Addr : 0413:          05 1C  : Call Sub 28   
Addr : 0415: JMP Label0019
Addr : 0415:          04 06  : Jmp 041D 6    
Addr : 0417: Label0018
Addr : 0417:             01  : Drop Anchor   
Addr : 0418: PBASE Constant Address of Label001C
Addr : 0418:       87 86 7F  : Memory Op Byte PBASE + ADDRESS Address = 067F
Addr : 041B:          05 1B  : Call Sub 27   
Addr : 041D: Label001B
Addr : 041D: Label0019
Addr : 041D:             01  : Drop Anchor   
Addr : 041E:          05 1A  : Call Sub 26   
Addr : 0420:             35  : Constant 1 $00000000
Addr : 0421:             35  : Constant 1 $00000000
Addr : 0422:             FA  : Math Op >     
Addr : 0423: JZ Label001D
Addr : 0423:          0A 28  : jz Address = 044D 40
Addr : 0425:             01  : Drop Anchor   
Addr : 0426: PBASE Constant Address of Label001F
Addr : 0426:       87 86 83  : Memory Op Byte PBASE + ADDRESS Address = 0683
Addr : 0429:          05 1B  : Call Sub 27   
Addr : 042B:          37 04  : Constant Mask Y=4 00000020
Addr : 042D:       CB 82 18  : Memory Op Long VBASE + ADDRESS Address = 0218
Addr : 0430:             15  : Run           
Addr : 0431:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 0432:             61  : Variable Operation Local Offset - 0 Write
Addr : 0433:             60  : Variable Operation Local Offset - 0 Read
Addr : 0434:             35  : Constant 1 $00000000
Addr : 0435:             F9  : Math Op <     
Addr : 0436: JZ Label0020
Addr : 0436:          0A 0C  : jz Address = 0444 12
Addr : 0438:             01  : Drop Anchor   
Addr : 0439: PBASE Constant Address of Label0022
Addr : 0439:       87 86 95  : Memory Op Byte PBASE + ADDRESS Address = 0695
Addr : 043C:          05 1B  : Call Sub 27   
Addr : 043E:             01  : Drop Anchor   
Addr : 043F:             60  : Variable Operation Local Offset - 0 Read
Addr : 0440:          05 1C  : Call Sub 28   
Addr : 0442: JMP Label0021
Addr : 0442:          04 06  : Jmp 044A 6    
Addr : 0444: Label0020
Addr : 0444:             01  : Drop Anchor   
Addr : 0445: PBASE Constant Address of Label0024
Addr : 0445:       87 86 A8  : Memory Op Byte PBASE + ADDRESS Address = 06A8
Addr : 0448:          05 1B  : Call Sub 27   
Addr : 044A: Label0023
Addr : 044A: Label0021
Addr : 044A:             01  : Drop Anchor   
Addr : 044B:          05 1A  : Call Sub 26   
Addr : 044D: Label001D
Addr : 044D: Label001E
Addr : 044D:             01  : Drop Anchor   
Addr : 044E: PBASE Constant Address of Label0025
Addr : 044E:       87 86 AC  : Memory Op Byte PBASE + ADDRESS Address = 06AC
Addr : 0451:          05 1B  : Call Sub 27   
Addr : 0453:             34  : Constant 0 $FFFFFFFF
Addr : 0454:       C7 80 BC  : Memory Op Long PBASE + ADDRESS Address = 00BC
Addr : 0457:             35  : Constant 1 $00000000
Addr : 0458:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 0459:             36  : Constant 2 $00000001
Addr : 045A:             EC  : Math Op +     
Addr : 045B:             61  : Variable Operation Local Offset - 0 Write
Addr : 045C:             60  : Variable Operation Local Offset - 0 Read
Addr : 045D:             35  : Constant 1 $00000000
Addr : 045E:             F9  : Math Op <     
Addr : 045F: JZ Label0026
Addr : 045F:          0A 0C  : jz Address = 046D 12
Addr : 0461:             01  : Drop Anchor   
Addr : 0462: PBASE Constant Address of Label0028
Addr : 0462:       87 86 C3  : Memory Op Byte PBASE + ADDRESS Address = 06C3
Addr : 0465:          05 1B  : Call Sub 27   
Addr : 0467:             01  : Drop Anchor   
Addr : 0468:             60  : Variable Operation Local Offset - 0 Read
Addr : 0469:          05 1C  : Call Sub 28   
Addr : 046B: JMP Label0027
Addr : 046B:          04 06  : Jmp 0473 6    
Addr : 046D: Label0026
Addr : 046D:             01  : Drop Anchor   
Addr : 046E: PBASE Constant Address of Label002A
Addr : 046E:       87 86 D6  : Memory Op Byte PBASE + ADDRESS Address = 06D6
Addr : 0471:          05 1B  : Call Sub 27   
Addr : 0473: Label0029
Addr : 0473: Label0027
Addr : 0473:             01  : Drop Anchor   
Addr : 0474:          05 1A  : Call Sub 26   
Addr : 0476:             01  : Drop Anchor   
Addr : 0477:       06 22 06  : Call Obj.Sub 34 6
Addr : 047A:             01  : Drop Anchor   
Addr : 047B: PBASE Constant Address of Label002B
Addr : 047B:       87 86 DA  : Memory Op Byte PBASE + ADDRESS Address = 06DA
Addr : 047E:          05 1B  : Call Sub 27   
Addr : 0480:             01  : Drop Anchor   
Addr : 0481:          05 1A  : Call Sub 26   
Addr : 0483: Label002C
Addr : 0483:             40  : Variable Operation Global Offset - 0 Read
Addr : 0484:             65  : Variable Operation Local Offset - 1 Write
Addr : 0485:             64  : Variable Operation Local Offset - 1 Read
Addr : 0486:             35  : Constant 1 $00000000
Addr : 0487:             FB  : Math Op <>    
Addr : 0488: JZ Label002F
Addr : 0488:       0A 81 01  : jz Address = 058C 257
Addr : 048B:             01  : Drop Anchor   
Addr : 048C: PBASE Constant Address of Label0031
Addr : 048C:       87 86 ED  : Memory Op Byte PBASE + ADDRESS Address = 06ED
Addr : 048F:       06 25 07  : Call Obj.Sub 37 7
Addr : 0492:             01  : Drop Anchor   
Addr : 0493:             64  : Variable Operation Local Offset - 1 Read
Addr : 0494:          37 02  : Constant Mask Y=2 00000008
Addr : 0496:       06 25 0E  : Call Obj.Sub 37 14
Addr : 0499:             01  : Drop Anchor   
Addr : 049A:       06 25 17  : Call Obj.Sub 37 23
Addr : 049D: Constant Address of Label0032
Addr : 049D:       39 05 6F  : Constant 2 Bytes - 05 6F 
Addr : 04A0:             64  : Variable Operation Local Offset - 1 Read
Addr : 04A1:             35  : Constant 1 $00000000
Addr : 04A2: Case_Value Label0033
Addr : 04A2:       0D 80 78  : Value Case Address = 051D 120
Addr : 04A5:             36  : Constant 2 $00000001
Addr : 04A6: Case_Value Label0034
Addr : 04A6:       0D 80 75  : Value Case Address = 051E 117
Addr : 04A9:          37 00  : Constant Mask Y=0 00000002
Addr : 04AB: Case_Value Label0035
Addr : 04AB:       0D 80 74  : Value Case Address = 0522 116
Addr : 04AE:          37 03  : Constant Mask Y=3 00000010
Addr : 04B0: Case_Value Label0036
Addr : 04B0:       0D 80 73  : Value Case Address = 0526 115
Addr : 04B3:          38 11  : Constant 1 Bytes - 11 
Addr : 04B5: Case_Value Label0037
Addr : 04B5:       0D 80 72  : Value Case Address = 052A 114
Addr : 04B8:          38 12  : Constant 1 Bytes - 12 
Addr : 04BA: Case_Value Label0038
Addr : 04BA:       0D 80 71  : Value Case Address = 052E 113
Addr : 04BD:          38 13  : Constant 1 Bytes - 13 
Addr : 04BF: Case_Value Label0039
Addr : 04BF:       0D 80 70  : Value Case Address = 0532 112
Addr : 04C2:          38 14  : Constant 1 Bytes - 14 
Addr : 04C4: Case_Value Label003A
Addr : 04C4:       0D 80 6F  : Value Case Address = 0536 111
Addr : 04C7:          38 15  : Constant 1 Bytes - 15 
Addr : 04C9: Case_Value Label003B
Addr : 04C9:       0D 80 6E  : Value Case Address = 053A 110
Addr : 04CC:          38 16  : Constant 1 Bytes - 16 
Addr : 04CE: Case_Value Label003C
Addr : 04CE:       0D 80 6D  : Value Case Address = 053E 109
Addr : 04D1:          38 17  : Constant 1 Bytes - 17 
Addr : 04D3: Case_Value Label003D
Addr : 04D3:       0D 80 6C  : Value Case Address = 0542 108
Addr : 04D6:          38 18  : Constant 1 Bytes - 18 
Addr : 04D8: Case_Value Label003E
Addr : 04D8:       0D 80 6B  : Value Case Address = 0546 107
Addr : 04DB:          37 04  : Constant Mask Y=4 00000020
Addr : 04DD: Case_Value Label003F
Addr : 04DD:       0D 80 6A  : Value Case Address = 054A 106
Addr : 04E0:          38 30  : Constant 1 Bytes - 30 
Addr : 04E2: Case_Value Label0040
Addr : 04E2:       0D 80 69  : Value Case Address = 054E 105
Addr : 04E5:          38 31  : Constant 1 Bytes - 31 
Addr : 04E7: Case_Value Label0041
Addr : 04E7:       0D 80 68  : Value Case Address = 0552 104
Addr : 04EA:          37 05  : Constant Mask Y=5 00000040
Addr : 04EC: Case_Value Label0042
Addr : 04EC:       0D 80 67  : Value Case Address = 0556 103
Addr : 04EF:          38 50  : Constant 1 Bytes - 50 
Addr : 04F1: Case_Value Label0043
Addr : 04F1:       0D 80 66  : Value Case Address = 055A 102
Addr : 04F4:          38 51  : Constant 1 Bytes - 51 
Addr : 04F6: Case_Value Label0044
Addr : 04F6:       0D 80 65  : Value Case Address = 055E 101
Addr : 04F9:          38 52  : Constant 1 Bytes - 52 
Addr : 04FB: Case_Value Label0045
Addr : 04FB:       0D 80 64  : Value Case Address = 0562 100
Addr : 04FE:          38 53  : Constant 1 Bytes - 53 
Addr : 0500: Case_Value Label0046
Addr : 0500:       0D 80 63  : Value Case Address = 0566 99
Addr : 0503:          38 54  : Constant 1 Bytes - 54 
Addr : 0505: Case_Value Label0047
Addr : 0505:       0D 80 62  : Value Case Address = 056A 98
Addr : 0508:          38 55  : Constant 1 Bytes - 55 
Addr : 050A: Case_Value Label0048
Addr : 050A:       0D 80 61  : Value Case Address = 056E 97
Addr : 050D:          38 56  : Constant 1 Bytes - 56 
Addr : 050F: Case_Value Label0049
Addr : 050F:       0D 80 60  : Value Case Address = 0572 96
Addr : 0512:          38 F0  : Constant 1 Bytes - F0 
Addr : 0514: Case_Value Label004A
Addr : 0514:       0D 80 5F  : Value Case Address = 0576 95
Addr : 0517:          38 F1  : Constant 1 Bytes - F1 
Addr : 0519: Case_Value Label004B
Addr : 0519:       0D 80 5F  : Value Case Address = 057B 95
Addr : 051C: CaseDone Label004B
Addr : 051C:             0C  : Casedone      
Addr : 051D: Label0033
Addr : 051D: CaseDone Label0033
Addr : 051D:             0C  : Casedone      
Addr : 051E: Label0034
Addr : 051E:             01  : Drop Anchor   
Addr : 051F:          05 02  : Call Sub 2    
Addr : 0521: CaseDone Label0034
Addr : 0521:             0C  : Casedone      
Addr : 0522: Label0035
Addr : 0522:             01  : Drop Anchor   
Addr : 0523:          05 03  : Call Sub 3    
Addr : 0525: CaseDone Label0035
Addr : 0525:             0C  : Casedone      
Addr : 0526: Label0036
Addr : 0526:             01  : Drop Anchor   
Addr : 0527:          05 04  : Call Sub 4    
Addr : 0529: CaseDone Label0036
Addr : 0529:             0C  : Casedone      
Addr : 052A: Label0037
Addr : 052A:             01  : Drop Anchor   
Addr : 052B:          05 05  : Call Sub 5    
Addr : 052D: CaseDone Label0037
Addr : 052D:             0C  : Casedone      
Addr : 052E: Label0038
Addr : 052E:             01  : Drop Anchor   
Addr : 052F:          05 06  : Call Sub 6    
Addr : 0531: CaseDone Label0038
Addr : 0531:             0C  : Casedone      
Addr : 0532: Label0039
Addr : 0532:             01  : Drop Anchor   
Addr : 0533:          05 07  : Call Sub 7    
Addr : 0535: CaseDone Label0039
Addr : 0535:             0C  : Casedone      
Addr : 0536: Label003A
Addr : 0536:             01  : Drop Anchor   
Addr : 0537:          05 08  : Call Sub 8    
Addr : 0539: CaseDone Label003A
Addr : 0539:             0C  : Casedone      
Addr : 053A: Label003B
Addr : 053A:             01  : Drop Anchor   
Addr : 053B:          05 09  : Call Sub 9    
Addr : 053D: CaseDone Label003B
Addr : 053D:             0C  : Casedone      
Addr : 053E: Label003C
Addr : 053E:             01  : Drop Anchor   
Addr : 053F:          05 0A  : Call Sub 10   
Addr : 0541: CaseDone Label003C
Addr : 0541:             0C  : Casedone      
Addr : 0542: Label003D
Addr : 0542:             01  : Drop Anchor   
Addr : 0543:          05 0B  : Call Sub 11   
Addr : 0545: CaseDone Label003D
Addr : 0545:             0C  : Casedone      
Addr : 0546: Label003E
Addr : 0546:             01  : Drop Anchor   
Addr : 0547:          05 0C  : Call Sub 12   
Addr : 0549: CaseDone Label003E
Addr : 0549:             0C  : Casedone      
Addr : 054A: Label003F
Addr : 054A:             01  : Drop Anchor   
Addr : 054B:          05 0D  : Call Sub 13   
Addr : 054D: CaseDone Label003F
Addr : 054D:             0C  : Casedone      
Addr : 054E: Label0040
Addr : 054E:             01  : Drop Anchor   
Addr : 054F:          05 0E  : Call Sub 14   
Addr : 0551: CaseDone Label0040
Addr : 0551:             0C  : Casedone      
Addr : 0552: Label0041
Addr : 0552:             01  : Drop Anchor   
Addr : 0553:          05 0F  : Call Sub 15   
Addr : 0555: CaseDone Label0041
Addr : 0555:             0C  : Casedone      
Addr : 0556: Label0042
Addr : 0556:             01  : Drop Anchor   
Addr : 0557:          05 10  : Call Sub 16   
Addr : 0559: CaseDone Label0042
Addr : 0559:             0C  : Casedone      
Addr : 055A: Label0043
Addr : 055A:             01  : Drop Anchor   
Addr : 055B:          05 11  : Call Sub 17   
Addr : 055D: CaseDone Label0043
Addr : 055D:             0C  : Casedone      
Addr : 055E: Label0044
Addr : 055E:             01  : Drop Anchor   
Addr : 055F:          05 12  : Call Sub 18   
Addr : 0561: CaseDone Label0044
Addr : 0561:             0C  : Casedone      
Addr : 0562: Label0045
Addr : 0562:             01  : Drop Anchor   
Addr : 0563:          05 13  : Call Sub 19   
Addr : 0565: CaseDone Label0045
Addr : 0565:             0C  : Casedone      
Addr : 0566: Label0046
Addr : 0566:             01  : Drop Anchor   
Addr : 0567:          05 14  : Call Sub 20   
Addr : 0569: CaseDone Label0046
Addr : 0569:             0C  : Casedone      
Addr : 056A: Label0047
Addr : 056A:             01  : Drop Anchor   
Addr : 056B:          05 15  : Call Sub 21   
Addr : 056D: CaseDone Label0047
Addr : 056D:             0C  : Casedone      
Addr : 056E: Label0048
Addr : 056E:             01  : Drop Anchor   
Addr : 056F:          05 16  : Call Sub 22   
Addr : 0571: CaseDone Label0048
Addr : 0571:             0C  : Casedone      
Addr : 0572: Label0049
Addr : 0572:             01  : Drop Anchor   
Addr : 0573:          05 17  : Call Sub 23   
Addr : 0575: CaseDone Label0049
Addr : 0575:             0C  : Casedone      
Addr : 0576: Label004A
Addr : 0576:          37 06  : Constant Mask Y=6 00000080
Addr : 0578:             35  : Constant 1 $00000000
Addr : 0579:             20  : ClkSet(Mode, Freq)
Addr : 057A: CaseDone Label004A
Addr : 057A:             0C  : Casedone      
Addr : 057B: Label004B
Addr : 057B:             01  : Drop Anchor   
Addr : 057C:          05 18  : Call Sub 24   
Addr : 057E: CaseDone Label004B
Addr : 057E:             0C  : Casedone      
Addr : 057F: Label0032
Addr : 057F:             35  : Constant 1 $00000000
Addr : 0580:             41  : Variable Operation Global Offset - 0 Write
Addr : 0581:             01  : Drop Anchor   
Addr : 0582: PBASE Constant Address of Label004C
Addr : 0582:       87 86 F7  : Memory Op Byte PBASE + ADDRESS Address = 06F7
Addr : 0585:       06 25 07  : Call Obj.Sub 37 7
Addr : 0588:             01  : Drop Anchor   
Addr : 0589:       06 25 17  : Call Obj.Sub 37 23
Addr : 058C: Label002F
Addr : 058C: Label0030
Addr : 058C: Label002D
Addr : 058C: JMP Label002C
Addr : 058C:       04 FE F4  : Jmp 0483 -268 
Addr : 058F: Label002E
Addr : 058F:             01  : Drop Anchor   
Addr : 0590:          05 1A  : Call Sub 26   
Addr : 0592:             01  : Drop Anchor   
Addr : 0593: PBASE Constant Address of Label004D
Addr : 0593:       87 87 08  : Memory Op Byte PBASE + ADDRESS Address = 0708
Addr : 0596:          05 1B  : Call Sub 27   
Addr : 0598:             01  : Drop Anchor   
Addr : 0599:          05 1A  : Call Sub 26   
Addr : 059B:             32  : Return        
Addr : 059C: Label0002
Addr : 059C: Data : 53 74 61 72 74 69 6E 67  Starting
Addr : 05A4: Data : 20 50 61 72 50 6F 72 74   ParPort
Addr : 05AC: Data : 50 72 6F 70 2E 2E 2E 00  Prop....
Addr : 05B4: Data :                          
Addr : 05B4: Label0003
Addr : 05B4: Data : 49 6E 69 74 69 61 6C 69  Initiali
Addr : 05BC: Data : 7A 69 6E 67 20 56 69 64  zing Vid
Addr : 05C4: Data : 65 6F 2E 2E 2E 00        eo....
Addr : 05CA: Label0006
Addr : 05CA: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 05D2: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 05DA: Data : 3A 20 00                 : .
Addr : 05DD: Label0008
Addr : 05DD: Data : 20 4F 4B 00               OK.
Addr : 05E1: Label0009
Addr : 05E1: Data : 49 6E 69 74 69 61 6C 69  Initiali
Addr : 05E9: Data : 7A 69 6E 67 20 50 61 72  zing Par
Addr : 05F1: Data : 50 6F 72 74 50 72 6F 70  PortProp
Addr : 05F9: Data : 2E 2E 2E 00              ....
Addr : 05FD: Label000A
Addr : 05FD: Data : 20 4F 4B 00               OK.
Addr : 0601: Label000B
Addr : 0601: Data : 49 6E 69 74 69 61 6C 69  Initiali
Addr : 0609: Data : 7A 69 6E 67 20 4B 65 79  zing Key
Addr : 0611: Data : 62 6F 61 72 64 2E 2E 2E  board...
Addr : 0619: Data : 00                       .
Addr : 061A: Label000E
Addr : 061A: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 0622: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 062A: Data : 3A 20 00                 : .
Addr : 062D: Label0010
Addr : 062D: Data : 20 4F 4B 00               OK.
Addr : 0631: Label0011
Addr : 0631: Data : 49 6E 69 74 69 61 6C 69  Initiali
Addr : 0639: Data : 7A 69 6E 67 20 53 44 20  zing SD 
Addr : 0641: Data : 43 61 72 64 2E 2E 2E 00  Card....
Addr : 0649: Data :                          
Addr : 0649: Label0014
Addr : 0649: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 0651: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 0659: Data : 3A 20 00                 : .
Addr : 065C: Label0016
Addr : 065C: Data : 20 4F 4B 00               OK.
Addr : 0660: Label0017
Addr : 0660: Data : 49 6E 69 74 69 61 6C 69  Initiali
Addr : 0668: Data : 7A 69 6E 67 20 53 65 72  zing Ser
Addr : 0670: Data : 69 61 6C 20 50 6F 72 74  ial Port
Addr : 0678: Data : 2E 2E 2E 00              ....
Addr : 067C: Label001A
Addr : 067C: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 0684: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 068C: Data : 3A 20 00                 : .
Addr : 068F: Label001C
Addr : 068F: Data : 20 4F 4B 00               OK.
Addr : 0693: Label001F
Addr : 0693: Data : 53 74 61 72 74 69 6E 67  Starting
Addr : 069B: Data : 20 54 69 6D 65 72 2E 2E   Timer..
Addr : 06A3: Data : 2E 00                    ..
Addr : 06A5: Label0022
Addr : 06A5: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 06AD: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 06B5: Data : 3A 20 00                 : .
Addr : 06B8: Label0024
Addr : 06B8: Data : 20 4F 4B 00               OK.
Addr : 06BC: Label0025
Addr : 06BC: Data : 53 74 61 72 74 69 6E 67  Starting
Addr : 06C4: Data : 20 50 6F 72 74 49 4F 20   PortIO 
Addr : 06CC: Data : 63 6F 67 2E 2E 2E 00     cog....
Addr : 06D3: Label0028
Addr : 06D3: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 06DB: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 06E3: Data : 3A 20 00                 : .
Addr : 06E6: Label002A
Addr : 06E6: Data : 20 4F 4B 00               OK.
Addr : 06EA: Label002B
Addr : 06EA: Data : 50 61 72 50 6F 72 74 50  ParPortP
Addr : 06F2: Data : 72 6F 70 20 52 65 61 64  rop Read
Addr : 06FA: Data : 79 21 00                 y!.
Addr : 06FD: Label0031
Addr : 06FD: Data : 43 6F 6D 6D 61 6E 64 3A  Command:
Addr : 0705: Data : 20 00                     .
Addr : 0707: Label004C
Addr : 0707: Data : 2A 45 6E 64 20 6F 66 20  *End of 
Addr : 070F: Data : 43 6F 6D 6D 61 6E 64 2A  Command*
Addr : 0717: Data : 00                       .
Addr : 0718: Label004D
Addr : 0718: Data : 50 61 72 50 6F 72 74 50  ParPortP
Addr : 0720: Data : 72 6F 70 20 53 68 75 74  rop Shut
Addr : 0728: Data : 64 6F 77 6E 21 00        down!.
|===========================================================================|
Spin Block EchoByte with 0 Parameters and 0 Extra Stack Longs. Method 2
PRI EchoByte

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 072E:             01  : Drop Anchor   
Addr : 072F:          38 11  : Constant 1 Bytes - 11 
Addr : 0731:          05 19  : Call Sub 25   
Addr : 0733:    8A 82 60 47  : Memory Op Byte VBASE + ASSIGN Address = 0260 LongMathop !
Addr : 0737:             01  : Drop Anchor   
Addr : 0738:          37 03  : Constant Mask Y=3 00000010
Addr : 073A:          05 19  : Call Sub 25   
Addr : 073C:             32  : Return        
Addr : 073D: Data : 32                       2
|===========================================================================|
Spin Block EchoBuf with 0 Parameters and 0 Extra Stack Longs. Method 3
PRI EchoBuf

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 073E:             53  : Variable Operation Global Offset - 4 Address
Addr : 073F:             49  : Variable Operation Global Offset - 2 Write
Addr : 0740:          37 08  : Constant Mask Y=8 00000200
Addr : 0742:             4D  : Variable Operation Global Offset - 3 Write
Addr : 0743:             48  : Variable Operation Global Offset - 2 Read
Addr : 0744:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 0746:             4C  : Variable Operation Global Offset - 3 Read
Addr : 0747:             18  : ByteFill(Start, Value, Count)
Addr : 0748:             01  : Drop Anchor   
Addr : 0749:          38 21  : Constant 1 Bytes - 21 
Addr : 074B:          05 19  : Call Sub 25   
Addr : 074D:             01  : Drop Anchor   
Addr : 074E:          37 04  : Constant Mask Y=4 00000020
Addr : 0750:          05 19  : Call Sub 25   
Addr : 0752:             32  : Return        
Addr : 0753: Data : 32                       2
|===========================================================================|
Spin Block DiskReset with 0 Parameters and 0 Extra Stack Longs. Method 4
PRI DiskReset

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0754:             35  : Constant 1 $00000000
Addr : 0755:       C9 82 5C  : Memory Op Long VBASE + WRITE Address = 025C
Addr : 0758:             01  : Drop Anchor   
Addr : 0759: PBASE Constant Address of Label0002
Addr : 0759:       87 87 83  : Memory Op Byte PBASE + ADDRESS Address = 0783
Addr : 075C:       06 25 07  : Call Obj.Sub 37 7
Addr : 075F:             02  : Drop Anchor Push Try
Addr : 0760:          38 18  : Constant 1 Bytes - 18 
Addr : 0762:       06 24 01  : Call Obj.Sub 36 1
Addr : 0765:       C9 82 10  : Memory Op Long VBASE + WRITE Address = 0210
Addr : 0768:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 076B:             61  : Variable Operation Local Offset - 0 Write
Addr : 076C:             01  : Drop Anchor   
Addr : 076D:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 0770:       06 25 0A  : Call Obj.Sub 37 10
Addr : 0773:             01  : Drop Anchor   
Addr : 0774:       06 25 17  : Call Obj.Sub 37 23
Addr : 0777:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 077A:             35  : Constant 1 $00000000
Addr : 077B:             F9  : Math Op <     
Addr : 077C:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 077F:             01  : Drop Anchor   
Addr : 0780:          37 03  : Constant Mask Y=3 00000010
Addr : 0782:          05 19  : Call Sub 25   
Addr : 0784:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 0787:             35  : Constant 1 $00000000
Addr : 0788:             FA  : Math Op >     
Addr : 0789: JZ Label0003
Addr : 0789:          0A 06  : jz Address = 0791 6
Addr : 078B:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 078E:       C9 82 5C  : Memory Op Long VBASE + WRITE Address = 025C
Addr : 0791: Label0003
Addr : 0791: Label0004
Addr : 0791:             32  : Return        
Addr : 0792: Data : 32                       2
Addr : 0793: Label0002
Addr : 0793: Data : 73 64 63 2E 53 74 61 72  sdc.Star
Addr : 079B: Data : 74 3A 00                 t:.
|===========================================================================|
Spin Block DiskStatus with 0 Parameters and 1 Extra Stack Longs. Method 5
PRI DiskStatus | Stat

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - Stat
|===========================================================================|
Addr : 079E:             01  : Drop Anchor   
Addr : 079F: PBASE Constant Address of Label0002
Addr : 079F:       87 87 AE  : Memory Op Byte PBASE + ADDRESS Address = 07AE
Addr : 07A2:       06 25 07  : Call Obj.Sub 37 7
Addr : 07A5:             01  : Drop Anchor   
Addr : 07A6:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 07A9:       06 25 0A  : Call Obj.Sub 37 10
Addr : 07AC:             01  : Drop Anchor   
Addr : 07AD:       06 25 17  : Call Obj.Sub 37 23
Addr : 07B0:       CB 82 10  : Memory Op Long VBASE + ADDRESS Address = 0210
Addr : 07B3:             49  : Variable Operation Global Offset - 2 Write
Addr : 07B4:          37 01  : Constant Mask Y=1 00000004
Addr : 07B6:             4D  : Variable Operation Global Offset - 3 Write
Addr : 07B7:             01  : Drop Anchor   
Addr : 07B8:          37 04  : Constant Mask Y=4 00000020
Addr : 07BA:          05 19  : Call Sub 25   
Addr : 07BC:             32  : Return        
Addr : 07BD: Data : 32                       2
Addr : 07BE: Label0002
Addr : 07BE: Data : 44 69 73 6B 20 53 74 61  Disk Sta
Addr : 07C6: Data : 74 75 73 3A 00           tus:.
|===========================================================================|
Spin Block DiskPutBuf with 0 Parameters and 0 Extra Stack Longs. Method 6
PRI DiskPutBuf

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 07CB:             53  : Variable Operation Global Offset - 4 Address
Addr : 07CC:             49  : Variable Operation Global Offset - 2 Write
Addr : 07CD:          37 08  : Constant Mask Y=8 00000200
Addr : 07CF:             4D  : Variable Operation Global Offset - 3 Write
Addr : 07D0:             48  : Variable Operation Global Offset - 2 Read
Addr : 07D1:             35  : Constant 1 $00000000
Addr : 07D2:             4C  : Variable Operation Global Offset - 3 Read
Addr : 07D3:             18  : ByteFill(Start, Value, Count)
Addr : 07D4:             01  : Drop Anchor   
Addr : 07D5:          38 21  : Constant 1 Bytes - 21 
Addr : 07D7:          05 19  : Call Sub 25   
Addr : 07D9:             32  : Return        
Addr : 07DA: Data : 32                       2
|===========================================================================|
Spin Block DiskGetBuf with 0 Parameters and 0 Extra Stack Longs. Method 7
PRI DiskGetBuf

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 07DB:             53  : Variable Operation Global Offset - 4 Address
Addr : 07DC:             49  : Variable Operation Global Offset - 2 Write
Addr : 07DD:          37 08  : Constant Mask Y=8 00000200
Addr : 07DF:             4D  : Variable Operation Global Offset - 3 Write
Addr : 07E0:             01  : Drop Anchor   
Addr : 07E1:          37 04  : Constant Mask Y=4 00000020
Addr : 07E3:          05 19  : Call Sub 25   
Addr : 07E5:             32  : Return        
Addr : 07E6: Data : 32                       2
|===========================================================================|
Spin Block DiskRead with 0 Parameters and 0 Extra Stack Longs. Method 8
PRI DiskRead

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 07E7:       CB 82 14  : Memory Op Long VBASE + ADDRESS Address = 0214
Addr : 07EA:             49  : Variable Operation Global Offset - 2 Write
Addr : 07EB:          37 01  : Constant Mask Y=1 00000004
Addr : 07ED:             4D  : Variable Operation Global Offset - 3 Write
Addr : 07EE:             01  : Drop Anchor   
Addr : 07EF:          38 21  : Constant 1 Bytes - 21 
Addr : 07F1:          05 19  : Call Sub 25   
Addr : 07F3:             01  : Drop Anchor   
Addr : 07F4: PBASE Constant Address of Label0002
Addr : 07F4:       87 88 23  : Memory Op Byte PBASE + ADDRESS Address = 0823
Addr : 07F7:       06 25 07  : Call Obj.Sub 37 7
Addr : 07FA:             01  : Drop Anchor   
Addr : 07FB:       C8 82 14  : Memory Op Long VBASE + READ Address = 0214
Addr : 07FE:          37 02  : Constant Mask Y=2 00000008
Addr : 0800:       06 25 0E  : Call Obj.Sub 37 14
Addr : 0803:             01  : Drop Anchor   
Addr : 0804: PBASE Constant Address of Label0003
Addr : 0804:       87 88 32  : Memory Op Byte PBASE + ADDRESS Address = 0832
Addr : 0807:       06 25 07  : Call Obj.Sub 37 7
Addr : 080A:             02  : Drop Anchor Push Try
Addr : 080B:       C8 82 14  : Memory Op Long VBASE + READ Address = 0214
Addr : 080E:             53  : Variable Operation Global Offset - 4 Address
Addr : 080F:       06 24 02  : Call Obj.Sub 36 2
Addr : 0812:       C9 82 10  : Memory Op Long VBASE + WRITE Address = 0210
Addr : 0815:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 0818:             61  : Variable Operation Local Offset - 0 Write
Addr : 0819:             01  : Drop Anchor   
Addr : 081A:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 081D:       06 25 0A  : Call Obj.Sub 37 10
Addr : 0820:             01  : Drop Anchor   
Addr : 0821:       06 25 17  : Call Obj.Sub 37 23
Addr : 0824:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 0827:             35  : Constant 1 $00000000
Addr : 0828:             FB  : Math Op <>    
Addr : 0829:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 082C:             01  : Drop Anchor   
Addr : 082D:          37 03  : Constant Mask Y=3 00000010
Addr : 082F:          05 19  : Call Sub 25   
Addr : 0831:             32  : Return        
Addr : 0832: Data : 32                       2
Addr : 0833: Label0002
Addr : 0833: Data : 73 64 63 2E 52 65 61 64  sdc.Read
Addr : 083B: Data : 42 6C 6F 63 6B 28 00     Block(.
Addr : 0842: Label0003
Addr : 0842: Data : 29 3A 20 00              ): .
|===========================================================================|
Spin Block DiskWrite with 0 Parameters and 0 Extra Stack Longs. Method 9
PRI DiskWrite

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0846:       CB 82 14  : Memory Op Long VBASE + ADDRESS Address = 0214
Addr : 0849:             49  : Variable Operation Global Offset - 2 Write
Addr : 084A:          37 01  : Constant Mask Y=1 00000004
Addr : 084C:             4D  : Variable Operation Global Offset - 3 Write
Addr : 084D:             01  : Drop Anchor   
Addr : 084E:          38 21  : Constant 1 Bytes - 21 
Addr : 0850:          05 19  : Call Sub 25   
Addr : 0852:             01  : Drop Anchor   
Addr : 0853: PBASE Constant Address of Label0002
Addr : 0853:       87 88 82  : Memory Op Byte PBASE + ADDRESS Address = 0882
Addr : 0856:       06 25 07  : Call Obj.Sub 37 7
Addr : 0859:             01  : Drop Anchor   
Addr : 085A:       C8 82 14  : Memory Op Long VBASE + READ Address = 0214
Addr : 085D:          37 02  : Constant Mask Y=2 00000008
Addr : 085F:       06 25 0E  : Call Obj.Sub 37 14
Addr : 0862:             01  : Drop Anchor   
Addr : 0863: PBASE Constant Address of Label0003
Addr : 0863:       87 88 92  : Memory Op Byte PBASE + ADDRESS Address = 0892
Addr : 0866:       06 25 07  : Call Obj.Sub 37 7
Addr : 0869:             02  : Drop Anchor Push Try
Addr : 086A:       C8 82 14  : Memory Op Long VBASE + READ Address = 0214
Addr : 086D:             53  : Variable Operation Global Offset - 4 Address
Addr : 086E:       06 24 03  : Call Obj.Sub 36 3
Addr : 0871:       C9 82 10  : Memory Op Long VBASE + WRITE Address = 0210
Addr : 0874:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 0877:             61  : Variable Operation Local Offset - 0 Write
Addr : 0878:             01  : Drop Anchor   
Addr : 0879:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 087C:       06 25 0A  : Call Obj.Sub 37 10
Addr : 087F:             01  : Drop Anchor   
Addr : 0880:       06 25 17  : Call Obj.Sub 37 23
Addr : 0883:       C8 82 10  : Memory Op Long VBASE + READ Address = 0210
Addr : 0886:             35  : Constant 1 $00000000
Addr : 0887:             FB  : Math Op <>    
Addr : 0888:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 088B:             01  : Drop Anchor   
Addr : 088C:          37 03  : Constant Mask Y=3 00000010
Addr : 088E:          05 19  : Call Sub 25   
Addr : 0890:             32  : Return        
Addr : 0891: Data : 32                       2
Addr : 0892: Label0002
Addr : 0892: Data : 73 64 63 2E 57 72 69 74  sdc.Writ
Addr : 089A: Data : 65 42 6C 6F 63 6B 28 00  eBlock(.
Addr : 08A2: Data :                          
Addr : 08A2: Label0003
Addr : 08A2: Data : 29 3A 20 00              ): .
|===========================================================================|
Spin Block DiskType with 0 Parameters and 0 Extra Stack Longs. Method 10
PRI DiskType

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 08A6:       C8 82 5C  : Memory Op Long VBASE + READ Address = 025C
Addr : 08A9:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 08AC:             01  : Drop Anchor   
Addr : 08AD:          37 03  : Constant Mask Y=3 00000010
Addr : 08AF:          05 19  : Call Sub 25   
Addr : 08B1:             32  : Return        
|===========================================================================|
Spin Block DiskCapacity with 0 Parameters and 1 Extra Stack Longs. Method 11
PRI DiskCapacity | tmp

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - tmp
|===========================================================================|
Addr : 08B2:             02  : Drop Anchor Push Try
Addr : 08B3:       06 24 04  : Call Obj.Sub 36 4
Addr : 08B6:             65  : Variable Operation Local Offset - 1 Write
Addr : 08B7:             67  : Variable Operation Local Offset - 1 Address
Addr : 08B8:             49  : Variable Operation Global Offset - 2 Write
Addr : 08B9:          37 01  : Constant Mask Y=1 00000004
Addr : 08BB:             4D  : Variable Operation Global Offset - 3 Write
Addr : 08BC:             01  : Drop Anchor   
Addr : 08BD:          37 04  : Constant Mask Y=4 00000020
Addr : 08BF:          05 19  : Call Sub 25   
Addr : 08C1:             32  : Return        
|===========================================================================|
Spin Block DiskCSD with 0 Parameters and 0 Extra Stack Longs. Method 12
PRI DiskCSD

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 08C2:             03  : Drop Anchor Try
Addr : 08C3:             53  : Variable Operation Global Offset - 4 Address
Addr : 08C4:       06 24 05  : Call Obj.Sub 36 5
Addr : 08C7:             53  : Variable Operation Global Offset - 4 Address
Addr : 08C8:             49  : Variable Operation Global Offset - 2 Write
Addr : 08C9:          37 03  : Constant Mask Y=3 00000010
Addr : 08CB:             4D  : Variable Operation Global Offset - 3 Write
Addr : 08CC:             01  : Drop Anchor   
Addr : 08CD:          37 04  : Constant Mask Y=4 00000020
Addr : 08CF:          05 19  : Call Sub 25   
Addr : 08D1:             32  : Return        
|===========================================================================|
Spin Block VideoOut with 0 Parameters and 0 Extra Stack Longs. Method 13
PRI VideoOut

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 08D2:             01  : Drop Anchor   
Addr : 08D3:          38 11  : Constant 1 Bytes - 11 
Addr : 08D5:          05 19  : Call Sub 25   
Addr : 08D7:             01  : Drop Anchor   
Addr : 08D8: PBASE Constant Address of Label0002
Addr : 08D8:       87 88 EE  : Memory Op Byte PBASE + ADDRESS Address = 08EE
Addr : 08DB:       06 25 07  : Call Obj.Sub 37 7
Addr : 08DE:             01  : Drop Anchor   
Addr : 08DF:       88 82 60  : Memory Op Byte VBASE + READ Address = 0260
Addr : 08E2:          37 00  : Constant Mask Y=0 00000002
Addr : 08E4:       06 25 0E  : Call Obj.Sub 37 14
Addr : 08E7:             01  : Drop Anchor   
Addr : 08E8:       88 82 60  : Memory Op Byte VBASE + READ Address = 0260
Addr : 08EB:       06 22 0F  : Call Obj.Sub 34 15
Addr : 08EE:             01  : Drop Anchor   
Addr : 08EF: PBASE Constant Address of Label0003
Addr : 08EF:       87 88 F9  : Memory Op Byte PBASE + ADDRESS Address = 08F9
Addr : 08F2:       06 25 07  : Call Obj.Sub 37 7
Addr : 08F5:             01  : Drop Anchor   
Addr : 08F6:       06 25 17  : Call Obj.Sub 37 23
Addr : 08F9:             01  : Drop Anchor   
Addr : 08FA:          05 21  : Call Sub 33   
Addr : 08FC:             32  : Return        
Addr : 08FD: Data : 32                       2
Addr : 08FE: Label0002
Addr : 08FE: Data : 56 69 64 65 6F 4F 75 74  VideoOut
Addr : 0906: Data : 3A 20 00                 : .
Addr : 0909: Label0003
Addr : 0909: Data : 20 3C 64 6F 6E 65 3E 00   <done>.
Addr : 0911: Data :                          
|===========================================================================|
Spin Block KeyboardStatus with 0 Parameters and 0 Extra Stack Longs. Method 14
PRI KeyboardStatus

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0911:             01  : Drop Anchor   
Addr : 0912: PBASE Constant Address of Label0002
Addr : 0912:       87 89 2E  : Memory Op Byte PBASE + ADDRESS Address = 092E
Addr : 0915:       06 25 07  : Call Obj.Sub 37 7
Addr : 0918:             00  : Drop Anchor Push 
Addr : 0919:       06 23 08  : Call Obj.Sub 35 8
Addr : 091C:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 091F:       88 82 60  : Memory Op Byte VBASE + READ Address = 0260
Addr : 0922: JZ Label0003
Addr : 0922:          0A 03  : jz Address = 0927 3
Addr : 0924:             01  : Drop Anchor   
Addr : 0925:          05 21  : Call Sub 33   
Addr : 0927: Label0003
Addr : 0927: Label0004
Addr : 0927:             01  : Drop Anchor   
Addr : 0928:       88 82 60  : Memory Op Byte VBASE + READ Address = 0260
Addr : 092B:          37 00  : Constant Mask Y=0 00000002
Addr : 092D:       06 25 0E  : Call Obj.Sub 37 14
Addr : 0930:             01  : Drop Anchor   
Addr : 0931: PBASE Constant Address of Label0005
Addr : 0931:       87 89 3F  : Memory Op Byte PBASE + ADDRESS Address = 093F
Addr : 0934:       06 25 07  : Call Obj.Sub 37 7
Addr : 0937:             01  : Drop Anchor   
Addr : 0938:          37 03  : Constant Mask Y=3 00000010
Addr : 093A:          05 19  : Call Sub 25   
Addr : 093C:             32  : Return        
Addr : 093D: Data : 32                       2
Addr : 093E: Label0002
Addr : 093E: Data : 4B 65 79 62 6F 61 72 64  Keyboard
Addr : 0946: Data : 53 74 61 74 75 73 3A 20  Status: 
Addr : 094E: Data : 00                       .
Addr : 094F: Label0005
Addr : 094F: Data : 20 3C 64 6F 6E 65 3E 00   <done>.
Addr : 0957: Data :                          
|===========================================================================|
Spin Block KeyboardRead with 0 Parameters and 0 Extra Stack Longs. Method 15
PRI KeyboardRead

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0957: Label0002
Addr : 0957:             00  : Drop Anchor Push 
Addr : 0958:       06 23 08  : Call Obj.Sub 35 8
Addr : 095B: JNZ Label0004
Addr : 095B:          0B 02  : jnz Address = 095F 2
Addr : 095D: Label0003
Addr : 095D: JMP Label0002
Addr : 095D:          04 78  : Jmp 0957 -8   
Addr : 095F: Label0004
Addr : 095F:             00  : Drop Anchor Push 
Addr : 0960:       06 23 06  : Call Obj.Sub 35 6
Addr : 0963:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 0966:             01  : Drop Anchor   
Addr : 0967:          37 03  : Constant Mask Y=3 00000010
Addr : 0969:          05 19  : Call Sub 25   
Addr : 096B:             01  : Drop Anchor   
Addr : 096C:          05 21  : Call Sub 33   
Addr : 096E:             32  : Return        
Addr : 096F: Data : 32                       2
|===========================================================================|
Spin Block SpeakerTone with 0 Parameters and 3 Extra Stack Longs. Method 16
PRI SpeakerTone | Freq, Duration, tmp

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - Freq
Local Variable  DBASE:0008 - Duration
Local Variable  DBASE:000C - tmp
|===========================================================================|
Addr : 0970:             01  : Drop Anchor   
Addr : 0971:          38 11  : Constant 1 Bytes - 11 
Addr : 0973:          05 19  : Call Sub 25   
Addr : 0975:       88 82 60  : Memory Op Byte VBASE + READ Address = 0260
Addr : 0978:          38 0A  : Constant 1 Bytes - 0A 
Addr : 097A:             F4  : Math Op *     
Addr : 097B:             65  : Variable Operation Local Offset - 1 Write
Addr : 097C:             01  : Drop Anchor   
Addr : 097D:          38 11  : Constant 1 Bytes - 11 
Addr : 097F:          05 19  : Call Sub 25   
Addr : 0981:             35  : Constant 1 $00000000
Addr : 0982:             C0  : Memory Op Long POP Address READ 
Addr : 0983:          37 02  : Constant Mask Y=2 00000008
Addr : 0985:             E2  : Math Op >>    
Addr : 0986:       88 82 60  : Memory Op Byte VBASE + READ Address = 0260
Addr : 0989:             F4  : Math Op *     
Addr : 098A:             69  : Variable Operation Local Offset - 2 Write
Addr : 098B:             01  : Drop Anchor   
Addr : 098C: PBASE Constant Address of Label0002
Addr : 098C:       87 89 B8  : Memory Op Byte PBASE + ADDRESS Address = 09B8
Addr : 098F:       06 25 07  : Call Obj.Sub 37 7
Addr : 0992:             01  : Drop Anchor   
Addr : 0993:             64  : Variable Operation Local Offset - 1 Read
Addr : 0994:       06 25 0A  : Call Obj.Sub 37 10
Addr : 0997:             01  : Drop Anchor   
Addr : 0998: PBASE Constant Address of Label0003
Addr : 0998:       87 89 C7  : Memory Op Byte PBASE + ADDRESS Address = 09C7
Addr : 099B:       06 25 07  : Call Obj.Sub 37 7
Addr : 099E:             35  : Constant 1 $00000000
Addr : 099F:             C0  : Memory Op Long POP Address READ 
Addr : 09A0:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 09A3:             F6  : Math Op /     
Addr : 09A4:             6D  : Variable Operation Local Offset - 3 Write
Addr : 09A5:             01  : Drop Anchor   
Addr : 09A6:             68  : Variable Operation Local Offset - 2 Read
Addr : 09A7:             6C  : Variable Operation Local Offset - 3 Read
Addr : 09A8:             F6  : Math Op /     
Addr : 09A9:       06 25 0A  : Call Obj.Sub 37 10
Addr : 09AC:             01  : Drop Anchor   
Addr : 09AD: PBASE Constant Address of Label0004
Addr : 09AD:       87 89 CC  : Memory Op Byte PBASE + ADDRESS Address = 09CC
Addr : 09B0:       06 25 07  : Call Obj.Sub 37 7
Addr : 09B3:             01  : Drop Anchor   
Addr : 09B4:       06 25 17  : Call Obj.Sub 37 23
Addr : 09B7:             01  : Drop Anchor   
Addr : 09B8:             64  : Variable Operation Local Offset - 1 Read
Addr : 09B9:       06 22 04  : Call Obj.Sub 34 4
Addr : 09BC:             68  : Variable Operation Local Offset - 2 Read
Addr : 09BD:          3F 91  : Register op CNT Read
Addr : 09BF:             EC  : Math Op +     
Addr : 09C0:             23  : WaitCnt(count)
Addr : 09C1:             01  : Drop Anchor   
Addr : 09C2:             34  : Constant 0 $FFFFFFFF
Addr : 09C3:       06 22 04  : Call Obj.Sub 34 4
Addr : 09C6:             32  : Return        
Addr : 09C7: Data : 32                       2
Addr : 09C8: Label0002
Addr : 09C8: Data : 53 70 65 61 6B 65 72 20  Speaker 
Addr : 09D0: Data : 54 6F 6E 65 3A 20 00     Tone: .
Addr : 09D7: Label0003
Addr : 09D7: Data : 48 7A 2C 20 00           Hz, .
Addr : 09DC: Label0004
Addr : 09DC: Data : 6D 73 00                 ms.
|===========================================================================|
Spin Block SerialInit with 0 Parameters and 1 Extra Stack Longs. Method 17
PRI SerialInit | Baudrate

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - Baudrate
|===========================================================================|
Addr : 09DF:             67  : Variable Operation Local Offset - 1 Address
Addr : 09E0:             49  : Variable Operation Global Offset - 2 Write
Addr : 09E1:          37 01  : Constant Mask Y=1 00000004
Addr : 09E3:             4D  : Variable Operation Global Offset - 3 Write
Addr : 09E4:             01  : Drop Anchor   
Addr : 09E5:          38 21  : Constant 1 Bytes - 21 
Addr : 09E7:          05 19  : Call Sub 25   
Addr : 09E9:             01  : Drop Anchor   
Addr : 09EA:          37 24  : Constant Mask Y=36 Decrement 0000001F
Addr : 09EC:          38 1E  : Constant 1 Bytes - 1E 
Addr : 09EE:             35  : Constant 1 $00000000
Addr : 09EF:             64  : Variable Operation Local Offset - 1 Read
Addr : 09F0:       06 26 01  : Call Obj.Sub 38 1
Addr : 09F3:             32  : Return        
Addr : 09F4: Data : 32                       2
|===========================================================================|
Spin Block SerialRx with 0 Parameters and 0 Extra Stack Longs. Method 18
PRI SerialRx

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 09F5:             00  : Drop Anchor Push 
Addr : 09F6:       06 26 08  : Call Obj.Sub 38 8
Addr : 09F9:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 09FC:             01  : Drop Anchor   
Addr : 09FD:          37 03  : Constant Mask Y=3 00000010
Addr : 09FF:          05 19  : Call Sub 25   
Addr : 0A01:             32  : Return        
Addr : 0A02: Data : 32                       2
|===========================================================================|
Spin Block SerialTx with 0 Parameters and 0 Extra Stack Longs. Method 19
PRI SerialTx

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0A03:             01  : Drop Anchor   
Addr : 0A04:          38 11  : Constant 1 Bytes - 11 
Addr : 0A06:          05 19  : Call Sub 25   
Addr : 0A08:             01  : Drop Anchor   
Addr : 0A09:       88 82 60  : Memory Op Byte VBASE + READ Address = 0260
Addr : 0A0C:       06 26 09  : Call Obj.Sub 38 9
Addr : 0A0F:             32  : Return        
Addr : 0A10: Data : 32                       2
|===========================================================================|
Spin Block SerialRxStat with 0 Parameters and 0 Extra Stack Longs. Method 20
PRI SerialRxStat

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0A11:             00  : Drop Anchor Push 
Addr : 0A12:       06 26 04  : Call Obj.Sub 38 4
Addr : 0A15:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 0A18:             01  : Drop Anchor   
Addr : 0A19:          37 03  : Constant Mask Y=3 00000010
Addr : 0A1B:          05 19  : Call Sub 25   
Addr : 0A1D:             32  : Return        
|===========================================================================|
Spin Block SerialTxStat with 0 Parameters and 0 Extra Stack Longs. Method 21
PRI SerialTxStat

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0A1E:             00  : Drop Anchor Push 
Addr : 0A1F:       06 26 05  : Call Obj.Sub 38 5
Addr : 0A22:       89 82 60  : Memory Op Byte VBASE + WRITE Address = 0260
Addr : 0A25:             01  : Drop Anchor   
Addr : 0A26:          37 03  : Constant Mask Y=3 00000010
Addr : 0A28:          05 19  : Call Sub 25   
Addr : 0A2A:             32  : Return        
|===========================================================================|
Spin Block SerialRxFlush with 0 Parameters and 0 Extra Stack Longs. Method 22
PRI SerialRxFlush

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0A2B:             01  : Drop Anchor   
Addr : 0A2C:       06 26 03  : Call Obj.Sub 38 3
Addr : 0A2F:             32  : Return        
Addr : 0A30: Data : 32                       2
|===========================================================================|
Spin Block SerialTxFlush with 0 Parameters and 0 Extra Stack Longs. Method 23
PRI SerialTxFlush

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0A31:             32  : Return        
Addr : 0A32: Data : 32                       2
|===========================================================================|
Spin Block GetVersion with 0 Parameters and 1 Extra Stack Longs. Method 24
PRI GetVersion | tmp

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - tmp
|===========================================================================|
Addr : 0A33:    3A 60 00 00  : Constant 3 Bytes - 60 00 00 
Addr : 0A37:             65  : Variable Operation Local Offset - 1 Write
Addr : 0A38:             67  : Variable Operation Local Offset - 1 Address
Addr : 0A39:             49  : Variable Operation Global Offset - 2 Write
Addr : 0A3A:          37 01  : Constant Mask Y=1 00000004
Addr : 0A3C:             4D  : Variable Operation Global Offset - 3 Write
Addr : 0A3D:             01  : Drop Anchor   
Addr : 0A3E:          37 04  : Constant Mask Y=4 00000020
Addr : 0A40:          05 19  : Call Sub 25   
Addr : 0A42:             32  : Return        
|===========================================================================|
Spin Block ExecFunction with 1 Parameters and 0 Extra Stack Longs. Method 25
PRI ExecFunction (Function)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Function
|===========================================================================|
Addr : 0A43:             01  : Drop Anchor   
Addr : 0A44: PBASE Constant Address of Label0002
Addr : 0A44:       87 8A 78  : Memory Op Byte PBASE + ADDRESS Address = 0A78
Addr : 0A47:       06 25 07  : Call Obj.Sub 37 7
Addr : 0A4A:             01  : Drop Anchor   
Addr : 0A4B:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A4C:          37 02  : Constant Mask Y=2 00000008
Addr : 0A4E:       06 25 0E  : Call Obj.Sub 37 14
Addr : 0A51:             40  : Variable Operation Global Offset - 0 Read
Addr : 0A52:             35  : Constant 1 $00000000
Addr : 0A53:             F9  : Math Op <     
Addr : 0A54: JZ Label0003
Addr : 0A54:          0A 0C  : jz Address = 0A62 12
Addr : 0A56:             01  : Drop Anchor   
Addr : 0A57: PBASE Constant Address of Label0005
Addr : 0A57:       87 8A 83  : Memory Op Byte PBASE + ADDRESS Address = 0A83
Addr : 0A5A:       06 25 07  : Call Obj.Sub 37 7
Addr : 0A5D:             01  : Drop Anchor   
Addr : 0A5E:       06 25 17  : Call Obj.Sub 37 23
Addr : 0A61:             32  : Return        
Addr : 0A62: Label0003
Addr : 0A62: Label0004
Addr : 0A62:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A63:             45  : Variable Operation Global Offset - 1 Write
Addr : 0A64: Label0006
Addr : 0A64:             44  : Variable Operation Global Offset - 1 Read
Addr : 0A65:             35  : Constant 1 $00000000
Addr : 0A66:             FD  : Math Op =<    
Addr : 0A67: JNZ Label0008
Addr : 0A67:          0B 02  : jnz Address = 0A6B 2
Addr : 0A69: Label0007
Addr : 0A69: JMP Label0006
Addr : 0A69:          04 79  : Jmp 0A64 -7   
Addr : 0A6B: Label0008
Addr : 0A6B:             44  : Variable Operation Global Offset - 1 Read
Addr : 0A6C:             35  : Constant 1 $00000000
Addr : 0A6D:             F9  : Math Op <     
Addr : 0A6E: JZ Label0009
Addr : 0A6E:          0A 0B  : jz Address = 0A7B 11
Addr : 0A70:             01  : Drop Anchor   
Addr : 0A71: PBASE Constant Address of Label000B
Addr : 0A71:       87 8A 8F  : Memory Op Byte PBASE + ADDRESS Address = 0A8F
Addr : 0A74:       06 25 07  : Call Obj.Sub 37 7
Addr : 0A77:             34  : Constant 0 $FFFFFFFF
Addr : 0A78:             41  : Variable Operation Global Offset - 0 Write
Addr : 0A79: JMP Label000A
Addr : 0A79:          04 07  : Jmp 0A82 7    
Addr : 0A7B: Label0009
Addr : 0A7B:             01  : Drop Anchor   
Addr : 0A7C: PBASE Constant Address of Label000D
Addr : 0A7C:       87 8A 9A  : Memory Op Byte PBASE + ADDRESS Address = 0A9A
Addr : 0A7F:       06 25 07  : Call Obj.Sub 37 7
Addr : 0A82: Label000C
Addr : 0A82: Label000A
Addr : 0A82:             01  : Drop Anchor   
Addr : 0A83:       06 25 17  : Call Obj.Sub 37 23
Addr : 0A86:             32  : Return        
Addr : 0A87: Data : 32                       2
Addr : 0A88: Label0002
Addr : 0A88: Data : 46 75 6E 63 74 69 6F 6E  Function
Addr : 0A90: Data : 3A 20 00                 : .
Addr : 0A93: Label0005
Addr : 0A93: Data : 20 3C 62 79 70 61 73 73   <bypass
Addr : 0A9B: Data : 65 64 3E 00              ed>.
Addr : 0A9F: Label000B
Addr : 0A9F: Data : 20 3C 61 62 6F 72 74 65   <aborte
Addr : 0AA7: Data : 64 3E 00                 d>.
Addr : 0AAA: Label000D
Addr : 0AAA: Data : 20 3C 64 6F 6E 65 3E 00   <done>.
Addr : 0AB2: Data :                          
|===========================================================================|
Spin Block MsgNewLine with 0 Parameters and 0 Extra Stack Longs. Method 26
PRI MsgNewLine

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0AB2:             01  : Drop Anchor   
Addr : 0AB3:       06 25 17  : Call Obj.Sub 37 23
Addr : 0AB6:             01  : Drop Anchor   
Addr : 0AB7:          38 0D  : Constant 1 Bytes - 0D 
Addr : 0AB9:       06 22 0F  : Call Obj.Sub 34 15
Addr : 0ABC:             01  : Drop Anchor   
Addr : 0ABD:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0ABF:       06 22 0F  : Call Obj.Sub 34 15
Addr : 0AC2:             32  : Return        
|===========================================================================|
Spin Block MsgStr with 1 Parameters and 0 Extra Stack Longs. Method 27
PRI MsgStr(StrPtr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - StrPtr
|===========================================================================|
Addr : 0AC3:             01  : Drop Anchor   
Addr : 0AC4:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AC5:       06 25 07  : Call Obj.Sub 37 7
Addr : 0AC8:             01  : Drop Anchor   
Addr : 0AC9:             64  : Variable Operation Local Offset - 1 Read
Addr : 0ACA:       06 22 0B  : Call Obj.Sub 34 11
Addr : 0ACD:             32  : Return        
|===========================================================================|
Spin Block MsgDec with 1 Parameters and 0 Extra Stack Longs. Method 28
PRI MsgDec(Val)                  

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Val
|===========================================================================|
Addr : 0ACE:             01  : Drop Anchor   
Addr : 0ACF:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AD0:       06 25 0A  : Call Obj.Sub 37 10
Addr : 0AD3:             01  : Drop Anchor   
Addr : 0AD4:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AD5:       06 22 08  : Call Obj.Sub 34 8
Addr : 0AD8:             32  : Return        
|===========================================================================|
Spin Block MsgHex with 2 Parameters and 0 Extra Stack Longs. Method 29
PRI MsgHex(Val, Digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Val
Local Parameter DBASE:0008 - Digits
|===========================================================================|
Addr : 0AD9:             01  : Drop Anchor   
Addr : 0ADA:             64  : Variable Operation Local Offset - 1 Read
Addr : 0ADB:             68  : Variable Operation Local Offset - 2 Read
Addr : 0ADC:       06 25 0E  : Call Obj.Sub 37 14
Addr : 0ADF:             01  : Drop Anchor   
Addr : 0AE0:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AE1:             68  : Variable Operation Local Offset - 2 Read
Addr : 0AE2:       06 22 0A  : Call Obj.Sub 34 10
Addr : 0AE5:             32  : Return        
|===========================================================================|
Spin Block DumpBuffer with 1 Parameters and 2 Extra Stack Longs. Method 30
PRI DumpBuffer(Buffer) | i, j

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Buffer
Local Variable  DBASE:0008 - i
Local Variable  DBASE:000C - j
|===========================================================================|
Addr : 0AE6:             35  : Constant 1 $00000000
Addr : 0AE7:             69  : Variable Operation Local Offset - 2 Write
Addr : 0AE8: Label0002
Addr : 0AE8:             01  : Drop Anchor   
Addr : 0AE9:             68  : Variable Operation Local Offset - 2 Read
Addr : 0AEA:          37 03  : Constant Mask Y=3 00000010
Addr : 0AEC:             F4  : Math Op *     
Addr : 0AED:          37 01  : Constant Mask Y=1 00000004
Addr : 0AEF:       06 25 0E  : Call Obj.Sub 37 14
Addr : 0AF2:             01  : Drop Anchor   
Addr : 0AF3: PBASE Constant Address of Label0005
Addr : 0AF3:       87 8B 11  : Memory Op Byte PBASE + ADDRESS Address = 0B11
Addr : 0AF6:       06 25 07  : Call Obj.Sub 37 7
Addr : 0AF9:             35  : Constant 1 $00000000
Addr : 0AFA:             6D  : Variable Operation Local Offset - 3 Write
Addr : 0AFB: Label0006
Addr : 0AFB:             01  : Drop Anchor   
Addr : 0AFC:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AFD:             68  : Variable Operation Local Offset - 2 Read
Addr : 0AFE:          37 03  : Constant Mask Y=3 00000010
Addr : 0B00:             F4  : Math Op *     
Addr : 0B01:             6C  : Variable Operation Local Offset - 3 Read
Addr : 0B02:             EC  : Math Op +     
Addr : 0B03:             90  : Memory Op Byte POP Address POP Index READ 
Addr : 0B04:          37 00  : Constant Mask Y=0 00000002
Addr : 0B06:       06 25 0E  : Call Obj.Sub 37 14
Addr : 0B09:             01  : Drop Anchor   
Addr : 0B0A: PBASE Constant Address of Label0009
Addr : 0B0A:       87 8B 14  : Memory Op Byte PBASE + ADDRESS Address = 0B14
Addr : 0B0D:       06 25 07  : Call Obj.Sub 37 7
Addr : 0B10: Label0007
Addr : 0B10:             35  : Constant 1 $00000000
Addr : 0B11:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 0B13: Repeat j Step Label0006
Addr : 0B13:       6E 02 65  : Variable Operation Local Offset - 3 Assign Repeat-Var loop Address= 0AFB -27
Addr : 0B16: Label0008
Addr : 0B16:             01  : Drop Anchor   
Addr : 0B17:       06 25 17  : Call Obj.Sub 37 23
Addr : 0B1A: Label0003
Addr : 0B1A:             35  : Constant 1 $00000000
Addr : 0B1B:          37 24  : Constant Mask Y=36 Decrement 0000001F
Addr : 0B1D: Repeat i Step Label0002
Addr : 0B1D:       6A 02 48  : Variable Operation Local Offset - 2 Assign Repeat-Var loop Address= 0AE8 -56
Addr : 0B20: Label0004
Addr : 0B20:             32  : Return        
Addr : 0B21: Label0005
Addr : 0B21: Data : 3A 20 00                 : .
Addr : 0B24: Label0009
Addr : 0B24: Data : 20 00                     .
|===========================================================================|
Spin Block Reverse with 1 Parameters and 1 Extra Stack Longs. Method 31
PRI Reverse(Val) | i

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Val
Local Variable  DBASE:0008 - i
|===========================================================================|
Addr : 0B26:             35  : Constant 1 $00000000
Addr : 0B27:             69  : Variable Operation Local Offset - 2 Write
Addr : 0B28: Label0002
Addr : 0B28:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 0B2A:             68  : Variable Operation Local Offset - 2 Read
Addr : 0B2B:             ED  : Math Op -     
Addr : 0B2C:          9C 04  : Memory Op Byte DBASE + POP Index READ Address = 0004
Addr : 0B2E:             68  : Variable Operation Local Offset - 2 Read
Addr : 0B2F:          9D 00  : Memory Op Byte DBASE + POP Index WRITE Address = 0000
Addr : 0B31: Label0003
Addr : 0B31:             35  : Constant 1 $00000000
Addr : 0B32:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 0B34: Repeat i Step Label0002
Addr : 0B34:       6A 02 71  : Variable Operation Local Offset - 2 Assign Repeat-Var loop Address= 0B28 -15
Addr : 0B37: Label0004
Addr : 0B37:             32  : Return        
|===========================================================================|
Spin Block Timer with 0 Parameters and 0 Extra Stack Longs. Method 32
PRI Timer

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0B38:             35  : Constant 1 $00000000
Addr : 0B39:       C9 82 58  : Memory Op Long VBASE + WRITE Address = 0258
Addr : 0B3C: Label0002
Addr : 0B3C:             35  : Constant 1 $00000000
Addr : 0B3D:             C0  : Memory Op Long POP Address READ 
Addr : 0B3E:             36  : Constant 2 $00000001
Addr : 0B3F:             F4  : Math Op *     
Addr : 0B40:          3F 91  : Register op CNT Read
Addr : 0B42:             EC  : Math Op +     
Addr : 0B43:             23  : WaitCnt(count)
Addr : 0B44:       C8 82 58  : Memory Op Long VBASE + READ Address = 0258
Addr : 0B47:             35  : Constant 1 $00000000
Addr : 0B48:             FA  : Math Op >     
Addr : 0B49: JZ Label0005
Addr : 0B49:          0A 0F  : jz Address = 0B5A 15
Addr : 0B4B:       C8 82 58  : Memory Op Long VBASE + READ Address = 0258
Addr : 0B4E:             36  : Constant 2 $00000001
Addr : 0B4F:             FC  : Math Op ==    
Addr : 0B50: JZ Label0007
Addr : 0B50:          0A 04  : jz Address = 0B56 4
Addr : 0B52:             01  : Drop Anchor   
Addr : 0B53:       06 22 03  : Call Obj.Sub 34 3
Addr : 0B56: Label0007
Addr : 0B56: Label0008
Addr : 0B56:    CA 82 58 3E  : Memory Op Long VBASE + ASSIGN Address = 0258 VAR-- post-dec Long
Addr : 0B5A: Label0005
Addr : 0B5A: Label0006
Addr : 0B5A: Label0003
Addr : 0B5A: JMP Label0002
Addr : 0B5A:          04 60  : Jmp 0B3C -32  
Addr : 0B5C: Label0004
Addr : 0B5C:             32  : Return        
|===========================================================================|
Spin Block Activity with 0 Parameters and 0 Extra Stack Longs. Method 33
PRI Activity

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0B5D:             35  : Constant 1 $00000000
Addr : 0B5E:             35  : Constant 1 $00000000
Addr : 0B5F:             FA  : Math Op >     
Addr : 0B60: JZ Label0002
Addr : 0B60:          0A 0F  : jz Address = 0B71 15
Addr : 0B62:       C8 82 58  : Memory Op Long VBASE + READ Address = 0258
Addr : 0B65:             35  : Constant 1 $00000000
Addr : 0B66:             FC  : Math Op ==    
Addr : 0B67: JZ Label0004
Addr : 0B67:          0A 04  : jz Address = 0B6D 4
Addr : 0B69:             01  : Drop Anchor   
Addr : 0B6A:       06 22 02  : Call Obj.Sub 34 2
Addr : 0B6D: Label0004
Addr : 0B6D: Label0005
Addr : 0B6D:             35  : Constant 1 $00000000
Addr : 0B6E:       C9 82 58  : Memory Op Long VBASE + WRITE Address = 0258
Addr : 0B71: Label0002
Addr : 0B71: Label0003
Addr : 0B71:             32  : Return        
|===========================================================================|
Object AnsiTerm
Object Base is 0B74
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0004 Variable sync
VBASE : 0004 LONG Size 0004 Variable loc
VBASE : 0008 LONG Size 0004 Variable xloc
VBASE : 000C LONG Size 0004 Variable yloc
VBASE : 0010 LONG Size 0004 Variable arg0
VBASE : 0014 LONG Size 0004 Variable arg1
VBASE : 0018 LONG Size 0004 Variable vgaBasePin
VBASE : 001C WORD Size 12C0 Variable screen
VBASE : 12DC WORD Size 00A0 Variable tmpl
VBASE : 137C WORD Size 0002 Variable pos
VBASE : 137E WORD Size 0002 Variable regionTop
VBASE : 1380 WORD Size 0002 Variable regionBot
VBASE : 1382 WORD Size 0002 Variable curAttr
VBASE : 1384 WORD Size 0002 Variable bold
VBASE : 1386 WORD Size 0002 Variable underscore
VBASE : 1388 WORD Size 0002 Variable blink
VBASE : 138A WORD Size 0002 Variable reverse
VBASE : 138C WORD Size 0002 Variable fg
VBASE : 138E WORD Size 0002 Variable bg
VBASE : 1390 BYTE Size 0006 Variable cursor
VBASE : 1396 BYTE Size 0001 Variable state
VBASE : 1397 BYTE Size 0001 Variable lastc
|===========================================================================|
Object DAT Blocks
|===========================================================================|
0BF8(0000) 00 00       |   cmap        WORD        0,4,2,6,1,5,3,7                ' Map ANSI color codes to VGA driver RGB
0BFA(0000) 04 00       | 
0BFC(0001) 02 00       | 
0BFE(0001) 06 00       | 
0C00(0002) 01 00       | 
0C02(0002) 05 00       | 
0C04(0003) 03 00       | 
0C06(0003) 07 00       | 
|===========================================================================|
|===========================================================================|
Spin Block start with 1 Parameters and 2 Extra Stack Longs. Method 1
PUB start(BasePin) | i, char

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - BasePin
Local Variable  DBASE:0008 - i
Local Variable  DBASE:000C - char
|===========================================================================|
Addr : 0C08:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C09:             59  : Variable Operation Global Offset - 6 Write
Addr : 0C0A:          38 06  : Constant 1 Bytes - 06 
Addr : 0C0C:          37 00  : Constant Mask Y=0 00000002
Addr : 0C0E:       99 93 90  : Memory Op Byte VBASE + POP Index WRITE Address = 1390
Addr : 0C11:             35  : Constant 1 $00000000
Addr : 0C12:             35  : Constant 1 $00000000
Addr : 0C13:    9A 93 90 80  : Memory Op Byte VBASE + POP Index ASSIGN Address = 1390 Write Push
Addr : 0C17:             49  : Variable Operation Global Offset - 2 Write
Addr : 0C18:             35  : Constant 1 $00000000
Addr : 0C19:             36  : Constant 2 $00000001
Addr : 0C1A:    9A 93 90 80  : Memory Op Byte VBASE + POP Index ASSIGN Address = 1390 Write Push
Addr : 0C1E:             4D  : Variable Operation Global Offset - 3 Write
Addr : 0C1F:             48  : Variable Operation Global Offset - 2 Read
Addr : 0C20:             4C  : Variable Operation Global Offset - 3 Read
Addr : 0C21:          38 50  : Constant 1 Bytes - 50 
Addr : 0C23:             F4  : Math Op *     
Addr : 0C24:             EC  : Math Op +     
Addr : 0C25:             45  : Variable Operation Global Offset - 1 Write
Addr : 0C26:             35  : Constant 1 $00000000
Addr : 0C27:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0C2A:             35  : Constant 1 $00000000
Addr : 0C2B:       A9 93 7E  : Memory Op Word VBASE + WRITE Address = 137E
Addr : 0C2E:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0C31:       A9 93 80  : Memory Op Word VBASE + WRITE Address = 1380
Addr : 0C34:             35  : Constant 1 $00000000
Addr : 0C35:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0C38:             35  : Constant 1 $00000000
Addr : 0C39:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 0C3C:             35  : Constant 1 $00000000
Addr : 0C3D:       A9 93 86  : Memory Op Word VBASE + WRITE Address = 1386
Addr : 0C40:             35  : Constant 1 $00000000
Addr : 0C41:       A9 93 88  : Memory Op Word VBASE + WRITE Address = 1388
Addr : 0C44:             35  : Constant 1 $00000000
Addr : 0C45:       A9 93 8A  : Memory Op Word VBASE + WRITE Address = 138A
Addr : 0C48:             35  : Constant 1 $00000000
Addr : 0C49:       A9 93 8C  : Memory Op Word VBASE + WRITE Address = 138C
Addr : 0C4C:             35  : Constant 1 $00000000
Addr : 0C4D:       A9 93 8E  : Memory Op Word VBASE + WRITE Address = 138E
Addr : 0C50:             01  : Drop Anchor   
Addr : 0C51:             35  : Constant 1 $00000000
Addr : 0C52:          05 12  : Call Sub 18   
Addr : 0C54:             32  : Return        
|===========================================================================|
Spin Block vidOn with 0 Parameters and 0 Extra Stack Longs. Method 2
PUB vidOn

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0C55:             00  : Drop Anchor Push 
Addr : 0C56:             58  : Variable Operation Global Offset - 6 Read
Addr : 0C57:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0C59:       8B 93 90  : Memory Op Byte VBASE + ADDRESS Address = 1390
Addr : 0C5C:             43  : Variable Operation Global Offset - 0 Address
Addr : 0C5D:       06 1F 01  : Call Obj.Sub 31 1
Addr : 0C60:             E7  : Math Op !     
Addr : 0C61: JZ Label0002
Addr : 0C61:          0A 02  : jz Address = 0C65 2
Addr : 0C63:             35  : Constant 1 $00000000
Addr : 0C64:             33  : Return value  
Addr : 0C65: Label0002
Addr : 0C65: Label0003
Addr : 0C65:             32  : Return        
|===========================================================================|
Spin Block vidOff with 0 Parameters and 0 Extra Stack Longs. Method 3
PUB vidOff

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0C66:             01  : Drop Anchor   
Addr : 0C67:       06 1F 02  : Call Obj.Sub 31 2
Addr : 0C6A:             32  : Return        
|===========================================================================|
Spin Block speakerFrequency with 1 Parameters and 0 Extra Stack Longs. Method 4
PUB speakerFrequency(newFrequency)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - newFrequency
|===========================================================================|
Addr : 0C6B:             00  : Drop Anchor Push 
Addr : 0C6C:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C6D:          38 0D  : Constant 1 Bytes - 0D 
Addr : 0C6F:       06 20 01  : Call Obj.Sub 32 1
Addr : 0C72:             61  : Variable Operation Local Offset - 0 Write
Addr : 0C73:             32  : Return        
|===========================================================================|
Spin Block speakerVolume with 1 Parameters and 0 Extra Stack Longs. Method 5
PUB speakerVolume(newVolume)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - newVolume
|===========================================================================|
Addr : 0C74:             00  : Drop Anchor Push 
Addr : 0C75:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C76:          38 0D  : Constant 1 Bytes - 0D 
Addr : 0C78:       06 20 02  : Call Obj.Sub 32 2
Addr : 0C7B:             61  : Variable Operation Local Offset - 0 Write
Addr : 0C7C:             32  : Return        
|===========================================================================|
Spin Block beep with 0 Parameters and 0 Extra Stack Longs. Method 6
PUB beep

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0C7D:             01  : Drop Anchor   
Addr : 0C7E:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 0C81:          38 0D  : Constant 1 Bytes - 0D 
Addr : 0C83:       06 20 01  : Call Obj.Sub 32 1
Addr : 0C86:             35  : Constant 1 $00000000
Addr : 0C87:             C0  : Memory Op Long POP Address READ 
Addr : 0C88:          37 01  : Constant Mask Y=1 00000004
Addr : 0C8A:             E2  : Math Op >>    
Addr : 0C8B:          3F 91  : Register op CNT Read
Addr : 0C8D:             EC  : Math Op +     
Addr : 0C8E:             23  : WaitCnt(count)
Addr : 0C8F:             01  : Drop Anchor   
Addr : 0C90:             34  : Constant 0 $FFFFFFFF
Addr : 0C91:          38 0D  : Constant 1 Bytes - 0D 
Addr : 0C93:       06 20 01  : Call Obj.Sub 32 1
Addr : 0C96:             32  : Return        
|===========================================================================|
Spin Block cls with 0 Parameters and 0 Extra Stack Longs. Method 7
PUB cls

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0C97:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0C99:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0C9C:          37 04  : Constant Mask Y=4 00000020
Addr : 0C9E:             EA  : Math Op |     
Addr : 0C9F:       39 09 60  : Constant 2 Bytes - 09 60 
Addr : 0CA2:             19  : WordFill(Start, Value, Count)
Addr : 0CA3:             32  : Return        
|===========================================================================|
Spin Block dec with 1 Parameters and 1 Extra Stack Longs. Method 8
PUB dec(value) | i

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Variable  DBASE:0008 - i
|===========================================================================|
Addr : 0CA4:             64  : Variable Operation Local Offset - 1 Read
Addr : 0CA5:             35  : Constant 1 $00000000
Addr : 0CA6:             F9  : Math Op <     
Addr : 0CA7: JZ Label0002
Addr : 0CA7:          0A 07  : jz Address = 0CB0 7
Addr : 0CA9:          66 46  : Variable Operation Local Offset - 1 Assign LongMathop -
Addr : 0CAB:             01  : Drop Anchor   
Addr : 0CAC:          38 2D  : Constant 1 Bytes - 2D 
Addr : 0CAE:          05 11  : Call Sub 17   
Addr : 0CB0: Label0002
Addr : 0CB0: Label0003
Addr : 0CB0: 3B 3B 9A CA 00  : Constant 4 Bytes - 3B 9A CA 00 
Addr : 0CB5:             69  : Variable Operation Local Offset - 2 Write
Addr : 0CB6:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0CB8: TJZ Label0006
Addr : 0CB8:          08 27  : tjz Address = 0CE1 39
Addr : 0CBA: Label0004
Addr : 0CBA:             64  : Variable Operation Local Offset - 1 Read
Addr : 0CBB:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CBC:             FE  : Math Op =>    
Addr : 0CBD: JZ Label0007
Addr : 0CBD:          0A 10  : jz Address = 0CCF 16
Addr : 0CBF:             01  : Drop Anchor   
Addr : 0CC0:             64  : Variable Operation Local Offset - 1 Read
Addr : 0CC1:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CC2:             F6  : Math Op /     
Addr : 0CC3:          38 30  : Constant 1 Bytes - 30 
Addr : 0CC5:             EC  : Math Op +     
Addr : 0CC6:          05 11  : Call Sub 17   
Addr : 0CC8:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CC9:          66 57  : Variable Operation Local Offset - 1 Assign LongMathop //
Addr : 0CCB:          62 1C  : Variable Operation Local Offset - 0 Assign VAR~~ Post-set
Addr : 0CCD: JMP Label0008
Addr : 0CCD:          04 0C  : Jmp 0CDB 12   
Addr : 0CCF: Label0007
Addr : 0CCF:             60  : Variable Operation Local Offset - 0 Read
Addr : 0CD0:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CD1:             36  : Constant 2 $00000001
Addr : 0CD2:             FC  : Math Op ==    
Addr : 0CD3:             F2  : Math Op OR    
Addr : 0CD4: JZ Label0009
Addr : 0CD4:          0A 05  : jz Address = 0CDB 5
Addr : 0CD6:             01  : Drop Anchor   
Addr : 0CD7:          38 30  : Constant 1 Bytes - 30 
Addr : 0CD9:          05 11  : Call Sub 17   
Addr : 0CDB: Label0009
Addr : 0CDB: Label0008
Addr : 0CDB:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0CDD:          6A 56  : Variable Operation Local Offset - 2 Assign LongMathop /
Addr : 0CDF: Label0005
Addr : 0CDF: DJNZ Label0004
Addr : 0CDF:          09 59  : djnz Address = 0CBA -39
Addr : 0CE1: Label0006
Addr : 0CE1:             32  : Return        
|===========================================================================|
Spin Block bin with 2 Parameters and 0 Extra Stack Longs. Method 9
PUB bin(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 0CE2: Label0002
Addr : 0CE2:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CE3:          37 04  : Constant Mask Y=4 00000020
Addr : 0CE5:             FA  : Math Op >     
Addr : 0CE6: JZ Label0004
Addr : 0CE6:          0A 09  : jz Address = 0CF1 9
Addr : 0CE8:             01  : Drop Anchor   
Addr : 0CE9:          38 30  : Constant 1 Bytes - 30 
Addr : 0CEB:          05 11  : Call Sub 17   
Addr : 0CED:          6A 3E  : Variable Operation Local Offset - 2 Assign VAR-- post-dec Long
Addr : 0CEF: Label0003
Addr : 0CEF: JMP Label0002
Addr : 0CEF:          04 71  : Jmp 0CE2 -15  
Addr : 0CF1: Label0004
Addr : 0CF1:          37 04  : Constant Mask Y=4 00000020
Addr : 0CF3:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CF4:             ED  : Math Op -     
Addr : 0CF5:          66 43  : Variable Operation Local Offset - 1 Assign ByteMathop <<
Addr : 0CF7:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CF8: TJZ Label0007
Addr : 0CF8:          08 0D  : tjz Address = 0D07 13
Addr : 0CFA: Label0005
Addr : 0CFA:             01  : Drop Anchor   
Addr : 0CFB:             36  : Constant 2 $00000001
Addr : 0CFC:          66 C1  : Variable Operation Local Offset - 1 Assign BitMathop -< Push
Addr : 0CFE:             36  : Constant 2 $00000001
Addr : 0CFF:             E8  : Math Op &     
Addr : 0D00:          38 30  : Constant 1 Bytes - 30 
Addr : 0D02:             EC  : Math Op +     
Addr : 0D03:          05 11  : Call Sub 17   
Addr : 0D05: Label0006
Addr : 0D05: DJNZ Label0005
Addr : 0D05:          09 73  : djnz Address = 0CFA -13
Addr : 0D07: Label0007
Addr : 0D07:             32  : Return        
|===========================================================================|
Spin Block hex with 2 Parameters and 0 Extra Stack Longs. Method 10
PUB hex(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 0D08: Label0002
Addr : 0D08:             68  : Variable Operation Local Offset - 2 Read
Addr : 0D09:          37 02  : Constant Mask Y=2 00000008
Addr : 0D0B:             FA  : Math Op >     
Addr : 0D0C: JZ Label0004
Addr : 0D0C:          0A 09  : jz Address = 0D17 9
Addr : 0D0E:             01  : Drop Anchor   
Addr : 0D0F:          38 30  : Constant 1 Bytes - 30 
Addr : 0D11:          05 11  : Call Sub 17   
Addr : 0D13:          6A 3E  : Variable Operation Local Offset - 2 Assign VAR-- post-dec Long
Addr : 0D15: Label0003
Addr : 0D15: JMP Label0002
Addr : 0D15:          04 71  : Jmp 0D08 -15  
Addr : 0D17: Label0004
Addr : 0D17:          37 02  : Constant Mask Y=2 00000008
Addr : 0D19:             68  : Variable Operation Local Offset - 2 Read
Addr : 0D1A:             ED  : Math Op -     
Addr : 0D1B:          37 00  : Constant Mask Y=0 00000002
Addr : 0D1D:             E3  : Math Op <<    
Addr : 0D1E:          66 43  : Variable Operation Local Offset - 1 Assign ByteMathop <<
Addr : 0D20:             68  : Variable Operation Local Offset - 2 Read
Addr : 0D21: TJZ Label0007
Addr : 0D21:          08 1B  : tjz Address = 0D3E 27
Addr : 0D23: Label0005
Addr : 0D23:             01  : Drop Anchor   
Addr : 0D24:             35  : Constant 1 $00000000
Addr : 0D25: Constant Address of Label0008
Addr : 0D25:       39 01 C6  : Constant 2 Bytes - 01 C6 
Addr : 0D28:          37 01  : Constant Mask Y=1 00000004
Addr : 0D2A:          66 C1  : Variable Operation Local Offset - 1 Assign BitMathop -< Push
Addr : 0D2C:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 0D2E:             E8  : Math Op &     
Addr : 0D2F:          38 30  : Constant 1 Bytes - 30 
Addr : 0D31:          38 39  : Constant 1 Bytes - 39 
Addr : 0D33:             12  : Range LookUp  
Addr : 0D34:          38 41  : Constant 1 Bytes - 41 
Addr : 0D36:          38 46  : Constant 1 Bytes - 46 
Addr : 0D38:             12  : Range LookUp  
Addr : 0D39:             0F  : Lookdone      
Addr : 0D3A: Label0008
Addr : 0D3A:          05 11  : Call Sub 17   
Addr : 0D3C: Label0006
Addr : 0D3C: DJNZ Label0005
Addr : 0D3C:          09 65  : djnz Address = 0D23 -27
Addr : 0D3E: Label0007
Addr : 0D3E:             32  : Return        
|===========================================================================|
Spin Block str with 1 Parameters and 0 Extra Stack Longs. Method 11
PUB str(string_ptr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - string_ptr
|===========================================================================|
Addr : 0D3F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0D40:             16  : StrSize(String)
Addr : 0D41: TJZ Label0004
Addr : 0D41:          08 08  : tjz Address = 0D4B 8
Addr : 0D43: Label0002
Addr : 0D43:             01  : Drop Anchor   
Addr : 0D44:          66 AE  : Variable Operation Local Offset - 1 Assign VAR++ post inc Long Push
Addr : 0D46:             80  : Memory Op Byte POP Address READ 
Addr : 0D47:          05 11  : Call Sub 17   
Addr : 0D49: Label0003
Addr : 0D49: DJNZ Label0002
Addr : 0D49:          09 78  : djnz Address = 0D43 -8
Addr : 0D4B: Label0004
Addr : 0D4B:             32  : Return        
|===========================================================================|
Spin Block statInfo with 0 Parameters and 0 Extra Stack Longs. Method 12
PUB statInfo

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0D4C:          38 05  : Constant 1 Bytes - 05 
Addr : 0D4E:          37 02  : Constant Mask Y=2 00000008
Addr : 0D50:             E3  : Math Op <<    
Addr : 0D51:          38 50  : Constant 1 Bytes - 50 
Addr : 0D53:             EA  : Math Op |     
Addr : 0D54:             61  : Variable Operation Local Offset - 0 Write
Addr : 0D55:             32  : Return        
|===========================================================================|
Spin Block statStr with 4 Parameters and 1 Extra Stack Longs. Method 13
PUB statStr(row, col, attr, strVal) | nxtPos

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - row
Local Parameter DBASE:0008 - col
Local Parameter DBASE:000C - attr
Local Parameter DBASE:0010 - strVal
Local Variable  DBASE:0014 - nxtPos
|===========================================================================|
Addr : 0D56:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0D59:             64  : Variable Operation Local Offset - 1 Read
Addr : 0D5A:          38 50  : Constant 1 Bytes - 50 
Addr : 0D5C:             F4  : Math Op *     
Addr : 0D5D:             EC  : Math Op +     
Addr : 0D5E:             68  : Variable Operation Local Offset - 2 Read
Addr : 0D5F:             EC  : Math Op +     
Addr : 0D60:             75  : Variable Operation Local Offset - 5 Write
Addr : 0D61:             70  : Variable Operation Local Offset - 4 Read
Addr : 0D62:             16  : StrSize(String)
Addr : 0D63: TJZ Label0004
Addr : 0D63:          08 0B  : tjz Address = 0D70 11
Addr : 0D65: Label0002
Addr : 0D65:             6C  : Variable Operation Local Offset - 3 Read
Addr : 0D66:          72 AE  : Variable Operation Local Offset - 4 Assign VAR++ post inc Long Push
Addr : 0D68:             80  : Memory Op Byte POP Address READ 
Addr : 0D69:             EA  : Math Op |     
Addr : 0D6A:          76 AE  : Variable Operation Local Offset - 5 Assign VAR++ post inc Long Push
Addr : 0D6C:          B9 1C  : Memory Op Word VBASE + POP Index WRITE Address = 001C
Addr : 0D6E: Label0003
Addr : 0D6E: DJNZ Label0002
Addr : 0D6E:          09 75  : djnz Address = 0D65 -11
Addr : 0D70: Label0004
Addr : 0D70:             32  : Return        
|===========================================================================|
Spin Block statFill with 5 Parameters and 0 Extra Stack Longs. Method 14
PUB statFill(row, col, attr, charVal, count)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - row
Local Parameter DBASE:0008 - col
Local Parameter DBASE:000C - attr
Local Parameter DBASE:0010 - charVal
Local Parameter DBASE:0014 - count
|===========================================================================|
Addr : 0D71:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0D73:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0D76:             64  : Variable Operation Local Offset - 1 Read
Addr : 0D77:          38 50  : Constant 1 Bytes - 50 
Addr : 0D79:             F4  : Math Op *     
Addr : 0D7A:             EC  : Math Op +     
Addr : 0D7B:             68  : Variable Operation Local Offset - 2 Read
Addr : 0D7C:             EC  : Math Op +     
Addr : 0D7D:          37 00  : Constant Mask Y=0 00000002
Addr : 0D7F:             F4  : Math Op *     
Addr : 0D80:             EC  : Math Op +     
Addr : 0D81:             6C  : Variable Operation Local Offset - 3 Read
Addr : 0D82:             70  : Variable Operation Local Offset - 4 Read
Addr : 0D83:             EA  : Math Op |     
Addr : 0D84:             74  : Variable Operation Local Offset - 5 Read
Addr : 0D85:             19  : WordFill(Start, Value, Count)
Addr : 0D86:             32  : Return        
|===========================================================================|
Spin Block processChar with 1 Parameters and 0 Extra Stack Longs. Method 15
PUB processChar(c)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - c
|===========================================================================|
Addr : 0D87: Constant Address of Label0002
Addr : 0D87:       39 04 2F  : Constant 2 Bytes - 04 2F 
Addr : 0D8A:       88 93 96  : Memory Op Byte VBASE + READ Address = 1396
Addr : 0D8D:             35  : Constant 1 $00000000
Addr : 0D8E: Case_Value Label0003
Addr : 0D8E:          0D 19  : Value Case Address = 0DA9 25
Addr : 0D90:             36  : Constant 2 $00000001
Addr : 0D91: Case_Value Label001F
Addr : 0D91:       0D 80 E6  : Value Case Address = 0E7A 230
Addr : 0D94:          37 00  : Constant Mask Y=0 00000002
Addr : 0D96: Case_Value Label0033
Addr : 0D96:       0D 81 71  : Value Case Address = 0F0A 369
Addr : 0D99:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 0D9B: Case_Value Label003B
Addr : 0D9B:       0D 81 A6  : Value Case Address = 0F44 422
Addr : 0D9E:          37 01  : Constant Mask Y=1 00000004
Addr : 0DA0: Case_Value Label0043
Addr : 0DA0:       0D 81 DB  : Value Case Address = 0F7E 475
Addr : 0DA3:          38 05  : Constant 1 Bytes - 05 
Addr : 0DA5: Case_Value Label0048
Addr : 0DA5:       0D 81 F5  : Value Case Address = 0F9D 501
Addr : 0DA8: CaseDone Label0048
Addr : 0DA8:             0C  : Casedone      
Addr : 0DA9: Label0003
Addr : 0DA9:             64  : Variable Operation Local Offset - 1 Read
Addr : 0DAA:          37 26  : Constant Mask Y=38 Decrement 0000007F
Addr : 0DAC:             FA  : Math Op >     
Addr : 0DAD: JZ Label0004
Addr : 0DAD:          0A 03  : jz Address = 0DB2 3
Addr : 0DAF:          37 04  : Constant Mask Y=4 00000020
Addr : 0DB1:             65  : Variable Operation Local Offset - 1 Write
Addr : 0DB2: Label0004
Addr : 0DB2: Label0005
Addr : 0DB2:             64  : Variable Operation Local Offset - 1 Read
Addr : 0DB3:          37 04  : Constant Mask Y=4 00000020
Addr : 0DB5:             FE  : Math Op =>    
Addr : 0DB6: JZ Label0006
Addr : 0DB6:          0A 0B  : jz Address = 0DC3 11
Addr : 0DB8:             01  : Drop Anchor   
Addr : 0DB9:             64  : Variable Operation Local Offset - 1 Read
Addr : 0DBA:          05 11  : Call Sub 17   
Addr : 0DBC:             01  : Drop Anchor   
Addr : 0DBD:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0DC0:          05 17  : Call Sub 23   
Addr : 0DC2:             32  : Return        
Addr : 0DC3: Label0006
Addr : 0DC3: Label0007
Addr : 0DC3:             64  : Variable Operation Local Offset - 1 Read
Addr : 0DC4:          38 1B  : Constant 1 Bytes - 1B 
Addr : 0DC6:             FC  : Math Op ==    
Addr : 0DC7: JZ Label0008
Addr : 0DC7:          0A 05  : jz Address = 0DCE 5
Addr : 0DC9:             36  : Constant 2 $00000001
Addr : 0DCA:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0DCD:             32  : Return        
Addr : 0DCE: Label0008
Addr : 0DCE: Label0009
Addr : 0DCE:             64  : Variable Operation Local Offset - 1 Read
Addr : 0DCF:          38 0D  : Constant 1 Bytes - 0D 
Addr : 0DD1:             FC  : Math Op ==    
Addr : 0DD2: JZ Label000A
Addr : 0DD2:          0A 14  : jz Address = 0DE8 20
Addr : 0DD4:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0DD7:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0DDA:          38 50  : Constant 1 Bytes - 50 
Addr : 0DDC:             F7  : Math Op //    
Addr : 0DDD:             ED  : Math Op -     
Addr : 0DDE:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0DE1:             01  : Drop Anchor   
Addr : 0DE2:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0DE5:          05 17  : Call Sub 23   
Addr : 0DE7:             32  : Return        
Addr : 0DE8: Label000A
Addr : 0DE8: Label000B
Addr : 0DE8:             64  : Variable Operation Local Offset - 1 Read
Addr : 0DE9:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0DEB:             FC  : Math Op ==    
Addr : 0DEC: JZ Label000C
Addr : 0DEC:          0A 3B  : jz Address = 0E29 59
Addr : 0DEE:             00  : Drop Anchor Push 
Addr : 0DEF:          05 1B  : Call Sub 27   
Addr : 0DF1: JZ Label000E
Addr : 0DF1:          0A 1A  : jz Address = 0E0D 26
Addr : 0DF3:          38 50  : Constant 1 Bytes - 50 
Addr : 0DF5:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0DF9:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0DFC:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0DFF:             FE  : Math Op =>    
Addr : 0E00: JZ Label0010
Addr : 0E00:          0A 09  : jz Address = 0E0B 9
Addr : 0E02:             01  : Drop Anchor   
Addr : 0E03:          05 1C  : Call Sub 28   
Addr : 0E05:          38 50  : Constant 1 Bytes - 50 
Addr : 0E07:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0E0B: Label0010
Addr : 0E0B: Label0011
Addr : 0E0B: JMP Label000F
Addr : 0E0B:          04 15  : Jmp 0E22 21   
Addr : 0E0D: Label000E
Addr : 0E0D:          38 50  : Constant 1 Bytes - 50 
Addr : 0E0F:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0E13:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E16:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0E19:             FE  : Math Op =>    
Addr : 0E1A: JZ Label0013
Addr : 0E1A:          0A 06  : jz Address = 0E22 6
Addr : 0E1C:          38 50  : Constant 1 Bytes - 50 
Addr : 0E1E:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0E22: Label0013
Addr : 0E22: Label0014
Addr : 0E22: Label0012
Addr : 0E22: Label000F
Addr : 0E22:             01  : Drop Anchor   
Addr : 0E23:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E26:          05 17  : Call Sub 23   
Addr : 0E28:             32  : Return        
Addr : 0E29: Label000C
Addr : 0E29: Label000D
Addr : 0E29:             64  : Variable Operation Local Offset - 1 Read
Addr : 0E2A:          38 09  : Constant 1 Bytes - 09 
Addr : 0E2C:             FC  : Math Op ==    
Addr : 0E2D: JZ Label0015
Addr : 0E2D:          0A 27  : jz Address = 0E56 39
Addr : 0E2F:          37 02  : Constant Mask Y=2 00000008
Addr : 0E31:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E34:          37 02  : Constant Mask Y=2 00000008
Addr : 0E36:             F7  : Math Op //    
Addr : 0E37:             ED  : Math Op -     
Addr : 0E38:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0E3C:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E3F:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0E42:             FE  : Math Op =>    
Addr : 0E43: JZ Label0017
Addr : 0E43:          0A 0A  : jz Address = 0E4F 10
Addr : 0E45:       39 07 80  : Constant 2 Bytes - 07 80 
Addr : 0E48:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0E4B:             01  : Drop Anchor   
Addr : 0E4C:             35  : Constant 1 $00000000
Addr : 0E4D:          05 15  : Call Sub 21   
Addr : 0E4F: Label0017
Addr : 0E4F: Label0018
Addr : 0E4F:             01  : Drop Anchor   
Addr : 0E50:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E53:          05 17  : Call Sub 23   
Addr : 0E55:             32  : Return        
Addr : 0E56: Label0015
Addr : 0E56: Label0016
Addr : 0E56:             64  : Variable Operation Local Offset - 1 Read
Addr : 0E57:          37 02  : Constant Mask Y=2 00000008
Addr : 0E59:             FC  : Math Op ==    
Addr : 0E5A: JZ Label0019
Addr : 0E5A:          0A 13  : jz Address = 0E6F 19
Addr : 0E5C:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E5F:             35  : Constant 1 $00000000
Addr : 0E60:             FA  : Math Op >     
Addr : 0E61: JZ Label001B
Addr : 0E61:          0A 05  : jz Address = 0E68 5
Addr : 0E63:             36  : Constant 2 $00000001
Addr : 0E64:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0E68: Label001B
Addr : 0E68: Label001C
Addr : 0E68:             01  : Drop Anchor   
Addr : 0E69:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E6C:          05 17  : Call Sub 23   
Addr : 0E6E:             32  : Return        
Addr : 0E6F: Label0019
Addr : 0E6F: Label001A
Addr : 0E6F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0E70:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 0E72:             FC  : Math Op ==    
Addr : 0E73: JZ Label001D
Addr : 0E73:          0A 04  : jz Address = 0E79 4
Addr : 0E75:             01  : Drop Anchor   
Addr : 0E76:          05 06  : Call Sub 6    
Addr : 0E78:             32  : Return        
Addr : 0E79: Label001D
Addr : 0E79: Label001E
Addr : 0E79: CaseDone Label0003
Addr : 0E79:             0C  : Casedone      
Addr : 0E7A: Label001F
Addr : 0E7A: Constant Address of Label0020
Addr : 0E7A:       39 03 90  : Constant 2 Bytes - 03 90 
Addr : 0E7D:             64  : Variable Operation Local Offset - 1 Read
Addr : 0E7E:          38 5B  : Constant 1 Bytes - 5B 
Addr : 0E80: Case_Value Label0021
Addr : 0E80:          0D 22  : Value Case Address = 0EA4 34
Addr : 0E82:          38 50  : Constant 1 Bytes - 50 
Addr : 0E84: Case_Value Label0022
Addr : 0E84:          0D 29  : Value Case Address = 0EAF 41
Addr : 0E86:          38 4B  : Constant 1 Bytes - 4B 
Addr : 0E88: Case_Value Label0025
Addr : 0E88:          0D 3B  : Value Case Address = 0EC5 59
Addr : 0E8A:          38 48  : Constant 1 Bytes - 48 
Addr : 0E8C: Case_Value Label0028
Addr : 0E8C:       0D 80 43  : Value Case Address = 0ED2 67
Addr : 0E8F:          38 44  : Constant 1 Bytes - 44 
Addr : 0E91: Case_Value Label002B
Addr : 0E91:       0D 80 52  : Value Case Address = 0EE6 82
Addr : 0E94:          38 4D  : Constant 1 Bytes - 4D 
Addr : 0E96: Case_Value Label002E
Addr : 0E96:       0D 80 56  : Value Case Address = 0EEF 86
Addr : 0E99:          38 47  : Constant 1 Bytes - 47 
Addr : 0E9B: Case_Value Label0031
Addr : 0E9B:       0D 80 5A  : Value Case Address = 0EF8 90
Addr : 0E9E:          38 28  : Constant 1 Bytes - 28 
Addr : 0EA0: Case_Value Label0032
Addr : 0EA0:       0D 80 5A  : Value Case Address = 0EFD 90
Addr : 0EA3: CaseDone Label0032
Addr : 0EA3:             0C  : Casedone      
Addr : 0EA4: Label0021
Addr : 0EA4:             34  : Constant 0 $FFFFFFFF
Addr : 0EA5:          56 80  : Variable Operation Global Offset - 5 Assign Write Push
Addr : 0EA7:             51  : Variable Operation Global Offset - 4 Write
Addr : 0EA8:          37 00  : Constant Mask Y=0 00000002
Addr : 0EAA:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0EAD:             32  : Return        
Addr : 0EAE: CaseDone Label0021
Addr : 0EAE:             0C  : Casedone      
Addr : 0EAF: Label0022
Addr : 0EAF:          38 50  : Constant 1 Bytes - 50 
Addr : 0EB1:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0EB5:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0EB8:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0EBB:             FE  : Math Op =>    
Addr : 0EBC: JZ Label0023
Addr : 0EBC:          0A 06  : jz Address = 0EC4 6
Addr : 0EBE:          38 50  : Constant 1 Bytes - 50 
Addr : 0EC0:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0EC4: Label0023
Addr : 0EC4: Label0024
Addr : 0EC4: CaseDone Label0022
Addr : 0EC4:             0C  : Casedone      
Addr : 0EC5: Label0025
Addr : 0EC5:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0EC8:             35  : Constant 1 $00000000
Addr : 0EC9:             FA  : Math Op >     
Addr : 0ECA: JZ Label0026
Addr : 0ECA:          0A 05  : jz Address = 0ED1 5
Addr : 0ECC:             36  : Constant 2 $00000001
Addr : 0ECD:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0ED1: Label0026
Addr : 0ED1: Label0027
Addr : 0ED1: CaseDone Label0025
Addr : 0ED1:             0C  : Casedone      
Addr : 0ED2: Label0028
Addr : 0ED2:          38 50  : Constant 1 Bytes - 50 
Addr : 0ED4:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0ED8:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0EDB:             35  : Constant 1 $00000000
Addr : 0EDC:             F9  : Math Op <     
Addr : 0EDD: JZ Label0029
Addr : 0EDD:          0A 06  : jz Address = 0EE5 6
Addr : 0EDF:          38 50  : Constant 1 Bytes - 50 
Addr : 0EE1:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0EE5: Label0029
Addr : 0EE5: Label002A
Addr : 0EE5: CaseDone Label0028
Addr : 0EE5:             0C  : Casedone      
Addr : 0EE6: Label002B
Addr : 0EE6:             00  : Drop Anchor Push 
Addr : 0EE7:          05 1B  : Call Sub 27   
Addr : 0EE9: JZ Label002C
Addr : 0EE9:          0A 03  : jz Address = 0EEE 3
Addr : 0EEB:             01  : Drop Anchor   
Addr : 0EEC:          05 1C  : Call Sub 28   
Addr : 0EEE: Label002C
Addr : 0EEE: Label002D
Addr : 0EEE: CaseDone Label002B
Addr : 0EEE:             0C  : Casedone      
Addr : 0EEF: Label002E
Addr : 0EEF:             00  : Drop Anchor Push 
Addr : 0EF0:          05 1B  : Call Sub 27   
Addr : 0EF2: JZ Label002F
Addr : 0EF2:          0A 03  : jz Address = 0EF7 3
Addr : 0EF4:             01  : Drop Anchor   
Addr : 0EF5:          05 1D  : Call Sub 29   
Addr : 0EF7: Label002F
Addr : 0EF7: Label0030
Addr : 0EF7: CaseDone Label002E
Addr : 0EF7:             0C  : Casedone      
Addr : 0EF8: Label0031
Addr : 0EF8:             35  : Constant 1 $00000000
Addr : 0EF9:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0EFC: CaseDone Label0031
Addr : 0EFC:             0C  : Casedone      
Addr : 0EFD: Label0032
Addr : 0EFD:          38 05  : Constant 1 Bytes - 05 
Addr : 0EFF:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0F02:             32  : Return        
Addr : 0F03: CaseDone Label0032
Addr : 0F03:             0C  : Casedone      
Addr : 0F04: Label0020
Addr : 0F04:             35  : Constant 1 $00000000
Addr : 0F05:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0F08:             32  : Return        
Addr : 0F09: CaseDone Label001F
Addr : 0F09:             0C  : Casedone      
Addr : 0F0A: Label0033
Addr : 0F0A:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F0B:          38 30  : Constant 1 Bytes - 30 
Addr : 0F0D:             FE  : Math Op =>    
Addr : 0F0E:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F0F:          38 39  : Constant 1 Bytes - 39 
Addr : 0F11:             FD  : Math Op =<    
Addr : 0F12:             F0  : Math Op AND   
Addr : 0F13: JZ Label0034
Addr : 0F13:          0A 17  : jz Address = 0F2C 23
Addr : 0F15:             50  : Variable Operation Global Offset - 4 Read
Addr : 0F16:             34  : Constant 0 $FFFFFFFF
Addr : 0F17:             FC  : Math Op ==    
Addr : 0F18: JZ Label0036
Addr : 0F18:          0A 07  : jz Address = 0F21 7
Addr : 0F1A:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F1B:          38 30  : Constant 1 Bytes - 30 
Addr : 0F1D:             ED  : Math Op -     
Addr : 0F1E:             51  : Variable Operation Global Offset - 4 Write
Addr : 0F1F: JMP Label0037
Addr : 0F1F:          04 0A  : Jmp 0F2B 10   
Addr : 0F21: Label0036
Addr : 0F21:             50  : Variable Operation Global Offset - 4 Read
Addr : 0F22:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0F24:             F4  : Math Op *     
Addr : 0F25:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F26:          38 30  : Constant 1 Bytes - 30 
Addr : 0F28:             ED  : Math Op -     
Addr : 0F29:             EC  : Math Op +     
Addr : 0F2A:             51  : Variable Operation Global Offset - 4 Write
Addr : 0F2B: Label0038
Addr : 0F2B: Label0037
Addr : 0F2B:             32  : Return        
Addr : 0F2C: Label0034
Addr : 0F2C: Label0035
Addr : 0F2C:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F2D:          38 3B  : Constant 1 Bytes - 3B 
Addr : 0F2F:             FC  : Math Op ==    
Addr : 0F30: JZ Label0039
Addr : 0F30:          0A 06  : jz Address = 0F38 6
Addr : 0F32:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 0F34:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0F37:             32  : Return        
Addr : 0F38: Label0039
Addr : 0F38: Label003A
Addr : 0F38:             01  : Drop Anchor   
Addr : 0F39:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F3A:          05 1E  : Call Sub 30   
Addr : 0F3C:             01  : Drop Anchor   
Addr : 0F3D:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F40:          05 17  : Call Sub 23   
Addr : 0F42:             32  : Return        
Addr : 0F43: CaseDone Label0033
Addr : 0F43:             0C  : Casedone      
Addr : 0F44: Label003B
Addr : 0F44:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F45:          38 30  : Constant 1 Bytes - 30 
Addr : 0F47:             FE  : Math Op =>    
Addr : 0F48:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F49:          38 39  : Constant 1 Bytes - 39 
Addr : 0F4B:             FD  : Math Op =<    
Addr : 0F4C:             F0  : Math Op AND   
Addr : 0F4D: JZ Label003C
Addr : 0F4D:          0A 17  : jz Address = 0F66 23
Addr : 0F4F:             54  : Variable Operation Global Offset - 5 Read
Addr : 0F50:             34  : Constant 0 $FFFFFFFF
Addr : 0F51:             FC  : Math Op ==    
Addr : 0F52: JZ Label003E
Addr : 0F52:          0A 07  : jz Address = 0F5B 7
Addr : 0F54:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F55:          38 30  : Constant 1 Bytes - 30 
Addr : 0F57:             ED  : Math Op -     
Addr : 0F58:             55  : Variable Operation Global Offset - 5 Write
Addr : 0F59: JMP Label003F
Addr : 0F59:          04 0A  : Jmp 0F65 10   
Addr : 0F5B: Label003E
Addr : 0F5B:             54  : Variable Operation Global Offset - 5 Read
Addr : 0F5C:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0F5E:             F4  : Math Op *     
Addr : 0F5F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F60:          38 30  : Constant 1 Bytes - 30 
Addr : 0F62:             ED  : Math Op -     
Addr : 0F63:             EC  : Math Op +     
Addr : 0F64:             55  : Variable Operation Global Offset - 5 Write
Addr : 0F65: Label0040
Addr : 0F65: Label003F
Addr : 0F65:             32  : Return        
Addr : 0F66: Label003C
Addr : 0F66: Label003D
Addr : 0F66:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F67:          38 3B  : Constant 1 Bytes - 3B 
Addr : 0F69:             FC  : Math Op ==    
Addr : 0F6A: JZ Label0041
Addr : 0F6A:          0A 06  : jz Address = 0F72 6
Addr : 0F6C:          37 01  : Constant Mask Y=1 00000004
Addr : 0F6E:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0F71:             32  : Return        
Addr : 0F72: Label0041
Addr : 0F72: Label0042
Addr : 0F72:             01  : Drop Anchor   
Addr : 0F73:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F74:          05 1E  : Call Sub 30   
Addr : 0F76:             01  : Drop Anchor   
Addr : 0F77:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F7A:          05 17  : Call Sub 23   
Addr : 0F7C:             32  : Return        
Addr : 0F7D: CaseDone Label003B
Addr : 0F7D:             0C  : Casedone      
Addr : 0F7E: Label0043
Addr : 0F7E:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F7F:          38 30  : Constant 1 Bytes - 30 
Addr : 0F81:             FE  : Math Op =>    
Addr : 0F82:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F83:          38 39  : Constant 1 Bytes - 39 
Addr : 0F85:             FD  : Math Op =<    
Addr : 0F86:             F0  : Math Op AND   
Addr : 0F87: JZ Label0044
Addr : 0F87:          0A 01  : jz Address = 0F8A 1
Addr : 0F89:             32  : Return        
Addr : 0F8A: Label0044
Addr : 0F8A: Label0045
Addr : 0F8A:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F8B:          38 3B  : Constant 1 Bytes - 3B 
Addr : 0F8D:             FC  : Math Op ==    
Addr : 0F8E: JZ Label0046
Addr : 0F8E:          0A 01  : jz Address = 0F91 1
Addr : 0F90:             32  : Return        
Addr : 0F91: Label0046
Addr : 0F91: Label0047
Addr : 0F91:             01  : Drop Anchor   
Addr : 0F92:             64  : Variable Operation Local Offset - 1 Read
Addr : 0F93:          05 1E  : Call Sub 30   
Addr : 0F95:             01  : Drop Anchor   
Addr : 0F96:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F99:          05 17  : Call Sub 23   
Addr : 0F9B:             32  : Return        
Addr : 0F9C: CaseDone Label0043
Addr : 0F9C:             0C  : Casedone      
Addr : 0F9D: Label0048
Addr : 0F9D:             35  : Constant 1 $00000000
Addr : 0F9E:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0FA1:             32  : Return        
Addr : 0FA2: CaseDone Label0048
Addr : 0FA2: Data : 0C                       .
Addr : 0FA3: Label0002
Addr : 0FA3: Data : 32                       2
Addr : 0FA4: Data : 32                       2
|===========================================================================|
Spin Block clsTerm with 0 Parameters and 0 Extra Stack Longs. Method 16
PRI clsTerm

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0FA5:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0FA7:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0FAA:          37 04  : Constant Mask Y=4 00000020
Addr : 0FAC:             EA  : Math Op |     
Addr : 0FAD:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0FB0:             19  : WordFill(Start, Value, Count)
Addr : 0FB1:             32  : Return        
|===========================================================================|
Spin Block outc with 1 Parameters and 0 Extra Stack Longs. Method 17
PRI outc(c)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - c
|===========================================================================|
Addr : 0FB2:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0FB5:             64  : Variable Operation Local Offset - 1 Read
Addr : 0FB6:             EA  : Math Op |     
Addr : 0FB7:    AA 93 7C AC  : Memory Op Word VBASE + ASSIGN Address = 137C VAR++ post inc Word Push
Addr : 0FBB:          B9 1C  : Memory Op Word VBASE + POP Index WRITE Address = 001C
Addr : 0FBD:             64  : Variable Operation Local Offset - 1 Read
Addr : 0FBE:       89 93 97  : Memory Op Byte VBASE + WRITE Address = 1397
Addr : 0FC1:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0FC4:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0FC7:             FC  : Math Op ==    
Addr : 0FC8: JZ Label0002
Addr : 0FC8:          0A 0B  : jz Address = 0FD5 11
Addr : 0FCA:             01  : Drop Anchor   
Addr : 0FCB:          05 1C  : Call Sub 28   
Addr : 0FCD:          38 50  : Constant 1 Bytes - 50 
Addr : 0FCF:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0FD3: JMP Label0003
Addr : 0FD3:          04 0F  : Jmp 0FE4 15   
Addr : 0FD5: Label0002
Addr : 0FD5:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0FD8:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0FDB:             FC  : Math Op ==    
Addr : 0FDC: JZ Label0004
Addr : 0FDC:          0A 06  : jz Address = 0FE4 6
Addr : 0FDE:       39 07 80  : Constant 2 Bytes - 07 80 
Addr : 0FE1:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0FE4: Label0004
Addr : 0FE4: Label0003
Addr : 0FE4:             32  : Return        
|===========================================================================|
Spin Block setMode with 1 Parameters and 0 Extra Stack Longs. Method 18
PRI setMode(n)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - n
|===========================================================================|
Addr : 0FE5:             64  : Variable Operation Local Offset - 1 Read
Addr : 0FE6:             35  : Constant 1 $00000000
Addr : 0FE7:             FC  : Math Op ==    
Addr : 0FE8: JZ Label0002
Addr : 0FE8:          0A 1C  : jz Address = 1006 28
Addr : 0FEA:             35  : Constant 1 $00000000
Addr : 0FEB:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 0FEE:             35  : Constant 1 $00000000
Addr : 0FEF:       A9 93 86  : Memory Op Word VBASE + WRITE Address = 1386
Addr : 0FF2:             35  : Constant 1 $00000000
Addr : 0FF3:       A9 93 88  : Memory Op Word VBASE + WRITE Address = 1388
Addr : 0FF6:             35  : Constant 1 $00000000
Addr : 0FF7:       A9 93 8A  : Memory Op Word VBASE + WRITE Address = 138A
Addr : 0FFA:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 0FFC:       A9 93 8C  : Memory Op Word VBASE + WRITE Address = 138C
Addr : 0FFF:             35  : Constant 1 $00000000
Addr : 1000:       A9 93 8E  : Memory Op Word VBASE + WRITE Address = 138E
Addr : 1003: JMP Label0003
Addr : 1003:       04 80 9E  : Jmp 10A4 158  
Addr : 1006: Label0002
Addr : 1006:             64  : Variable Operation Local Offset - 1 Read
Addr : 1007:             36  : Constant 2 $00000001
Addr : 1008:             FC  : Math Op ==    
Addr : 1009: JZ Label0004
Addr : 1009:          0A 07  : jz Address = 1012 7
Addr : 100B:             36  : Constant 2 $00000001
Addr : 100C:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 100F: JMP Label0003
Addr : 100F:       04 80 92  : Jmp 10A4 146  
Addr : 1012: Label0004
Addr : 1012:             64  : Variable Operation Local Offset - 1 Read
Addr : 1013:          37 01  : Constant Mask Y=1 00000004
Addr : 1015:             FC  : Math Op ==    
Addr : 1016: JZ Label0005
Addr : 1016:          0A 07  : jz Address = 101F 7
Addr : 1018:             36  : Constant 2 $00000001
Addr : 1019:       A9 93 86  : Memory Op Word VBASE + WRITE Address = 1386
Addr : 101C: JMP Label0003
Addr : 101C:       04 80 85  : Jmp 10A4 133  
Addr : 101F: Label0005
Addr : 101F:             64  : Variable Operation Local Offset - 1 Read
Addr : 1020:          38 05  : Constant 1 Bytes - 05 
Addr : 1022:             FC  : Math Op ==    
Addr : 1023: JZ Label0006
Addr : 1023:          0A 07  : jz Address = 102C 7
Addr : 1025:             36  : Constant 2 $00000001
Addr : 1026:       A9 93 88  : Memory Op Word VBASE + WRITE Address = 1388
Addr : 1029: JMP Label0003
Addr : 1029:       04 80 78  : Jmp 10A4 120  
Addr : 102C: Label0006
Addr : 102C:             64  : Variable Operation Local Offset - 1 Read
Addr : 102D:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 102F:             FC  : Math Op ==    
Addr : 1030: JZ Label0007
Addr : 1030:          0A 07  : jz Address = 1039 7
Addr : 1032:             36  : Constant 2 $00000001
Addr : 1033:       A9 93 8A  : Memory Op Word VBASE + WRITE Address = 138A
Addr : 1036: JMP Label0003
Addr : 1036:       04 80 6B  : Jmp 10A4 107  
Addr : 1039: Label0007
Addr : 1039:             64  : Variable Operation Local Offset - 1 Read
Addr : 103A:          38 15  : Constant 1 Bytes - 15 
Addr : 103C:             FC  : Math Op ==    
Addr : 103D: JZ Label0008
Addr : 103D:          0A 07  : jz Address = 1046 7
Addr : 103F:             35  : Constant 1 $00000000
Addr : 1040:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 1043: JMP Label0003
Addr : 1043:       04 80 5E  : Jmp 10A4 94   
Addr : 1046: Label0008
Addr : 1046:             64  : Variable Operation Local Offset - 1 Read
Addr : 1047:          38 16  : Constant 1 Bytes - 16 
Addr : 1049:             FC  : Math Op ==    
Addr : 104A: JZ Label0009
Addr : 104A:          0A 07  : jz Address = 1053 7
Addr : 104C:             35  : Constant 1 $00000000
Addr : 104D:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 1050: JMP Label0003
Addr : 1050:       04 80 51  : Jmp 10A4 81   
Addr : 1053: Label0009
Addr : 1053:             64  : Variable Operation Local Offset - 1 Read
Addr : 1054:          38 18  : Constant 1 Bytes - 18 
Addr : 1056:             FC  : Math Op ==    
Addr : 1057: JZ Label000A
Addr : 1057:          0A 07  : jz Address = 1060 7
Addr : 1059:             35  : Constant 1 $00000000
Addr : 105A:       A9 93 86  : Memory Op Word VBASE + WRITE Address = 1386
Addr : 105D: JMP Label0003
Addr : 105D:       04 80 44  : Jmp 10A4 68   
Addr : 1060: Label000A
Addr : 1060:             64  : Variable Operation Local Offset - 1 Read
Addr : 1061:          38 19  : Constant 1 Bytes - 19 
Addr : 1063:             FC  : Math Op ==    
Addr : 1064: JZ Label000B
Addr : 1064:          0A 06  : jz Address = 106C 6
Addr : 1066:             35  : Constant 1 $00000000
Addr : 1067:       A9 93 88  : Memory Op Word VBASE + WRITE Address = 1388
Addr : 106A: JMP Label0003
Addr : 106A:          04 38  : Jmp 10A4 56   
Addr : 106C: Label000B
Addr : 106C:             64  : Variable Operation Local Offset - 1 Read
Addr : 106D:          38 1B  : Constant 1 Bytes - 1B 
Addr : 106F:             FC  : Math Op ==    
Addr : 1070: JZ Label000C
Addr : 1070:          0A 06  : jz Address = 1078 6
Addr : 1072:             35  : Constant 1 $00000000
Addr : 1073:       A9 93 8A  : Memory Op Word VBASE + WRITE Address = 138A
Addr : 1076: JMP Label0003
Addr : 1076:          04 2C  : Jmp 10A4 44   
Addr : 1078: Label000C
Addr : 1078:             64  : Variable Operation Local Offset - 1 Read
Addr : 1079:          38 1E  : Constant 1 Bytes - 1E 
Addr : 107B:             FE  : Math Op =>    
Addr : 107C:             64  : Variable Operation Local Offset - 1 Read
Addr : 107D:          38 25  : Constant 1 Bytes - 25 
Addr : 107F:             FD  : Math Op =<    
Addr : 1080:             E8  : Math Op &     
Addr : 1081: JZ Label000D
Addr : 1081:          0A 0C  : jz Address = 108F 12
Addr : 1083:             64  : Variable Operation Local Offset - 1 Read
Addr : 1084:          38 1E  : Constant 1 Bytes - 1E 
Addr : 1086:             ED  : Math Op -     
Addr : 1087:       B4 80 84  : Memory Op Word PBASE + POP Index READ Address = 0084
Addr : 108A:       A9 93 8C  : Memory Op Word VBASE + WRITE Address = 138C
Addr : 108D: JMP Label0003
Addr : 108D:          04 15  : Jmp 10A4 21   
Addr : 108F: Label000D
Addr : 108F:             64  : Variable Operation Local Offset - 1 Read
Addr : 1090:          38 28  : Constant 1 Bytes - 28 
Addr : 1092:             FE  : Math Op =>    
Addr : 1093:             64  : Variable Operation Local Offset - 1 Read
Addr : 1094:          38 2F  : Constant 1 Bytes - 2F 
Addr : 1096:             FD  : Math Op =<    
Addr : 1097:             E8  : Math Op &     
Addr : 1098: JZ Label000E
Addr : 1098:          0A 0A  : jz Address = 10A4 10
Addr : 109A:             64  : Variable Operation Local Offset - 1 Read
Addr : 109B:          38 28  : Constant 1 Bytes - 28 
Addr : 109D:             ED  : Math Op -     
Addr : 109E:       B4 80 84  : Memory Op Word PBASE + POP Index READ Address = 0084
Addr : 10A1:       A9 93 8E  : Memory Op Word VBASE + WRITE Address = 138E
Addr : 10A4: Label000E
Addr : 10A4: Label0003
Addr : 10A4:       A8 93 8A  : Memory Op Word VBASE + READ Address = 138A
Addr : 10A7:             35  : Constant 1 $00000000
Addr : 10A8:             FC  : Math Op ==    
Addr : 10A9: JZ Label000F
Addr : 10A9:          0A 12  : jz Address = 10BD 18
Addr : 10AB:       A8 93 8C  : Memory Op Word VBASE + READ Address = 138C
Addr : 10AE:          37 02  : Constant Mask Y=2 00000008
Addr : 10B0:             E3  : Math Op <<    
Addr : 10B1:       A8 93 8E  : Memory Op Word VBASE + READ Address = 138E
Addr : 10B4:          38 0C  : Constant 1 Bytes - 0C 
Addr : 10B6:             E3  : Math Op <<    
Addr : 10B7:             EA  : Math Op |     
Addr : 10B8:       A9 93 82  : Memory Op Word VBASE + WRITE Address = 1382
Addr : 10BB: JMP Label0010
Addr : 10BB:          04 10  : Jmp 10CD 16   
Addr : 10BD: Label000F
Addr : 10BD:       A8 93 8C  : Memory Op Word VBASE + READ Address = 138C
Addr : 10C0:          38 0C  : Constant 1 Bytes - 0C 
Addr : 10C2:             E3  : Math Op <<    
Addr : 10C3:       A8 93 8E  : Memory Op Word VBASE + READ Address = 138E
Addr : 10C6:          37 02  : Constant Mask Y=2 00000008
Addr : 10C8:             E3  : Math Op <<    
Addr : 10C9:             EA  : Math Op |     
Addr : 10CA:       A9 93 82  : Memory Op Word VBASE + WRITE Address = 1382
Addr : 10CD: Label0011
Addr : 10CD: Label0010
Addr : 10CD:       A8 93 84  : Memory Op Word VBASE + READ Address = 1384
Addr : 10D0:          38 0B  : Constant 1 Bytes - 0B 
Addr : 10D2:             E3  : Math Op <<    
Addr : 10D3:       A8 93 86  : Memory Op Word VBASE + READ Address = 1386
Addr : 10D6:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 10D8:             E3  : Math Op <<    
Addr : 10D9:             EA  : Math Op |     
Addr : 10DA:       A8 93 88  : Memory Op Word VBASE + READ Address = 1388
Addr : 10DD:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 10DF:             E3  : Math Op <<    
Addr : 10E0:             EA  : Math Op |     
Addr : 10E1:    AA 93 82 4A  : Memory Op Word VBASE + ASSIGN Address = 1382 ByteMathop |
Addr : 10E5:             32  : Return        
|===========================================================================|
Spin Block clEOL with 1 Parameters and 1 Extra Stack Longs. Method 19
PRI clEOL(position) | count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - count
|===========================================================================|
Addr : 10E6:          38 50  : Constant 1 Bytes - 50 
Addr : 10E8:             64  : Variable Operation Local Offset - 1 Read
Addr : 10E9:          38 50  : Constant 1 Bytes - 50 
Addr : 10EB:             F7  : Math Op //    
Addr : 10EC:             ED  : Math Op -     
Addr : 10ED:             69  : Variable Operation Local Offset - 2 Write
Addr : 10EE:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 10F0:             64  : Variable Operation Local Offset - 1 Read
Addr : 10F1:          37 00  : Constant Mask Y=0 00000002
Addr : 10F3:             F4  : Math Op *     
Addr : 10F4:             EC  : Math Op +     
Addr : 10F5:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 10F8:          37 04  : Constant Mask Y=4 00000020
Addr : 10FA:             EA  : Math Op |     
Addr : 10FB:             68  : Variable Operation Local Offset - 2 Read
Addr : 10FC:             19  : WordFill(Start, Value, Count)
Addr : 10FD:             32  : Return        
|===========================================================================|
Spin Block clBOL with 1 Parameters and 1 Extra Stack Longs. Method 20
PRI clBOL(position) | count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - count
|===========================================================================|
Addr : 10FE:             64  : Variable Operation Local Offset - 1 Read
Addr : 10FF:          38 50  : Constant 1 Bytes - 50 
Addr : 1101:             F7  : Math Op //    
Addr : 1102:             69  : Variable Operation Local Offset - 2 Write
Addr : 1103:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 1105:             64  : Variable Operation Local Offset - 1 Read
Addr : 1106:             68  : Variable Operation Local Offset - 2 Read
Addr : 1107:             ED  : Math Op -     
Addr : 1108:          37 00  : Constant Mask Y=0 00000002
Addr : 110A:             F4  : Math Op *     
Addr : 110B:             EC  : Math Op +     
Addr : 110C:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 110F:          37 04  : Constant Mask Y=4 00000020
Addr : 1111:             EA  : Math Op |     
Addr : 1112:             68  : Variable Operation Local Offset - 2 Read
Addr : 1113:             19  : WordFill(Start, Value, Count)
Addr : 1114:             32  : Return        
|===========================================================================|
Spin Block delLine with 1 Parameters and 2 Extra Stack Longs. Method 21
PRI delLine(position) | src, count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - src
Local Variable  DBASE:000C - count
|===========================================================================|
Addr : 1115:             64  : Variable Operation Local Offset - 1 Read
Addr : 1116:          38 50  : Constant 1 Bytes - 50 
Addr : 1118:             F7  : Math Op //    
Addr : 1119:          66 4D  : Variable Operation Local Offset - 1 Assign WordMathop -
Addr : 111B:             64  : Variable Operation Local Offset - 1 Read
Addr : 111C:          38 50  : Constant 1 Bytes - 50 
Addr : 111E:             EC  : Math Op +     
Addr : 111F:             69  : Variable Operation Local Offset - 2 Write
Addr : 1120:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 1123:             68  : Variable Operation Local Offset - 2 Read
Addr : 1124:             ED  : Math Op -     
Addr : 1125:             6D  : Variable Operation Local Offset - 3 Write
Addr : 1126:             6C  : Variable Operation Local Offset - 3 Read
Addr : 1127:             35  : Constant 1 $00000000
Addr : 1128:             FA  : Math Op >     
Addr : 1129: JZ Label0002
Addr : 1129:          0A 10  : jz Address = 113B 16
Addr : 112B:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 112D:             64  : Variable Operation Local Offset - 1 Read
Addr : 112E:          37 00  : Constant Mask Y=0 00000002
Addr : 1130:             F4  : Math Op *     
Addr : 1131:             EC  : Math Op +     
Addr : 1132:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 1134:             68  : Variable Operation Local Offset - 2 Read
Addr : 1135:          37 00  : Constant Mask Y=0 00000002
Addr : 1137:             F4  : Math Op *     
Addr : 1138:             EC  : Math Op +     
Addr : 1139:             6C  : Variable Operation Local Offset - 3 Read
Addr : 113A:             1D  : WordMove(To, From, Count)
Addr : 113B: Label0002
Addr : 113B: Label0003
Addr : 113B:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 113D:       39 07 80  : Constant 2 Bytes - 07 80 
Addr : 1140:          37 00  : Constant Mask Y=0 00000002
Addr : 1142:             F4  : Math Op *     
Addr : 1143:             EC  : Math Op +     
Addr : 1144:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 1147:          37 04  : Constant Mask Y=4 00000020
Addr : 1149:             EA  : Math Op |     
Addr : 114A:          38 50  : Constant 1 Bytes - 50 
Addr : 114C:             19  : WordFill(Start, Value, Count)
Addr : 114D:             32  : Return        
|===========================================================================|
Spin Block clEOS with 1 Parameters and 0 Extra Stack Longs. Method 22
PRI clEOS(position)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
|===========================================================================|
Addr : 114E:             01  : Drop Anchor   
Addr : 114F:             64  : Variable Operation Local Offset - 1 Read
Addr : 1150:          05 13  : Call Sub 19   
Addr : 1152:          38 50  : Constant 1 Bytes - 50 
Addr : 1154:             64  : Variable Operation Local Offset - 1 Read
Addr : 1155:          38 50  : Constant 1 Bytes - 50 
Addr : 1157:             F7  : Math Op //    
Addr : 1158:             ED  : Math Op -     
Addr : 1159:          66 4C  : Variable Operation Local Offset - 1 Assign WordMathop +
Addr : 115B: Label0002
Addr : 115B:             64  : Variable Operation Local Offset - 1 Read
Addr : 115C:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 115F:             F9  : Math Op <     
Addr : 1160: JZ Label0004
Addr : 1160:          0A 18  : jz Address = 117A 24
Addr : 1162:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 1164:             64  : Variable Operation Local Offset - 1 Read
Addr : 1165:          37 00  : Constant Mask Y=0 00000002
Addr : 1167:             F4  : Math Op *     
Addr : 1168:             EC  : Math Op +     
Addr : 1169:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 116C:          37 04  : Constant Mask Y=4 00000020
Addr : 116E:             EA  : Math Op |     
Addr : 116F:          38 50  : Constant 1 Bytes - 50 
Addr : 1171:             19  : WordFill(Start, Value, Count)
Addr : 1172:          38 50  : Constant 1 Bytes - 50 
Addr : 1174:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 1178: Label0003
Addr : 1178: JMP Label0002
Addr : 1178:          04 61  : Jmp 115B -31  
Addr : 117A: Label0004
Addr : 117A:             32  : Return        
|===========================================================================|
Spin Block setCursorPos with 1 Parameters and 0 Extra Stack Longs. Method 23
PRI setCursorPos(position)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
|===========================================================================|
Addr : 117B:             64  : Variable Operation Local Offset - 1 Read
Addr : 117C:          38 50  : Constant 1 Bytes - 50 
Addr : 117E:             F7  : Math Op //    
Addr : 117F:             35  : Constant 1 $00000000
Addr : 1180:       99 93 90  : Memory Op Byte VBASE + POP Index WRITE Address = 1390
Addr : 1183:             64  : Variable Operation Local Offset - 1 Read
Addr : 1184:          38 50  : Constant 1 Bytes - 50 
Addr : 1186:             F6  : Math Op /     
Addr : 1187:             36  : Constant 2 $00000001
Addr : 1188:       99 93 90  : Memory Op Byte VBASE + POP Index WRITE Address = 1390
Addr : 118B:             32  : Return        
|===========================================================================|
Spin Block insLine with 1 Parameters and 2 Extra Stack Longs. Method 24
PRI insLine(position) | base, nxt

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - base
Local Variable  DBASE:000C - nxt
|===========================================================================|
Addr : 118C:             64  : Variable Operation Local Offset - 1 Read
Addr : 118D:             64  : Variable Operation Local Offset - 1 Read
Addr : 118E:          38 50  : Constant 1 Bytes - 50 
Addr : 1190:             F7  : Math Op //    
Addr : 1191:             ED  : Math Op -     
Addr : 1192:             69  : Variable Operation Local Offset - 2 Write
Addr : 1193:       39 07 80  : Constant 2 Bytes - 07 80 
Addr : 1196:             65  : Variable Operation Local Offset - 1 Write
Addr : 1197: Label0002
Addr : 1197:             64  : Variable Operation Local Offset - 1 Read
Addr : 1198:             68  : Variable Operation Local Offset - 2 Read
Addr : 1199:             FA  : Math Op >     
Addr : 119A: JZ Label0004
Addr : 119A:          0A 1A  : jz Address = 11B6 26
Addr : 119C:             64  : Variable Operation Local Offset - 1 Read
Addr : 119D:          38 50  : Constant 1 Bytes - 50 
Addr : 119F:             ED  : Math Op -     
Addr : 11A0:             6D  : Variable Operation Local Offset - 3 Write
Addr : 11A1:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 11A3:             64  : Variable Operation Local Offset - 1 Read
Addr : 11A4:          37 00  : Constant Mask Y=0 00000002
Addr : 11A6:             F4  : Math Op *     
Addr : 11A7:             EC  : Math Op +     
Addr : 11A8:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 11AA:             6C  : Variable Operation Local Offset - 3 Read
Addr : 11AB:          37 00  : Constant Mask Y=0 00000002
Addr : 11AD:             F4  : Math Op *     
Addr : 11AE:             EC  : Math Op +     
Addr : 11AF:          38 50  : Constant 1 Bytes - 50 
Addr : 11B1:             1D  : WordMove(To, From, Count)
Addr : 11B2:             6C  : Variable Operation Local Offset - 3 Read
Addr : 11B3:             65  : Variable Operation Local Offset - 1 Write
Addr : 11B4: Label0003
Addr : 11B4: JMP Label0002
Addr : 11B4:          04 61  : Jmp 1197 -31  
Addr : 11B6: Label0004
Addr : 11B6:             01  : Drop Anchor   
Addr : 11B7:             68  : Variable Operation Local Offset - 2 Read
Addr : 11B8:          05 13  : Call Sub 19   
Addr : 11BA:             32  : Return        
|===========================================================================|
Spin Block insChar with 1 Parameters and 1 Extra Stack Longs. Method 25
PRI insChar(position) | count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - count
|===========================================================================|
Addr : 11BB:          38 50  : Constant 1 Bytes - 50 
Addr : 11BD:             64  : Variable Operation Local Offset - 1 Read
Addr : 11BE:          38 50  : Constant 1 Bytes - 50 
Addr : 11C0:             F7  : Math Op //    
Addr : 11C1:             ED  : Math Op -     
Addr : 11C2:             36  : Constant 2 $00000001
Addr : 11C3:             ED  : Math Op -     
Addr : 11C4:             69  : Variable Operation Local Offset - 2 Write
Addr : 11C5:       AB 92 DC  : Memory Op Word VBASE + ADDRESS Address = 12DC
Addr : 11C8:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 11CA:             64  : Variable Operation Local Offset - 1 Read
Addr : 11CB:          37 00  : Constant Mask Y=0 00000002
Addr : 11CD:             F4  : Math Op *     
Addr : 11CE:             EC  : Math Op +     
Addr : 11CF:             68  : Variable Operation Local Offset - 2 Read
Addr : 11D0:             1D  : WordMove(To, From, Count)
Addr : 11D1:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 11D4:          37 04  : Constant Mask Y=4 00000020
Addr : 11D6:             EA  : Math Op |     
Addr : 11D7:             64  : Variable Operation Local Offset - 1 Read
Addr : 11D8:          B9 1C  : Memory Op Word VBASE + POP Index WRITE Address = 001C
Addr : 11DA:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 11DC:             64  : Variable Operation Local Offset - 1 Read
Addr : 11DD:             36  : Constant 2 $00000001
Addr : 11DE:             EC  : Math Op +     
Addr : 11DF:          37 00  : Constant Mask Y=0 00000002
Addr : 11E1:             F4  : Math Op *     
Addr : 11E2:             EC  : Math Op +     
Addr : 11E3:       AB 92 DC  : Memory Op Word VBASE + ADDRESS Address = 12DC
Addr : 11E6:             68  : Variable Operation Local Offset - 2 Read
Addr : 11E7:             1D  : WordMove(To, From, Count)
Addr : 11E8:             32  : Return        
|===========================================================================|
Spin Block delChar with 1 Parameters and 1 Extra Stack Longs. Method 26
PRI delChar(position) | count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - count
|===========================================================================|
Addr : 11E9:          38 50  : Constant 1 Bytes - 50 
Addr : 11EB:             64  : Variable Operation Local Offset - 1 Read
Addr : 11EC:          38 50  : Constant 1 Bytes - 50 
Addr : 11EE:             F7  : Math Op //    
Addr : 11EF:             ED  : Math Op -     
Addr : 11F0:             36  : Constant 2 $00000001
Addr : 11F1:             ED  : Math Op -     
Addr : 11F2:             69  : Variable Operation Local Offset - 2 Write
Addr : 11F3:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 11F5:             64  : Variable Operation Local Offset - 1 Read
Addr : 11F6:          37 00  : Constant Mask Y=0 00000002
Addr : 11F8:             F4  : Math Op *     
Addr : 11F9:             EC  : Math Op +     
Addr : 11FA:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 11FC:             64  : Variable Operation Local Offset - 1 Read
Addr : 11FD:             36  : Constant 2 $00000001
Addr : 11FE:             EC  : Math Op +     
Addr : 11FF:          37 00  : Constant Mask Y=0 00000002
Addr : 1201:             F4  : Math Op *     
Addr : 1202:             EC  : Math Op +     
Addr : 1203:             68  : Variable Operation Local Offset - 2 Read
Addr : 1204:             1D  : WordMove(To, From, Count)
Addr : 1205:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 1208:          37 04  : Constant Mask Y=4 00000020
Addr : 120A:             EA  : Math Op |     
Addr : 120B:             64  : Variable Operation Local Offset - 1 Read
Addr : 120C:             68  : Variable Operation Local Offset - 2 Read
Addr : 120D:             EC  : Math Op +     
Addr : 120E:          B9 1C  : Memory Op Word VBASE + POP Index WRITE Address = 001C
Addr : 1210:             32  : Return        
|===========================================================================|
Spin Block inRegion with 0 Parameters and 0 Extra Stack Longs. Method 27
PRI inRegion : answer

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 1211:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 1214:       A8 93 7E  : Memory Op Word VBASE + READ Address = 137E
Addr : 1217:             FE  : Math Op =>    
Addr : 1218:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 121B:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 121E:             F9  : Math Op <     
Addr : 121F:             F0  : Math Op AND   
Addr : 1220:             61  : Variable Operation Local Offset - 0 Write
Addr : 1221:             32  : Return        
|===========================================================================|
Spin Block scrollUp with 0 Parameters and 0 Extra Stack Longs. Method 28
PRI scrollUp

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 1222:             01  : Drop Anchor   
Addr : 1223:       A8 93 7E  : Memory Op Word VBASE + READ Address = 137E
Addr : 1226:          05 15  : Call Sub 21   
Addr : 1228:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 122B:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 122E:             F9  : Math Op <     
Addr : 122F: JZ Label0002
Addr : 122F:          0A 06  : jz Address = 1237 6
Addr : 1231:             01  : Drop Anchor   
Addr : 1232:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 1235:          05 18  : Call Sub 24   
Addr : 1237: Label0002
Addr : 1237: Label0003
Addr : 1237:             32  : Return        
|===========================================================================|
Spin Block scrollDown with 0 Parameters and 0 Extra Stack Longs. Method 29
PRI scrollDown

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 1238:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 123B:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 123E:             F9  : Math Op <     
Addr : 123F: JZ Label0002
Addr : 123F:          0A 06  : jz Address = 1247 6
Addr : 1241:             01  : Drop Anchor   
Addr : 1242:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 1245:          05 15  : Call Sub 21   
Addr : 1247: Label0002
Addr : 1247: Label0003
Addr : 1247:             01  : Drop Anchor   
Addr : 1248:       A8 93 7E  : Memory Op Word VBASE + READ Address = 137E
Addr : 124B:          05 18  : Call Sub 24   
Addr : 124D:             32  : Return        
|===========================================================================|
Spin Block ansi with 1 Parameters and 2 Extra Stack Longs. Method 30
PRI ansi(c) | x, defVal

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - c
Local Variable  DBASE:0008 - x
Local Variable  DBASE:000C - defVal
|===========================================================================|
Addr : 124E:             35  : Constant 1 $00000000
Addr : 124F:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 1252:             64  : Variable Operation Local Offset - 1 Read
Addr : 1253:          38 72  : Constant 1 Bytes - 72 
Addr : 1255:             FB  : Math Op <>    
Addr : 1256:             64  : Variable Operation Local Offset - 1 Read
Addr : 1257:          38 4A  : Constant 1 Bytes - 4A 
Addr : 1259:             FB  : Math Op <>    
Addr : 125A:             F0  : Math Op AND   
Addr : 125B:             64  : Variable Operation Local Offset - 1 Read
Addr : 125C:          38 6D  : Constant 1 Bytes - 6D 
Addr : 125E:             FB  : Math Op <>    
Addr : 125F:             F0  : Math Op AND   
Addr : 1260:             64  : Variable Operation Local Offset - 1 Read
Addr : 1261:          38 4B  : Constant 1 Bytes - 4B 
Addr : 1263:             FB  : Math Op <>    
Addr : 1264:             F0  : Math Op AND   
Addr : 1265: JZ Label0002
Addr : 1265:          0A 0E  : jz Address = 1275 14
Addr : 1267:             50  : Variable Operation Global Offset - 4 Read
Addr : 1268:             34  : Constant 0 $FFFFFFFF
Addr : 1269:             FC  : Math Op ==    
Addr : 126A: JZ Label0004
Addr : 126A:          0A 02  : jz Address = 126E 2
Addr : 126C:             36  : Constant 2 $00000001
Addr : 126D:             51  : Variable Operation Global Offset - 4 Write
Addr : 126E: Label0004
Addr : 126E: Label0005
Addr : 126E:             54  : Variable Operation Global Offset - 5 Read
Addr : 126F:             34  : Constant 0 $FFFFFFFF
Addr : 1270:             FC  : Math Op ==    
Addr : 1271: JZ Label0006
Addr : 1271:          0A 02  : jz Address = 1275 2
Addr : 1273:             36  : Constant 2 $00000001
Addr : 1274:             55  : Variable Operation Global Offset - 5 Write
Addr : 1275: Label0006
Addr : 1275: Label0007
Addr : 1275: Label0002
Addr : 1275: Label0003
Addr : 1275: Constant Address of Label0008
Addr : 1275:       39 09 8C  : Constant 2 Bytes - 09 8C 
Addr : 1278:             64  : Variable Operation Local Offset - 1 Read
Addr : 1279:          37 05  : Constant Mask Y=5 00000040
Addr : 127B: Case_Value Label0009
Addr : 127B:       0D 80 51  : Value Case Address = 12CF 81
Addr : 127E:          38 62  : Constant 1 Bytes - 62 
Addr : 1280: Case_Value Label000D
Addr : 1280:       0D 80 5B  : Value Case Address = 12DE 91
Addr : 1283:          38 64  : Constant 1 Bytes - 64 
Addr : 1285: Case_Value Label0011
Addr : 1285:       0D 80 65  : Value Case Address = 12ED 101
Addr : 1288:          38 6D  : Constant 1 Bytes - 6D 
Addr : 128A: Case_Value Label0014
Addr : 128A:       0D 80 7E  : Value Case Address = 130B 126
Addr : 128D:          38 72  : Constant 1 Bytes - 72 
Addr : 128F: Case_Value Label001A
Addr : 128F:       0D 80 92  : Value Case Address = 1324 146
Addr : 1292:          38 41  : Constant 1 Bytes - 41 
Addr : 1294: Case_Value Label0023
Addr : 1294:       0D 80 CD  : Value Case Address = 1364 205
Addr : 1297:          38 42  : Constant 1 Bytes - 42 
Addr : 1299: Case_Value Label0029
Addr : 1299:       0D 80 E5  : Value Case Address = 1381 229
Addr : 129C:          38 43  : Constant 1 Bytes - 43 
Addr : 129E: Case_Value Label002F
Addr : 129E:       0D 80 FF  : Value Case Address = 13A0 255
Addr : 12A1:          38 44  : Constant 1 Bytes - 44 
Addr : 12A3: Case_Value Label0035
Addr : 12A3:       0D 81 17  : Value Case Address = 13BD 279
Addr : 12A6:          38 47  : Constant 1 Bytes - 47 
Addr : 12A8: Case_Value Label003B
Addr : 12A8:       0D 81 2C  : Value Case Address = 13D7 300
Addr : 12AB:          38 48  : Constant 1 Bytes - 48 
Addr : 12AD: Case_Value Label003E
Addr : 12AD:       0D 81 46  : Value Case Address = 13F6 326
Addr : 12B0:          38 66  : Constant 1 Bytes - 66 
Addr : 12B2: Case_Value Label003E
Addr : 12B2:       0D 81 41  : Value Case Address = 13F6 321
Addr : 12B5:          38 4A  : Constant 1 Bytes - 4A 
Addr : 12B7: Case_Value Label0047
Addr : 12B7:       0D 81 74  : Value Case Address = 142E 372
Addr : 12BA:          38 4B  : Constant 1 Bytes - 4B 
Addr : 12BC: Case_Value Label0052
Addr : 12BC:       0D 81 C6  : Value Case Address = 1485 454
Addr : 12BF:          38 4C  : Constant 1 Bytes - 4C 
Addr : 12C1: Case_Value Label0057
Addr : 12C1:       0D 81 E9  : Value Case Address = 14AD 489
Addr : 12C4:          38 4D  : Constant 1 Bytes - 4D 
Addr : 12C6: Case_Value Label005F
Addr : 12C6:       0D 82 07  : Value Case Address = 14D0 519
Addr : 12C9:          38 50  : Constant 1 Bytes - 50 
Addr : 12CB: Case_Value Label0067
Addr : 12CB:       0D 82 25  : Value Case Address = 14F3 549
Addr : 12CE: CaseDone Label0067
Addr : 12CE:             0C  : Casedone      
Addr : 12CF: Label0009
Addr : 12CF: Label000A
Addr : 12CF:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 12D1:             35  : Constant 1 $00000000
Addr : 12D2:             FA  : Math Op >     
Addr : 12D3: JZ Label000C
Addr : 12D3:          0A 08  : jz Address = 12DD 8
Addr : 12D5:             01  : Drop Anchor   
Addr : 12D6:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 12D9:          05 19  : Call Sub 25   
Addr : 12DB: Label000B
Addr : 12DB: JMP Label000A
Addr : 12DB:          04 72  : Jmp 12CF -14  
Addr : 12DD: Label000C
Addr : 12DD: CaseDone Label0009
Addr : 12DD:             0C  : Casedone      
Addr : 12DE: Label000D
Addr : 12DE: Label000E
Addr : 12DE:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 12E0:             35  : Constant 1 $00000000
Addr : 12E1:             FA  : Math Op >     
Addr : 12E2: JZ Label0010
Addr : 12E2:          0A 08  : jz Address = 12EC 8
Addr : 12E4:             01  : Drop Anchor   
Addr : 12E5:       88 93 97  : Memory Op Byte VBASE + READ Address = 1397
Addr : 12E8:          05 11  : Call Sub 17   
Addr : 12EA: Label000F
Addr : 12EA: JMP Label000E
Addr : 12EA:          04 72  : Jmp 12DE -14  
Addr : 12EC: Label0010
Addr : 12EC: CaseDone Label000D
Addr : 12EC:             0C  : Casedone      
Addr : 12ED: Label0011
Addr : 12ED:             50  : Variable Operation Global Offset - 4 Read
Addr : 12EE:             36  : Constant 2 $00000001
Addr : 12EF:             F9  : Math Op <     
Addr : 12F0:             50  : Variable Operation Global Offset - 4 Read
Addr : 12F1:          38 1E  : Constant 1 Bytes - 1E 
Addr : 12F3:             FA  : Math Op >     
Addr : 12F4:             F2  : Math Op OR    
Addr : 12F5: JZ Label0012
Addr : 12F5:          0A 03  : jz Address = 12FA 3
Addr : 12F7:          38 1E  : Constant 1 Bytes - 1E 
Addr : 12F9:             51  : Variable Operation Global Offset - 4 Write
Addr : 12FA: Label0012
Addr : 12FA: Label0013
Addr : 12FA:             50  : Variable Operation Global Offset - 4 Read
Addr : 12FB:             36  : Constant 2 $00000001
Addr : 12FC:             ED  : Math Op -     
Addr : 12FD:          38 50  : Constant 1 Bytes - 50 
Addr : 12FF:             F4  : Math Op *     
Addr : 1300:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 1303:          38 50  : Constant 1 Bytes - 50 
Addr : 1305:             F7  : Math Op //    
Addr : 1306:             EC  : Math Op +     
Addr : 1307:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 130A: CaseDone Label0011
Addr : 130A:             0C  : Casedone      
Addr : 130B: Label0014
Addr : 130B:             50  : Variable Operation Global Offset - 4 Read
Addr : 130C:             34  : Constant 0 $FFFFFFFF
Addr : 130D:             FC  : Math Op ==    
Addr : 130E: JZ Label0015
Addr : 130E:          0A 06  : jz Address = 1316 6
Addr : 1310:             01  : Drop Anchor   
Addr : 1311:             35  : Constant 1 $00000000
Addr : 1312:          05 12  : Call Sub 18   
Addr : 1314: JMP Label0016
Addr : 1314:          04 0D  : Jmp 1323 13   
Addr : 1316: Label0015
Addr : 1316:             01  : Drop Anchor   
Addr : 1317:             50  : Variable Operation Global Offset - 4 Read
Addr : 1318:          05 12  : Call Sub 18   
Addr : 131A:             54  : Variable Operation Global Offset - 5 Read
Addr : 131B:             34  : Constant 0 $FFFFFFFF
Addr : 131C:             FB  : Math Op <>    
Addr : 131D: JZ Label0018
Addr : 131D:          0A 04  : jz Address = 1323 4
Addr : 131F:             01  : Drop Anchor   
Addr : 1320:             54  : Variable Operation Global Offset - 5 Read
Addr : 1321:          05 12  : Call Sub 18   
Addr : 1323: Label0018
Addr : 1323: Label0019
Addr : 1323: Label0017
Addr : 1323: Label0016
Addr : 1323: CaseDone Label0014
Addr : 1323:             0C  : Casedone      
Addr : 1324: Label001A
Addr : 1324:             50  : Variable Operation Global Offset - 4 Read
Addr : 1325:             36  : Constant 2 $00000001
Addr : 1326:             F9  : Math Op <     
Addr : 1327: JZ Label001B
Addr : 1327:          0A 04  : jz Address = 132D 4
Addr : 1329:             36  : Constant 2 $00000001
Addr : 132A:             51  : Variable Operation Global Offset - 4 Write
Addr : 132B: JMP Label001C
Addr : 132B:          04 09  : Jmp 1336 9    
Addr : 132D: Label001B
Addr : 132D:             50  : Variable Operation Global Offset - 4 Read
Addr : 132E:          38 50  : Constant 1 Bytes - 50 
Addr : 1330:             FA  : Math Op >     
Addr : 1331: JZ Label001D
Addr : 1331:          0A 03  : jz Address = 1336 3
Addr : 1333:          38 50  : Constant 1 Bytes - 50 
Addr : 1335:             51  : Variable Operation Global Offset - 4 Write
Addr : 1336: Label001D
Addr : 1336: Label001C
Addr : 1336:             54  : Variable Operation Global Offset - 5 Read
Addr : 1337:             36  : Constant 2 $00000001
Addr : 1338:             F9  : Math Op <     
Addr : 1339: JZ Label001E
Addr : 1339:          0A 04  : jz Address = 133F 4
Addr : 133B:             36  : Constant 2 $00000001
Addr : 133C:             55  : Variable Operation Global Offset - 5 Write
Addr : 133D: JMP Label001F
Addr : 133D:          04 09  : Jmp 1348 9    
Addr : 133F: Label001E
Addr : 133F:             54  : Variable Operation Global Offset - 5 Read
Addr : 1340:          38 50  : Constant 1 Bytes - 50 
Addr : 1342:             FA  : Math Op >     
Addr : 1343: JZ Label0020
Addr : 1343:          0A 03  : jz Address = 1348 3
Addr : 1345:          38 50  : Constant 1 Bytes - 50 
Addr : 1347:             55  : Variable Operation Global Offset - 5 Write
Addr : 1348: Label0020
Addr : 1348: Label001F
Addr : 1348:             54  : Variable Operation Global Offset - 5 Read
Addr : 1349:             50  : Variable Operation Global Offset - 4 Read
Addr : 134A:             F9  : Math Op <     
Addr : 134B: JZ Label0021
Addr : 134B:          0A 02  : jz Address = 134F 2
Addr : 134D:             50  : Variable Operation Global Offset - 4 Read
Addr : 134E:             55  : Variable Operation Global Offset - 5 Write
Addr : 134F: Label0021
Addr : 134F: Label0022
Addr : 134F:             50  : Variable Operation Global Offset - 4 Read
Addr : 1350:             36  : Constant 2 $00000001
Addr : 1351:             ED  : Math Op -     
Addr : 1352:          38 50  : Constant 1 Bytes - 50 
Addr : 1354:             F4  : Math Op *     
Addr : 1355:       A9 93 7E  : Memory Op Word VBASE + WRITE Address = 137E
Addr : 1358:             54  : Variable Operation Global Offset - 5 Read
Addr : 1359:          38 50  : Constant 1 Bytes - 50 
Addr : 135B:             F4  : Math Op *     
Addr : 135C:       A9 93 80  : Memory Op Word VBASE + WRITE Address = 1380
Addr : 135F:             35  : Constant 1 $00000000
Addr : 1360:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 1363: CaseDone Label001A
Addr : 1363:             0C  : Casedone      
Addr : 1364: Label0023
Addr : 1364: Label0024
Addr : 1364:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 1366:             35  : Constant 1 $00000000
Addr : 1367:             FA  : Math Op >     
Addr : 1368: JZ Label0026
Addr : 1368:          0A 16  : jz Address = 1380 22
Addr : 136A:          38 50  : Constant 1 Bytes - 50 
Addr : 136C:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 1370:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 1373:             35  : Constant 1 $00000000
Addr : 1374:             F9  : Math Op <     
Addr : 1375: JZ Label0027
Addr : 1375:          0A 07  : jz Address = 137E 7
Addr : 1377:          38 50  : Constant 1 Bytes - 50 
Addr : 1379:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 137D:             32  : Return        
Addr : 137E: Label0027
Addr : 137E: Label0028
Addr : 137E: Label0025
Addr : 137E: JMP Label0024
Addr : 137E:          04 64  : Jmp 1364 -28  
Addr : 1380: Label0026
Addr : 1380: CaseDone Label0023
Addr : 1380:             0C  : Casedone      
Addr : 1381: Label0029
Addr : 1381: Label002A
Addr : 1381:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 1383:             35  : Constant 1 $00000000
Addr : 1384:             FA  : Math Op >     
Addr : 1385: JZ Label002C
Addr : 1385:          0A 18  : jz Address = 139F 24
Addr : 1387:          38 50  : Constant 1 Bytes - 50 
Addr : 1389:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 138D:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 1390:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 1393:             FE  : Math Op =>    
Addr : 1394: JZ Label002D
Addr : 1394:          0A 07  : jz Address = 139D 7
Addr : 1396:          38 50  : Constant 1 Bytes - 50 
Addr : 1398:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 139C:             32  : Return        
Addr : 139D: Label002D
Addr : 139D: Label002E
Addr : 139D: Label002B
Addr : 139D: JMP Label002A
Addr : 139D:          04 62  : Jmp 1381 -30  
Addr : 139F: Label002C
Addr : 139F: CaseDone Label0029
Addr : 139F:             0C  : Casedone      
Addr : 13A0: Label002F
Addr : 13A0: Label0030
Addr : 13A0:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 13A2:             35  : Constant 1 $00000000
Addr : 13A3:             FA  : Math Op >     
Addr : 13A4: JZ Label0032
Addr : 13A4:          0A 16  : jz Address = 13BC 22
Addr : 13A6:             36  : Constant 2 $00000001
Addr : 13A7:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 13AB:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 13AE:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 13B1:             FE  : Math Op =>    
Addr : 13B2: JZ Label0033
Addr : 13B2:          0A 06  : jz Address = 13BA 6
Addr : 13B4:             36  : Constant 2 $00000001
Addr : 13B5:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 13B9:             32  : Return        
Addr : 13BA: Label0033
Addr : 13BA: Label0034
Addr : 13BA: Label0031
Addr : 13BA: JMP Label0030
Addr : 13BA:          04 64  : Jmp 13A0 -28  
Addr : 13BC: Label0032
Addr : 13BC: CaseDone Label002F
Addr : 13BC:             0C  : Casedone      
Addr : 13BD: Label0035
Addr : 13BD: Label0036
Addr : 13BD:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 13BF:             35  : Constant 1 $00000000
Addr : 13C0:             FA  : Math Op >     
Addr : 13C1: JZ Label0038
Addr : 13C1:          0A 13  : jz Address = 13D6 19
Addr : 13C3:             36  : Constant 2 $00000001
Addr : 13C4:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 13C8:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 13CB:             35  : Constant 1 $00000000
Addr : 13CC:             F9  : Math Op <     
Addr : 13CD: JZ Label0039
Addr : 13CD:          0A 05  : jz Address = 13D4 5
Addr : 13CF:             35  : Constant 1 $00000000
Addr : 13D0:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 13D3:             32  : Return        
Addr : 13D4: Label0039
Addr : 13D4: Label003A
Addr : 13D4: Label0037
Addr : 13D4: JMP Label0036
Addr : 13D4:          04 67  : Jmp 13BD -25  
Addr : 13D6: Label0038
Addr : 13D6: CaseDone Label0035
Addr : 13D6:             0C  : Casedone      
Addr : 13D7: Label003B
Addr : 13D7:             50  : Variable Operation Global Offset - 4 Read
Addr : 13D8:             36  : Constant 2 $00000001
Addr : 13D9:             F9  : Math Op <     
Addr : 13DA:             50  : Variable Operation Global Offset - 4 Read
Addr : 13DB:          38 50  : Constant 1 Bytes - 50 
Addr : 13DD:             FA  : Math Op >     
Addr : 13DE:             F2  : Math Op OR    
Addr : 13DF: JZ Label003C
Addr : 13DF:          0A 03  : jz Address = 13E4 3
Addr : 13E1:          38 50  : Constant 1 Bytes - 50 
Addr : 13E3:             51  : Variable Operation Global Offset - 4 Write
Addr : 13E4: Label003C
Addr : 13E4: Label003D
Addr : 13E4:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 13E7:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 13EA:          38 50  : Constant 1 Bytes - 50 
Addr : 13EC:             F7  : Math Op //    
Addr : 13ED:             ED  : Math Op -     
Addr : 13EE:             50  : Variable Operation Global Offset - 4 Read
Addr : 13EF:             36  : Constant 2 $00000001
Addr : 13F0:             ED  : Math Op -     
Addr : 13F1:             EC  : Math Op +     
Addr : 13F2:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 13F5: CaseDone Label003B
Addr : 13F5:             0C  : Casedone      
Addr : 13F6: Label003E
Addr : 13F6:             50  : Variable Operation Global Offset - 4 Read
Addr : 13F7:             35  : Constant 1 $00000000
Addr : 13F8:             FD  : Math Op =<    
Addr : 13F9: JZ Label003F
Addr : 13F9:          0A 02  : jz Address = 13FD 2
Addr : 13FB:             36  : Constant 2 $00000001
Addr : 13FC:             51  : Variable Operation Global Offset - 4 Write
Addr : 13FD: Label003F
Addr : 13FD: Label0040
Addr : 13FD:             54  : Variable Operation Global Offset - 5 Read
Addr : 13FE:             35  : Constant 1 $00000000
Addr : 13FF:             FD  : Math Op =<    
Addr : 1400: JZ Label0041
Addr : 1400:          0A 02  : jz Address = 1404 2
Addr : 1402:             36  : Constant 2 $00000001
Addr : 1403:             55  : Variable Operation Global Offset - 5 Write
Addr : 1404: Label0041
Addr : 1404: Label0042
Addr : 1404:          38 50  : Constant 1 Bytes - 50 
Addr : 1406:             50  : Variable Operation Global Offset - 4 Read
Addr : 1407:             36  : Constant 2 $00000001
Addr : 1408:             ED  : Math Op -     
Addr : 1409:             F4  : Math Op *     
Addr : 140A:             54  : Variable Operation Global Offset - 5 Read
Addr : 140B:             36  : Constant 2 $00000001
Addr : 140C:             ED  : Math Op -     
Addr : 140D:             EC  : Math Op +     
Addr : 140E:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 1411:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 1414:             35  : Constant 1 $00000000
Addr : 1415:             F9  : Math Op <     
Addr : 1416: JZ Label0043
Addr : 1416:          0A 04  : jz Address = 141C 4
Addr : 1418:             35  : Constant 1 $00000000
Addr : 1419:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 141C: Label0043
Addr : 141C: Label0044
Addr : 141C:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 141F:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 1422:             FE  : Math Op =>    
Addr : 1423: JZ Label0045
Addr : 1423:          0A 08  : jz Address = 142D 8
Addr : 1425:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 1428:             36  : Constant 2 $00000001
Addr : 1429:             ED  : Math Op -     
Addr : 142A:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 142D: Label0045
Addr : 142D: Label0046
Addr : 142D: CaseDone Label003E
Addr : 142D:             0C  : Casedone      
Addr : 142E: Label0047
Addr : 142E:             50  : Variable Operation Global Offset - 4 Read
Addr : 142F:             36  : Constant 2 $00000001
Addr : 1430:             FC  : Math Op ==    
Addr : 1431: JZ Label0048
Addr : 1431:          0A 23  : jz Address = 1456 35
Addr : 1433:             01  : Drop Anchor   
Addr : 1434:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 1437:          05 14  : Call Sub 20   
Addr : 1439:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 143C:          38 50  : Constant 1 Bytes - 50 
Addr : 143E:             ED  : Math Op -     
Addr : 143F:             69  : Variable Operation Local Offset - 2 Write
Addr : 1440:             68  : Variable Operation Local Offset - 2 Read
Addr : 1441:          38 50  : Constant 1 Bytes - 50 
Addr : 1443:             F7  : Math Op //    
Addr : 1444:          6A 4D  : Variable Operation Local Offset - 2 Assign WordMathop -
Addr : 1446: Label004A
Addr : 1446:             68  : Variable Operation Local Offset - 2 Read
Addr : 1447:             35  : Constant 1 $00000000
Addr : 1448:             FE  : Math Op =>    
Addr : 1449: JZ Label004C
Addr : 1449:          0A 0A  : jz Address = 1455 10
Addr : 144B:             01  : Drop Anchor   
Addr : 144C:             68  : Variable Operation Local Offset - 2 Read
Addr : 144D:          05 13  : Call Sub 19   
Addr : 144F:          38 50  : Constant 1 Bytes - 50 
Addr : 1451:          6A 4D  : Variable Operation Local Offset - 2 Assign WordMathop -
Addr : 1453: Label004B
Addr : 1453: JMP Label004A
Addr : 1453:          04 71  : Jmp 1446 -15  
Addr : 1455: Label004C
Addr : 1455:             32  : Return        
Addr : 1456: Label0048
Addr : 1456: Label0049
Addr : 1456:             50  : Variable Operation Global Offset - 4 Read
Addr : 1457:          37 00  : Constant Mask Y=0 00000002
Addr : 1459:             FC  : Math Op ==    
Addr : 145A: JZ Label004D
Addr : 145A:          0A 04  : jz Address = 1460 4
Addr : 145C:             35  : Constant 1 $00000000
Addr : 145D:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 1460: Label004D
Addr : 1460: Label004E
Addr : 1460:             01  : Drop Anchor   
Addr : 1461:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 1464:          05 13  : Call Sub 19   
Addr : 1466:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 1469:          38 50  : Constant 1 Bytes - 50 
Addr : 146B:             EC  : Math Op +     
Addr : 146C:             69  : Variable Operation Local Offset - 2 Write
Addr : 146D:             68  : Variable Operation Local Offset - 2 Read
Addr : 146E:          38 50  : Constant 1 Bytes - 50 
Addr : 1470:             F7  : Math Op //    
Addr : 1471:          6A 4D  : Variable Operation Local Offset - 2 Assign WordMathop -
Addr : 1473: Label004F
Addr : 1473:             68  : Variable Operation Local Offset - 2 Read
Addr : 1474:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 1477:             F9  : Math Op <     
Addr : 1478: JZ Label0051
Addr : 1478:          0A 0A  : jz Address = 1484 10
Addr : 147A:             01  : Drop Anchor   
Addr : 147B:             68  : Variable Operation Local Offset - 2 Read
Addr : 147C:          05 13  : Call Sub 19   
Addr : 147E:          38 50  : Constant 1 Bytes - 50 
Addr : 1480:          6A 4C  : Variable Operation Local Offset - 2 Assign WordMathop +
Addr : 1482: Label0050
Addr : 1482: JMP Label004F
Addr : 1482:          04 6F  : Jmp 1473 -17  
Addr : 1484: Label0051
Addr : 1484: CaseDone Label0047
Addr : 1484:             0C  : Casedone      
Addr : 1485: Label0052
Addr : 1485:             50  : Variable Operation Global Offset - 4 Read
Addr : 1486:             34  : Constant 0 $FFFFFFFF
Addr : 1487:             FC  : Math Op ==    
Addr : 1488: JZ Label0053
Addr : 1488:          0A 08  : jz Address = 1492 8
Addr : 148A:             01  : Drop Anchor   
Addr : 148B:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 148E:          05 13  : Call Sub 19   
Addr : 1490: JMP Label0054
Addr : 1490:          04 1A  : Jmp 14AC 26   
Addr : 1492: Label0053
Addr : 1492:             50  : Variable Operation Global Offset - 4 Read
Addr : 1493:             36  : Constant 2 $00000001
Addr : 1494:             FC  : Math Op ==    
Addr : 1495: JZ Label0055
Addr : 1495:          0A 08  : jz Address = 149F 8
Addr : 1497:             01  : Drop Anchor   
Addr : 1498:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 149B:          05 14  : Call Sub 20   
Addr : 149D: JMP Label0054
Addr : 149D:          04 0D  : Jmp 14AC 13   
Addr : 149F: Label0055
Addr : 149F:             01  : Drop Anchor   
Addr : 14A0:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 14A3:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 14A6:          38 50  : Constant 1 Bytes - 50 
Addr : 14A8:             F7  : Math Op //    
Addr : 14A9:             ED  : Math Op -     
Addr : 14AA:          05 13  : Call Sub 19   
Addr : 14AC: Label0056
Addr : 14AC: Label0054
Addr : 14AC: CaseDone Label0052
Addr : 14AC:             0C  : Casedone      
Addr : 14AD: Label0057
Addr : 14AD:             00  : Drop Anchor Push 
Addr : 14AE:          05 1B  : Call Sub 27   
Addr : 14B0: JZ Label0058
Addr : 14B0:          0A 1D  : jz Address = 14CF 29
Addr : 14B2: Label005A
Addr : 14B2:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 14B4:             35  : Constant 1 $00000000
Addr : 14B5:             FA  : Math Op >     
Addr : 14B6: JZ Label005C
Addr : 14B6:          0A 17  : jz Address = 14CF 23
Addr : 14B8:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 14BB:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 14BE:             F9  : Math Op <     
Addr : 14BF: JZ Label005D
Addr : 14BF:          0A 06  : jz Address = 14C7 6
Addr : 14C1:             01  : Drop Anchor   
Addr : 14C2:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 14C5:          05 15  : Call Sub 21   
Addr : 14C7: Label005D
Addr : 14C7: Label005E
Addr : 14C7:             01  : Drop Anchor   
Addr : 14C8:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 14CB:          05 18  : Call Sub 24   
Addr : 14CD: Label005B
Addr : 14CD: JMP Label005A
Addr : 14CD:          04 63  : Jmp 14B2 -29  
Addr : 14CF: Label005C
Addr : 14CF: Label0058
Addr : 14CF: Label0059
Addr : 14CF: CaseDone Label0057
Addr : 14CF:             0C  : Casedone      
Addr : 14D0: Label005F
Addr : 14D0:             00  : Drop Anchor Push 
Addr : 14D1:          05 1B  : Call Sub 27   
Addr : 14D3: JZ Label0060
Addr : 14D3:          0A 1D  : jz Address = 14F2 29
Addr : 14D5: Label0062
Addr : 14D5:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 14D7:             35  : Constant 1 $00000000
Addr : 14D8:             FA  : Math Op >     
Addr : 14D9: JZ Label0064
Addr : 14D9:          0A 17  : jz Address = 14F2 23
Addr : 14DB:             01  : Drop Anchor   
Addr : 14DC:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 14DF:          05 15  : Call Sub 21   
Addr : 14E1:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 14E4:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 14E7:             F9  : Math Op <     
Addr : 14E8: JZ Label0065
Addr : 14E8:          0A 06  : jz Address = 14F0 6
Addr : 14EA:             01  : Drop Anchor   
Addr : 14EB:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 14EE:          05 18  : Call Sub 24   
Addr : 14F0: Label0065
Addr : 14F0: Label0066
Addr : 14F0: Label0063
Addr : 14F0: JMP Label0062
Addr : 14F0:          04 63  : Jmp 14D5 -29  
Addr : 14F2: Label0064
Addr : 14F2: Label0060
Addr : 14F2: Label0061
Addr : 14F2: CaseDone Label005F
Addr : 14F2:             0C  : Casedone      
Addr : 14F3: Label0067
Addr : 14F3: Label0068
Addr : 14F3:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 14F5: JZ Label006A
Addr : 14F5:          0A 08  : jz Address = 14FF 8
Addr : 14F7:             01  : Drop Anchor   
Addr : 14F8:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 14FB:          05 1A  : Call Sub 26   
Addr : 14FD: Label0069
Addr : 14FD: JMP Label0068
Addr : 14FD:          04 74  : Jmp 14F3 -12  
Addr : 14FF: Label006A
Addr : 14FF: CaseDone Label0067
Addr : 14FF:             0C  : Casedone      
Addr : 1500: Label0008
Addr : 1500:             32  : Return        
|===========================================================================|
Object vgacolour
Object Base is 1504
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0008 Variable cog
|===========================================================================|
Object DAT Blocks
|===========================================================================|
1510(0000)             |                         org        0                                ' set origin to $000 for start of program
1510(0000) 00 02 00 00 | d0                        long        1 << 9                                ' d0 always resides here at $000, executes as NOP
1514(0001) D1 DE BF A0 | :move                        mov        $1EF, main_begin + main_size - 1
1518(0002) 18 02 BC 84 |                         sub        :move,d0s0                        ' (do reverse move to avoid overwrite)
151C(0003) 01 34 FC E4 |                         djnz        main_ctr,#:move
1520(0004) 1C 42 BD A0 | :waitvid                mov        scancode+0, i0                        ' org        scancode
1524(0005) 1D 44 BD A0 | :shr                        mov        scancode+1, i1                        ' waitvid colorbuff+0, scanbuff+0
1528(0006) 19 08 BC 80 |                         add        :waitvid, d1                        ' shr        scanbuff+0,#8
152C(0007) 19 0A BC 80 |                         add        :shr, d1                         ' waitvid colorbuff+1, scanbuff+1
1530(0008) 18 38 BC 80 |                         add        i0, d0s0                        ' shr        scanbuff+1,#8
1534(0009) 00 3A BC 80 |                         add        i1, d0                                ' ...
1538(000A) 04 36 FC E4 |                         djnz        scan_ctr, #:waitvid                ' waitvid colorbuff+cols-1, scanbuff+cols-1
153C(000B) 1E 80 BE A0 |                         mov        scancode+cols*2-1, i2                ' mov        vscl,#hf
1540(000C) 1F 82 BE A0 |                         mov        scancode+cols*2+0, i3                ' waitvid hvsync,#0
1544(000D) 20 84 BE A0 |                         mov        scancode+cols*2+1, i4                ' jmp        #scanret
1548(000E) 21 EC BF A0 |                         mov        dira, reg_dira                        ' set pin directions
154C(000F) 22 EE BF A0 |                         mov        dirb, reg_dirb
1550(0010) 18 F4 FF 58 |                         movi        frqa, #(pr / 5) << 2                ' set pixel rate
1554(0011) 23 FC BF A0 |                         mov        vcfg, reg_vcfg                        ' set video configuration
1558(0012) 01 FE FF A0 |                         mov        vscl, #1                         ' set video to reload on every pixel
155C(0013) A7 49 BC F8 |                         waitcnt sync_cnt, colormask                ' wait for start value in cnt, add ~1ms
1560(0014) 0E F0 FF 58 |                         movi        ctra, #%00001_110                ' COGs in sync! enable PLLs now - NCOs locked!
1564(0015) 00 48 FC F8 |                         waitcnt sync_cnt, #0                        ' wait ~1ms for PLLs to stabilize - PLLs locked!
1568(0016) 64 FE FF A0 |                         mov        vscl, #100                        ' insure initial WAITVIDs lock cleanly
156C(0017) 43 01 7C 5C |                         jmp        #vsync                                ' jump to vsync - WAITVIDs will now be locked!
1570(0018) 01 02 00 00 | d0s0                        long        1 << 9 + 1
1574(0019) 00 04 00 00 | d1                        long        1 << 10
1578(001A) AD 00 00 00 | main_ctr                long        main_size
157C(001B) 50 00 00 00 | scan_ctr                long        cols
1580(001C) 01 A2 3C FC | i0                        waitvid colorbuff+0, scanbuff+0
1584(001D) 08 02 FC 28 | i1                        shr        scanbuff+0, #8
1588(001E) 18 FE FF A0 | i2                        mov        vscl, #hf
158C(001F) 00 5A 7F FC | i3                        waitvid hvsync, #0
1590(0020) 85 01 7C 5C | i4                        jmp        #scanret
1594(0021) 00 00 00 00 | reg_dira                long        0                                ' set at runtime
1598(0022) 00 00 00 00 | reg_dirb                long        0                                ' set at runtime
159C(0023) 00 00 00 00 | reg_vcfg                long        0                                ' set at runtime
15A0(0024) 00 00 00 00 | sync_cnt                long        0                                ' set at runtime
15A4(0025)             |                         fit        scancode                        ' make sure initialization code and data fit
15A4(0025)             | There are 124 ($07C) Longs left in the cog
15A4(0025)             | main_begin                org        maincode                        ' main code follows (gets moved into maincode)
15A4(0143) 03 A0 FF A0 | vsync                        mov        x, #vs                                ' do vertical sync lines
15A8(0144) 94 3D FF 5C |                         call        #blank_vsync
15AC(0145) 11 A0 FF A0 | vb_lines                mov        x, #vb                                ' do vertical back porch lines (# set at runtime)
15B0(0146) 94 3D FF 5C |                         call        #blank_vsync
15B4(0147) 9F 9D BF A0 |                         mov        screen_ptr, screen_base                ' reset screen pointer to upper-left character
15B8(0148) 00 AA FF A0 |                         mov        row, #0                                ' reset row counter for cursor insertion
15BC(0149) 3C AC FF A0 |                         mov        fours, #rows * 4 / 2                ' set number of 4-line builds for whole screen
15C0(014A) A2 9F BF A0 | fourline                mov        font_ptr, font_part                ' get address of appropriate font section
15C4(014B) 0A 9E FF 2C |                         shl        font_ptr, #8+2
15C8(014C) A1 9F BF 80 |                         add        font_ptr, font_base
15CC(014D) 00 B6 FE 54 |                         movd        :pixa, #scanbuff-1                ' reset scanbuff address (pre-decremented)
15D0(014E) 50 CA FE 54 |                         movd        :cola, #colorbuff-1                ' reset colorbuff address (pre-decremented)
15D4(014F) 50 CC FE 54 |                         movd        :colb, #colorbuff-1
15D8(0150) 02 A2 FF A0 |                         mov        y, #2                                ' must build scanbuff in two sections because
15DC(0151) A5 FF BF A0 |                         mov        vscl, vscl_line2x                ' ..pixel counter is limited to twelve bits
15E0(0152) 00 56 7F FC | :halfrow                waitvid underscore, #0                        ' output lows to let other COG drive VGA pins
15E4(0153) 28 A0 FF A0 |                         mov        x, #cols/2                        ' ..for 2 scan lines, ready for half a row
15E8(0154) CE A5 BF 04 | :column                         rdword        z, screen_ptr                        ' get character and colors from screen memory
15EC(0155) D2 A9 BF A0 |                         mov        bg, z
15F0(0156) FF A4 FF 60 |                         and        z, #$ff                                ' mask character code
15F4(0157) 02 A4 FF 2C |                         shl        z, #2                                ' * 4
15F8(0158) CF A5 BF 80 |                         add        z, font_ptr                        ' add font section address to point to 8*4 pixels
15FC(0159) 00 B6 BE 80 |                         add        :pixa, d0                        ' increment scanbuff destination addresses
1600(015A) 02 9C FF 80 |                         add        screen_ptr, #2                        ' increment screen memory address
1604(015B) D2 03 BC 08 | :pixa                        rdlong        scanbuff, z                        ' read pixel long (8*4) into scanbuff
1608(015C) 0C A8 FF 20 |                         ror        bg, #12                                ' background color in bits 3..0
160C(015D) D4 A7 BF A0 |                         mov        fg, bg                                ' foreground color in bits 31..28
1610(015E) 1C A6 FF 28 |                         shr        fg, #28                                ' bits 3..0
1614(015F) BE A7 FF 80 |                         add        fg, #fg_clut                        ' + offset to foreground CLUT
1618(0160) D3 CB BE 50 |                         movs        :cola, fg
161C(0161) 00 CA BE 80 |                         add        :cola, d0
1620(0162) AE A9 FF 80 |                         add        bg, #bg_clut                        ' + offset to background CLUT
1624(0163) D4 CD BE 50 |                         movs        :colb, bg
1628(0164) 00 CC BE 80 |                         add        :colb, d0
162C(0165) 00 A2 BC A0 | :cola                        mov        colorbuff, 0-0
1630(0166) 00 A2 BC 68 | :colb                        or        colorbuff, 0-0
1634(0167) 54 A1 FF E4 |                         djnz        x, #:column                        ' another character in this half-row?
1638(0168) 52 A3 FF E4 |                         djnz        y, #:halfrow                        ' loop to do 2nd half-row, time for 2nd WAITVID
163C(0169) A0 9C FF 84 |                         sub        screen_ptr, #2*cols                ' back up to start of same row in screen memory
1640(016A) 02 A4 FF A0 |                         mov        z, #2                                ' ready for two cursors
1644(016B) A0 A1 BF 00 | :cursor                        rdbyte        x, cursor_base                        ' x in range?
1648(016C) 01 40 FF 80 |                         add        cursor_base, #1
164C(016D) 50 A0 7F 85 |                         cmp        x, #cols        wc
1650(016E) A0 A3 BF 00 |                         rdbyte        y, cursor_base                        ' y match?
1654(016F) 01 40 FF 80 |                         add        cursor_base, #1
1658(0170) D5 A3 3F 86 |                         cmp        y, row                wz
165C(0171) A0 A3 BF 00 |                         rdbyte        y, cursor_base                        ' get cursor mode
1660(0172) 01 40 FF 80 |                         add        cursor_base, #1
1664(0173) 80 01 5C 5C |         if_nc_or_nz        jmp        #:nocursor                        ' if cursor not in scanbuff, no cursor
1668(0174) 01 A0 FF 80 |                         add        x, #scanbuff                        ' cursor in scanbuff, set scanbuff address
166C(0175) D0 FF BE 54 |                         movd        :xor, x
1670(0176) 02 A2 7F 61 |                         test        y, #%010        wc                ' get mode bits into flags
1674(0177) 01 A2 7F 62 |                         test        y, #%001        wz
1678(0178) 80 01 48 5C |         if_nc_and_z        jmp        #:nocursor                        ' if cursor disabled, no cursor
167C(0179) F1 53 23 61 |         if_c_and_z        test        slowbit, cnt        wc                ' if blink mode, get blink state
1680(017A) F1 55 13 61 |         if_c_and_nz        test        fastbit, cnt        wc
1684(017B) 04 A2 7F 62 |                         test        y, #%100        wz                ' get box or underscore cursor piece
1688(017C) A8 A1 AB A0 |         if_z                mov        x, longmask
168C(017D) AB A1 97 A0 |         if_nz                mov        x, underscore
1690(017E) 03 44 57 86 |         if_nz                cmp        font_part, #3        wz                ' if underscore, must be last font section
1694(017F) D0 03 88 6C | :xor        if_nc_and_z        xor        scanbuff, x                        ' conditionally xor cursor into scanbuff
1698(0180) 6B A5 FF E4 | :nocursor                djnz        z, #:cursor                        ' second cursor?
169C(0181) 06 40 FF 84 |                         sub        cursor_base, #3*2                ' restore cursor base
16A0(0182) 04 A2 FF A0 |                         mov        y, #4                                ' ready for four scan lines
16A4(0183) A6 FF BF A0 | scanline                mov        vscl, vscl_chr                        ' set pixel rate for characters
16A8(0184) A1 00 7C 5C |                         jmp        #scancode                        ' jump to scanbuff display routine in scancode
16AC(0185) 28 FE FF A0 | scanret                         mov        vscl, #hs                        ' do horizontal sync pixels
16B0(0186) 01 5A 7F FC |                         waitvid hvsync, #1                        ' #1 makes hsync active
16B4(0187) 80 FE FF A0 |                         mov        vscl, #hb                        ' do horizontal back porch pixels
16B8(0188) 00 5A 7F FC |                         waitvid hvsync, #0                        ' #0 makes hsync inactive
16BC(0189) 08 A0 FC 28 |                         shr        scanbuff+cols-1, #8                ' shift last column's pixels right by 8
16C0(018A) 83 A3 FF E4 |                         djnz        y, #scanline                        ' another scan line?
16C4(018B) 02 44 FF 80 |                         add        font_part, #2                        ' if font_part + 2 => 4, subtract 4 (new row)
16C8(018C) 04 44 FF E1 |                         cmpsub        font_part, #4                wc        ' c=0 for same row, c=1 for new row
16CC(018D) A0 9C F3 80 |         if_c                add        screen_ptr, #2*cols                ' if new row, advance screen pointer
16D0(018E) 01 AA F3 80 |         if_c                add        row, #1                                ' if new row, increment row counter
16D4(018F) 4A AD FF E4 |                         djnz        fours, #fourline                 ' another 4-line build/display?
16D8(0190) F0 51 3F 08 |                         wrlong        longmask,par                        ' write -1 to refresh indicator
16DC(0191) 14 A0 FF A0 | vf_lines                mov        x,#vf                                ' do vertical front porch lines (# set at runtime)
16E0(0192) 95 3D FF 5C |                         call        #blank
16E4(0193) 43 01 7C 5C |                         jmp        #vsync                                ' new field, loop to vsync
16E8(0194) 01 5B FF 6C | blank_vsync                xor        hvsync,#$101                        ' flip vertical sync bits
16EC(0195) A3 FF BF A0 | blank                        mov        vscl, hx                         ' do blank pixels
16F0(0196) 00 5A 7F FC |                         waitvid hvsync, #0
16F4(0197) 18 FE FF A0 |                         mov        vscl, #hf                        ' do horizontal front porch pixels
16F8(0198) 00 5A 7F FC |                         waitvid hvsync, #0
16FC(0199) 28 FE FF A0 |                         mov        vscl, #hs                        ' do horizontal sync pixels
1700(019A) 01 5A 7F FC |                         waitvid hvsync, #1
1704(019B) 80 FE FF A0 |                         mov        vscl, #hb                        ' do horizontal back porch pixels
1708(019C) 00 5A 7F FC |                         waitvid hvsync, #0
170C(019D) 95 A1 FF E4 |                         djnz        x,#blank                        ' another line?
1710(019E)             | blank_ret
1710(019E)             | blank_vsync_ret
1710(019E) 00 00 7C 5C |                         ret
1714(019F) 00 00 00 00 | screen_base                long        0                                ' set at runtime (3 contiguous longs)
1718(01A0) 00 00 00 00 | cursor_base                long        0                                ' set at runtime
171C(01A1) 00 00 00 00 | font_base                long        0                                ' set at runtime
1720(01A2) 00 00 00 00 | font_part                long        0                                ' set at runtime
1724(01A3) 80 02 00 00 | hx                        long        hp                                ' visible pixels per scan line
1728(01A4) 40 03 00 00 | vscl_line                long        hp + hf + hs + hb                ' total number of pixels per scan line
172C(01A5) 80 06 00 00 | vscl_line2x                long        (hp + hf + hs + hb) * 2         ' total number of pixels per 2 scan lines
1730(01A6) 08 10 00 00 | vscl_chr                long        1 << 12 + 8                        ' 1 clock per pixel and 8 pixels per set
1734(01A7) FC FC 00 00 | colormask                long        $FCFC                                ' mask to isolate R,G,B bits from H,V
1738(01A8) FF FF FF FF | longmask                long        $FFFFFFFF                        ' all bits set
173C(01A9) 00 00 00 02 | slowbit                        long        1 << 25                                ' cnt mask for slow cursor blink
1740(01AA) 00 00 00 01 | fastbit                        long        1 << 24                                ' cnt mask for fast cursor blink
1744(01AB) 00 00 FF FF | underscore                long        $FFFF0000                        ' underscore cursor pattern
1748(01AC) 03 03 00 00 | hv                        long        hv_inactive                        ' -H,-V states
174C(01AD) 03 01 00 00 | hvsync                        long        hv_inactive ^ $200                ' +/-H,-V states
1750(01AE) 03 03 00 00 | bg_clut                        long        %00000011_00000011                ' black
1754(01AF) 0B 03 00 00 |                         long        %00000011_00001011                ' dark blue
1758(01B0) 23 03 00 00 |                         long        %00000011_00100011                ' dark green
175C(01B1) 2B 03 00 00 |                         long        %00000011_00101011                ' dark cyan
1760(01B2) 83 03 00 00 |                         long        %00000011_10000011                ' dark red
1764(01B3) 8B 03 00 00 |                         long        %00000011_10001011                ' dark magenta
1768(01B4) A3 03 00 00 |                         long        %00000011_10100011                ' brown
176C(01B5) AB 03 00 00 |                         long        %00000011_10101011                ' light gray
1770(01B6) 57 03 00 00 |                         long        %00000011_01010111                ' dark gray
1774(01B7) 0F 03 00 00 |                         long        %00000011_00001111                ' light blue
1778(01B8) 33 03 00 00 |                         long        %00000011_00110011                ' light green
177C(01B9) 3F 03 00 00 |                         long        %00000011_00111111                ' light cyan
1780(01BA) C3 03 00 00 |                         long        %00000011_11000011                ' light red
1784(01BB) CF 03 00 00 |                         long        %00000011_11001111                ' light magenta
1788(01BC) F3 03 00 00 |                         long        %00000011_11110011                ' light yellow
178C(01BD) FF 03 00 00 |                         long        %00000011_11111111                ' white
1790(01BE) 03 03 00 00 | fg_clut                        long        %00000011_00000011                ' black
1794(01BF) 03 07 00 00 |                         long        %00000111_00000011                ' dark blue
1798(01C0) 03 13 00 00 |                         long        %00010011_00000011                ' dark green
179C(01C1) 03 17 00 00 |                         long        %00010111_00000011                ' dark cyan
17A0(01C2) 03 43 00 00 |                         long        %01000011_00000011                ' dark red
17A4(01C3) 03 47 00 00 |                         long        %01000111_00000011                ' dark magenta
17A8(01C4) 03 53 00 00 |                         long        %01010011_00000011                ' brown
17AC(01C5) 03 AB 00 00 |                         long        %10101011_00000011                ' light gray
17B0(01C6) 03 57 00 00 |                         long        %01010111_00000011                ' dark gray
17B4(01C7) 03 0B 00 00 |                         long        %00001011_00000011                ' blue
17B8(01C8) 03 23 00 00 |                         long        %00100011_00000011                ' green
17BC(01C9) 03 2B 00 00 |                         long        %00101011_00000011                ' cyan
17C0(01CA) 03 83 00 00 |                         long        %10000011_00000011                ' red
17C4(01CB) 03 8B 00 00 |                         long        %10001011_00000011                ' magenta
17C8(01CC) 03 A3 00 00 |                         long        %10100011_00000011                ' yellow
17CC(01CD) 03 FF 00 00 |                         long        %11111111_00000011                ' white
17D0(01CE)             | screen_ptr                res        1
17D0(01CF)             | font_ptr                res        1
17D0(01D0)             | x                        res        1
17D0(01D1)             | y                        res        1
17D0(01D2)             | z                        res        1
17D0(01D3)             | fg                        res        1
17D0(01D4)             | bg                        res        1
17D0(01D5)             | row                        res        1
17D0(01D6)             | fours                        res        1
17D0(01D7)             |                         fit        $1f0
17D0(01D7)             | There are 25 ($019) Longs left in the cog
17D0(01D7) 00 00 00 00 | font        long
17D0(01D7) 00 BA 82 00 |   long $0082ba00,$00000000,$2a552a00,$36360000,$061e0000,$061c0000,$06060000,$3c000000
17D4(01D8) 00 00 00 00 | 
17D8(01D9) 00 2A 55 2A | 
17DC(01DA) 00 00 36 36 | 
17E0(01DB) 00 00 1E 06 | 
17E4(01DC) 00 00 1C 06 | 
17E8(01DD) 00 00 06 06 | 
17EC(01DE) 00 00 00 3C | 
17F0(01DF) 00 00 00 00 |   long $00000000,$6e660000,$66660000,$18181818,$00000000,$00000000,$18181818,$18181818
17F4(01E0) 00 00 66 6E | 
17F8(01E1) 00 00 66 66 | 
17FC(01E2) 18 18 18 18 | 
1800(01E3) 00 00 00 00 | 
1804(01E4) 00 00 00 00 | 
1808(01E5) 18 18 18 18 | 
180C(01E6) 18 18 18 18 | 
1810(01E7) FF FF 00 00 |   long $0000ffff,$00000000,$00000000,$00000000,$00000000,$18181818,$18181818,$18181818
1814(01E8) 00 00 00 00 | 
1818(01E9) 00 00 00 00 | 
181C(01EA) 00 00 00 00 | 
1820(01EB) 00 00 00 00 | 
1824(01EC) 18 18 18 18 | 
1828(01ED) 18 18 18 18 | 
182C(01EE) 18 18 18 18 | 
1830(01EF) 00 00 00 00 |   long $00000000,$18181818,$60000000,$06000000,$00000000,$00000000,$38000000,$00000000
1834(01F0) 18 18 18 18 | 
1838(01F1) 00 00 00 60 | 
183C(01F2) 00 00 00 06 | 
1840(01F3) 00 00 00 00 | 
1844(01F4) 00 00 00 00 | 
1848(01F5) 00 00 00 38 | 
184C(01F6) 00 00 00 00 | 
1850(01F7) 00 00 00 00 |   long $00000000,$18000000,$36000000,$24000000,$18000000,$4e000000,$1c000000,$18000000
1854(01F8) 00 00 00 18 | 
1858(01F9) 00 00 00 36 | 
185C(01FA) 00 00 00 24 | 
1860(01FB) 00 00 00 18 | 
1864(01FC) 00 00 00 4E | 
1868(01FD) 00 00 00 1C | 
186C(01FE) 00 00 00 18 | 
1870(01FF) 00 00 00 30 |   long $30000000,$0c000000,$00000000,$00000000,$00000000,$00000000,$00000000,$60000000
1874(0200) 00 00 00 0C | 
1878(0201) 00 00 00 00 | 
187C(0202) 00 00 00 00 | 
1880(0203) 00 00 00 00 | 
1884(0204) 00 00 00 00 | 
1888(0205) 00 00 00 00 | 
188C(0206) 00 00 00 60 | 
1890(0207) 00 00 00 18 |   long $18000000,$18000000,$3c000000,$7e000000,$60000000,$7e000000,$3c000000,$7e000000
1894(0208) 00 00 00 18 | 
1898(0209) 00 00 00 3C | 
189C(020A) 00 00 00 7E | 
18A0(020B) 00 00 00 60 | 
18A4(020C) 00 00 00 7E | 
18A8(020D) 00 00 00 3C | 
18AC(020E) 00 00 00 7E | 
18B0(020F) 00 00 00 3C |   long $3c000000,$3c000000,$00000000,$00000000,$60000000,$00000000,$06000000,$3c000000
18B4(0210) 00 00 00 3C | 
18B8(0211) 00 00 00 00 | 
18BC(0212) 00 00 00 00 | 
18C0(0213) 00 00 00 60 | 
18C4(0214) 00 00 00 00 | 
18C8(0215) 00 00 00 06 | 
18CC(0216) 00 00 00 3C | 
18D0(0217) 00 00 00 3C |   long $3c000000,$3c000000,$3e000000,$3c000000,$3e000000,$7e000000,$7e000000,$3c000000
18D4(0218) 00 00 00 3C | 
18D8(0219) 00 00 00 3E | 
18DC(021A) 00 00 00 3C | 
18E0(021B) 00 00 00 3E | 
18E4(021C) 00 00 00 7E | 
18E8(021D) 00 00 00 7E | 
18EC(021E) 00 00 00 3C | 
18F0(021F) 00 00 00 66 |   long $66000000,$7e000000,$60000000,$46000000,$06000000,$42000000,$66000000,$3c000000
18F4(0220) 00 00 00 7E | 
18F8(0221) 00 00 00 60 | 
18FC(0222) 00 00 00 46 | 
1900(0223) 00 00 00 06 | 
1904(0224) 00 00 00 42 | 
1908(0225) 00 00 00 66 | 
190C(0226) 00 00 00 3C | 
1910(0227) 00 00 00 3E |   long $3e000000,$3c000000,$3e000000,$3c000000,$7e000000,$66000000,$66000000,$66000000
1914(0228) 00 00 00 3C | 
1918(0229) 00 00 00 3E | 
191C(022A) 00 00 00 3C | 
1920(022B) 00 00 00 7E | 
1924(022C) 00 00 00 66 | 
1928(022D) 00 00 00 66 | 
192C(022E) 00 00 00 66 | 
1930(022F) 00 00 00 42 |   long $42000000,$66000000,$7e000000,$3c000000,$06000000,$3c000000,$18000000,$00000000
1934(0230) 00 00 00 66 | 
1938(0231) 00 00 00 7E | 
193C(0232) 00 00 00 3C | 
1940(0233) 00 00 00 06 | 
1944(0234) 00 00 00 3C | 
1948(0235) 00 00 00 18 | 
194C(0236) 00 00 00 00 | 
1950(0237) 00 00 0C 18 |   long $180c0000,$00000000,$06000000,$00000000,$60000000,$00000000,$38000000,$00000000
1954(0238) 00 00 00 00 | 
1958(0239) 00 00 00 06 | 
195C(023A) 00 00 00 00 | 
1960(023B) 00 00 00 60 | 
1964(023C) 00 00 00 00 | 
1968(023D) 00 00 00 38 | 
196C(023E) 00 00 00 00 | 
1970(023F) 00 00 00 06 |   long $06000000,$18000000,$60000000,$06000000,$1c000000,$00000000,$00000000,$00000000
1974(0240) 00 00 00 18 | 
1978(0241) 00 00 00 60 | 
197C(0242) 00 00 00 06 | 
1980(0243) 00 00 00 1C | 
1984(0244) 00 00 00 00 | 
1988(0245) 00 00 00 00 | 
198C(0246) 00 00 00 00 | 
1990(0247) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1994(0248) 00 00 00 00 | 
1998(0249) 00 00 00 00 | 
199C(024A) 00 00 00 00 | 
19A0(024B) 00 00 00 00 | 
19A4(024C) 00 00 00 00 | 
19A8(024D) 00 00 00 00 | 
19AC(024E) 00 00 00 00 | 
19B0(024F) 00 00 00 00 |   long $00000000,$00000000,$00000000,$38000000,$18000000,$1c000000,$4c000000,$aa55aa55
19B4(0250) 00 00 00 00 | 
19B8(0251) 00 00 00 00 | 
19BC(0252) 00 00 00 38 | 
19C0(0253) 00 00 00 18 | 
19C4(0254) 00 00 00 1C | 
19C8(0255) 00 00 00 4C | 
19CC(0256) 55 AA 55 AA | 
19D0(0257) 00 00 00 00 |   long $00000000,$00000000,$2a552a00,$36360000,$061e0000,$061c0000,$06060000,$3c000000
19D4(0258) 00 00 00 00 | 
19D8(0259) 00 2A 55 2A | 
19DC(025A) 00 00 36 36 | 
19E0(025B) 00 00 1E 06 | 
19E4(025C) 00 00 1C 06 | 
19E8(025D) 00 00 06 06 | 
19EC(025E) 00 00 00 3C | 
19F0(025F) 00 00 00 00 |   long $00000000,$6e660000,$66660000,$24242424,$00000000,$00000000,$24242424,$24242424
19F4(0260) 00 00 66 6E | 
19F8(0261) 00 00 66 66 | 
19FC(0262) 24 24 24 24 | 
1A00(0263) 00 00 00 00 | 
1A04(0264) 00 00 00 00 | 
1A08(0265) 24 24 24 24 | 
1A0C(0266) 24 24 24 24 | 
1A10(0267) FF 00 FF 00 |   long $00ff00ff,$ff000000,$00000000,$00000000,$00000000,$24242424,$24242424,$24242424
1A14(0268) 00 00 00 FF | 
1A18(0269) 00 00 00 00 | 
1A1C(026A) 00 00 00 00 | 
1A20(026B) 00 00 00 00 | 
1A24(026C) 24 24 24 24 | 
1A28(026D) 24 24 24 24 | 
1A2C(026E) 24 24 24 24 | 
1A30(026F) 00 00 00 00 |   long $00000000,$24242424,$60000000,$06000000,$00000000,$00000000,$38000000,$00000000
1A34(0270) 24 24 24 24 | 
1A38(0271) 00 00 00 60 | 
1A3C(0272) 00 00 00 06 | 
1A40(0273) 00 00 00 00 | 
1A44(0274) 00 00 00 00 | 
1A48(0275) 00 00 00 38 | 
1A4C(0276) 00 00 00 00 | 
1A50(0277) 00 00 00 00 |   long $00000000,$18000000,$36000000,$24000000,$18000000,$4e000000,$1c000000,$18000000
1A54(0278) 00 00 00 18 | 
1A58(0279) 00 00 00 36 | 
1A5C(027A) 00 00 00 24 | 
1A60(027B) 00 00 00 18 | 
1A64(027C) 00 00 00 4E | 
1A68(027D) 00 00 00 1C | 
1A6C(027E) 00 00 00 18 | 
1A70(027F) 00 00 00 30 |   long $30000000,$0c000000,$00000000,$00000000,$00000000,$00000000,$00000000,$60000000
1A74(0280) 00 00 00 0C | 
1A78(0281) 00 00 00 00 | 
1A7C(0282) 00 00 00 00 | 
1A80(0283) 00 00 00 00 | 
1A84(0284) 00 00 00 00 | 
1A88(0285) 00 00 00 00 | 
1A8C(0286) 00 00 00 60 | 
1A90(0287) 00 00 00 18 |   long $18000000,$18000000,$3c000000,$7e000000,$60000000,$7e000000,$3c000000,$7e000000
1A94(0288) 00 00 00 18 | 
1A98(0289) 00 00 00 3C | 
1A9C(028A) 00 00 00 7E | 
1AA0(028B) 00 00 00 60 | 
1AA4(028C) 00 00 00 7E | 
1AA8(028D) 00 00 00 3C | 
1AAC(028E) 00 00 00 7E | 
1AB0(028F) 00 00 00 3C |   long $3c000000,$3c000000,$00000000,$00000000,$60000000,$00000000,$06000000,$3c000000
1AB4(0290) 00 00 00 3C | 
1AB8(0291) 00 00 00 00 | 
1ABC(0292) 00 00 00 00 | 
1AC0(0293) 00 00 00 60 | 
1AC4(0294) 00 00 00 00 | 
1AC8(0295) 00 00 00 06 | 
1ACC(0296) 00 00 00 3C | 
1AD0(0297) 00 00 00 3C |   long $3c000000,$3c000000,$3e000000,$3c000000,$3e000000,$7e000000,$7e000000,$3c000000
1AD4(0298) 00 00 00 3C | 
1AD8(0299) 00 00 00 3E | 
1ADC(029A) 00 00 00 3C | 
1AE0(029B) 00 00 00 3E | 
1AE4(029C) 00 00 00 7E | 
1AE8(029D) 00 00 00 7E | 
1AEC(029E) 00 00 00 3C | 
1AF0(029F) 00 00 00 66 |   long $66000000,$7e000000,$60000000,$46000000,$06000000,$42000000,$66000000,$3c000000
1AF4(02A0) 00 00 00 7E | 
1AF8(02A1) 00 00 00 60 | 
1AFC(02A2) 00 00 00 46 | 
1B00(02A3) 00 00 00 06 | 
1B04(02A4) 00 00 00 42 | 
1B08(02A5) 00 00 00 66 | 
1B0C(02A6) 00 00 00 3C | 
1B10(02A7) 00 00 00 3E |   long $3e000000,$3c000000,$3e000000,$3c000000,$7e000000,$66000000,$66000000,$66000000
1B14(02A8) 00 00 00 3C | 
1B18(02A9) 00 00 00 3E | 
1B1C(02AA) 00 00 00 3C | 
1B20(02AB) 00 00 00 7E | 
1B24(02AC) 00 00 00 66 | 
1B28(02AD) 00 00 00 66 | 
1B2C(02AE) 00 00 00 66 | 
1B30(02AF) 00 00 00 42 |   long $42000000,$66000000,$7e000000,$3c000000,$06000000,$3c000000,$18000000,$00000000
1B34(02B0) 00 00 00 66 | 
1B38(02B1) 00 00 00 7E | 
1B3C(02B2) 00 00 00 3C | 
1B40(02B3) 00 00 00 06 | 
1B44(02B4) 00 00 00 3C | 
1B48(02B5) 00 00 00 18 | 
1B4C(02B6) 00 00 00 00 | 
1B50(02B7) 00 00 0C 18 |   long $180c0000,$00000000,$06000000,$00000000,$60000000,$00000000,$38000000,$00000000
1B54(02B8) 00 00 00 00 | 
1B58(02B9) 00 00 00 06 | 
1B5C(02BA) 00 00 00 00 | 
1B60(02BB) 00 00 00 60 | 
1B64(02BC) 00 00 00 00 | 
1B68(02BD) 00 00 00 38 | 
1B6C(02BE) 00 00 00 00 | 
1B70(02BF) 00 00 00 06 |   long $06000000,$18000000,$60000000,$06000000,$1c000000,$00000000,$00000000,$00000000
1B74(02C0) 00 00 00 18 | 
1B78(02C1) 00 00 00 60 | 
1B7C(02C2) 00 00 00 06 | 
1B80(02C3) 00 00 00 1C | 
1B84(02C4) 00 00 00 00 | 
1B88(02C5) 00 00 00 00 | 
1B8C(02C6) 00 00 00 00 | 
1B90(02C7) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1B94(02C8) 00 00 00 00 | 
1B98(02C9) 00 00 00 00 | 
1B9C(02CA) 00 00 00 00 | 
1BA0(02CB) 00 00 00 00 | 
1BA4(02CC) 00 00 00 00 | 
1BA8(02CD) 00 00 00 00 | 
1BAC(02CE) 00 00 00 00 | 
1BB0(02CF) 00 00 00 00 |   long $00000000,$00000000,$00000000,$38000000,$18000000,$1c000000,$4c000000,$aa55aa55
1BB4(02D0) 00 00 00 00 | 
1BB8(02D1) 00 00 00 00 | 
1BBC(02D2) 00 00 00 38 | 
1BC0(02D3) 00 00 00 18 | 
1BC4(02D4) 00 00 00 1C | 
1BC8(02D5) 00 00 00 4C | 
1BCC(02D6) 55 AA 55 AA | 
1BD0(02D7) 82 82 00 82 |   long $82008282,$3c180000,$2a552a55,$0036363e,$0006060e,$001c0606,$001e0606,$003c6666
1BD4(02D8) 00 00 18 3C | 
1BD8(02D9) 55 2A 55 2A | 
1BDC(02DA) 3E 36 36 00 | 
1BE0(02DB) 0E 06 06 00 | 
1BE4(02DC) 06 06 1C 00 | 
1BE8(02DD) 06 06 1E 00 | 
1BEC(02DE) 66 66 3C 00 | 
1BF0(02DF) 18 18 7E 18 |   long $187e1818,$0066767e,$00183c24,$1f181818,$1f000000,$f8000000,$f8181818,$ff181818
1BF4(02E0) 7E 76 66 00 | 
1BF8(02E1) 24 3C 18 00 | 
1BFC(02E2) 18 18 18 1F | 
1C00(02E3) 00 00 00 1F | 
1C04(02E4) 00 00 00 F8 | 
1C08(02E5) 18 18 18 F8 | 
1C0C(02E6) 18 18 18 FF | 
1C10(02E7) 00 00 00 00 |   long $00000000,$0000ffff,$00000000,$00000000,$00000000,$f8181818,$1f181818,$ff181818
1C14(02E8) FF FF 00 00 | 
1C18(02E9) 00 00 00 00 | 
1C1C(02EA) 00 00 00 00 | 
1C20(02EB) 00 00 00 00 | 
1C24(02EC) 18 18 18 F8 | 
1C28(02ED) 18 18 18 1F | 
1C2C(02EE) 18 18 18 FF | 
1C30(02EF) 00 00 00 FF |   long $ff000000,$18181818,$0c060c30,$3060300c,$667e0000,$187e3030,$3e0c0c6c,$18180000
1C34(02F0) 18 18 18 18 | 
1C38(02F1) 30 0C 06 0C | 
1C3C(02F2) 0C 30 60 30 | 
1C40(02F3) 00 00 7E 66 | 
1C44(02F4) 30 30 7E 18 | 
1C48(02F5) 6C 0C 0C 3E | 
1C4C(02F6) 00 00 18 18 | 
1C50(02F7) 00 00 00 00 |   long $00000000,$18181818,$00003636,$247e7e24,$3c1a5a3c,$18302e6a,$1c363636,$00181818
1C54(02F8) 18 18 18 18 | 
1C58(02F9) 36 36 00 00 | 
1C5C(02FA) 24 7E 7E 24 | 
1C60(02FB) 3C 5A 1A 3C | 
1C64(02FC) 6A 2E 30 18 | 
1C68(02FD) 36 36 36 1C | 
1C6C(02FE) 18 18 18 00 | 
1C70(02FF) 18 18 0C 0C |   long $0c0c1818,$30301818,$7e182400,$7e181800,$00000000,$00000000,$00000000,$18303060
1C74(0300) 18 18 30 30 | 
1C78(0301) 00 24 18 7E | 
1C7C(0302) 00 18 18 7E | 
1C80(0303) 00 00 00 00 | 
1C84(0304) 00 00 00 00 | 
1C88(0305) 00 00 00 00 | 
1C8C(0306) 60 30 30 18 | 
1C90(0307) 24 66 66 66 |   long $66666624,$18181a1c,$38606666,$3c183060,$666c7870,$663e0606,$3e060666,$30306060
1C94(0308) 1C 1A 18 18 | 
1C98(0309) 66 66 60 38 | 
1C9C(030A) 60 30 18 3C | 
1CA0(030B) 70 78 6C 66 | 
1CA4(030C) 06 06 3E 66 | 
1CA8(030D) 66 06 06 3E | 
1CAC(030E) 60 60 30 30 | 
1CB0(030F) 66 66 66 3C |   long $3c666666,$7c666666,$183c1800,$183c1800,$060c1830,$007e0000,$6030180c,$38606666
1CB4(0310) 66 66 66 7C | 
1CB8(0311) 00 18 3C 18 | 
1CBC(0312) 00 18 3C 18 | 
1CC0(0313) 30 18 0C 06 | 
1CC4(0314) 00 00 7E 00 | 
1CC8(0315) 0C 18 30 60 | 
1CCC(0316) 66 66 60 38 | 
1CD0(0317) 62 62 7A 6A |   long $6a7a6262,$7e666666,$3e666666,$06060666,$66666666,$3e060606,$3e060606,$76060666
1CD4(0318) 66 66 66 7E | 
1CD8(0319) 66 66 66 3E | 
1CDC(031A) 66 06 06 06 | 
1CE0(031B) 66 66 66 66 | 
1CE4(031C) 06 06 06 3E | 
1CE8(031D) 06 06 06 3E | 
1CEC(031E) 66 06 06 76 | 
1CF0(031F) 66 66 66 7E |   long $7e666666,$18181818,$60606060,$0e1e3666,$06060606,$667e7e66,$7e6e6e66,$66666666
1CF4(0320) 18 18 18 18 | 
1CF8(0321) 60 60 60 60 | 
1CFC(0322) 66 36 1E 0E | 
1D00(0323) 06 06 06 06 | 
1D04(0324) 66 7E 7E 66 | 
1D08(0325) 66 6E 6E 7E | 
1D0C(0326) 66 66 66 66 | 
1D10(0327) 66 66 66 3E |   long $3e666666,$66666666,$3e666666,$3c060666,$18181818,$66666666,$24246666,$66666666
1D14(0328) 66 66 66 66 | 
1D18(0329) 66 66 66 3E | 
1D1C(032A) 66 06 06 3C | 
1D20(032B) 18 18 18 18 | 
1D24(032C) 66 66 66 66 | 
1D28(032D) 66 66 24 24 | 
1D2C(032E) 66 66 66 66 | 
1D30(032F) 66 24 3C 18 |   long $183c2466,$183c3c66,$18306060,$0c0c0c0c,$180c0c06,$30303030,$0042663c,$00000000
1D34(0330) 66 3C 3C 18 | 
1D38(0331) 60 60 30 18 | 
1D3C(0332) 0C 0C 0C 0C | 
1D40(0333) 06 0C 0C 18 | 
1D44(0334) 30 30 30 30 | 
1D48(0335) 3C 66 42 00 | 
1D4C(0336) 00 00 00 00 | 
1D50(0337) 30 00 00 00 |   long $00000030,$603c0000,$663e0606,$663c0000,$667c6060,$663c0000,$1e0c0c6c,$665c0000
1D54(0338) 00 00 3C 60 | 
1D58(0339) 06 06 3E 66 | 
1D5C(033A) 00 00 3C 66 | 
1D60(033B) 60 60 7C 66 | 
1D64(033C) 00 00 3C 66 | 
1D68(033D) 6C 0C 0C 1E | 
1D6C(033E) 00 00 5C 66 | 
1D70(033F) 06 06 3E 66 |   long $663e0606,$181c0018,$60600060,$36660606,$18181818,$fe6a0000,$663e0000,$663c0000
1D74(0340) 18 00 1C 18 | 
1D78(0341) 60 00 60 60 | 
1D7C(0342) 06 06 66 36 | 
1D80(0343) 18 18 18 18 | 
1D84(0344) 00 00 6A FE | 
1D88(0345) 00 00 3E 66 | 
1D8C(0346) 00 00 3C 66 | 
1D90(0347) 00 00 3E 66 |   long $663e0000,$667c0000,$663e0000,$663c0000,$0c3e0c0c,$66660000,$66660000,$66660000
1D94(0348) 00 00 7C 66 | 
1D98(0349) 00 00 3E 66 | 
1D9C(034A) 00 00 3C 66 | 
1DA0(034B) 0C 0C 3E 0C | 
1DA4(034C) 00 00 66 66 | 
1DA8(034D) 00 00 66 66 | 
1DAC(034E) 00 00 66 66 | 
1DB0(034F) 00 00 66 66 |   long $66660000,$66660000,$607e0000,$0c180c0c,$18181818,$30183030,$0000327e,$aa55aa55
1DB4(0350) 00 00 66 66 | 
1DB8(0351) 00 00 7E 60 | 
1DBC(0352) 0C 0C 18 0C | 
1DC0(0353) 18 18 18 18 | 
1DC4(0354) 30 30 18 30 | 
1DC8(0355) 7E 32 00 00 | 
1DCC(0356) 55 AA 55 AA | 
1DD0(0357) 00 00 00 00 |   long $00000000,$3c180000,$2a552a55,$0036363e,$0006060e,$001c0606,$001e0606,$003c6666
1DD4(0358) 00 00 18 3C | 
1DD8(0359) 55 2A 55 2A | 
1DDC(035A) 3E 36 36 00 | 
1DE0(035B) 0E 06 06 00 | 
1DE4(035C) 06 06 1C 00 | 
1DE8(035D) 06 06 1E 00 | 
1DEC(035E) 66 66 3C 00 | 
1DF0(035F) 18 18 7E 18 |   long $187e1818,$0066767e,$00183c24,$20272424,$203f0000,$04fc0000,$04e42424,$00e72424
1DF4(0360) 7E 76 66 00 | 
1DF8(0361) 24 3C 18 00 | 
1DFC(0362) 24 24 27 20 | 
1E00(0363) 00 00 3F 20 | 
1E04(0364) 00 00 FC 04 | 
1E08(0365) 24 24 E4 04 | 
1E0C(0366) 24 24 E7 00 | 
1E10(0367) 00 00 00 00 |   long $00000000,$0000ff00,$ff000000,$00000000,$00000000,$04e42424,$20272424,$00e72424
1E14(0368) 00 FF 00 00 | 
1E18(0369) 00 00 00 FF | 
1E1C(036A) 00 00 00 00 | 
1E20(036B) 00 00 00 00 | 
1E24(036C) 24 24 E4 04 | 
1E28(036D) 24 24 27 20 | 
1E2C(036E) 24 24 E7 00 | 
1E30(036F) 00 00 FF 00 |   long $00ff0000,$24242424,$0c060c30,$3060300c,$667e0000,$187e3030,$3e0c0c6c,$18180000
1E34(0370) 24 24 24 24 | 
1E38(0371) 30 0C 06 0C | 
1E3C(0372) 0C 30 60 30 | 
1E40(0373) 00 00 7E 66 | 
1E44(0374) 30 30 7E 18 | 
1E48(0375) 6C 0C 0C 3E | 
1E4C(0376) 00 00 18 18 | 
1E50(0377) 00 00 00 00 |   long $00000000,$18181818,$00003636,$247e7e24,$3c1a5a3c,$18302e6a,$1c363636,$00181818
1E54(0378) 18 18 18 18 | 
1E58(0379) 36 36 00 00 | 
1E5C(037A) 24 7E 7E 24 | 
1E60(037B) 3C 5A 1A 3C | 
1E64(037C) 6A 2E 30 18 | 
1E68(037D) 36 36 36 1C | 
1E6C(037E) 18 18 18 00 | 
1E70(037F) 18 18 0C 0C |   long $0c0c1818,$30301818,$7e182400,$7e181800,$00000000,$00000000,$00000000,$18303060
1E74(0380) 18 18 30 30 | 
1E78(0381) 00 24 18 7E | 
1E7C(0382) 00 18 18 7E | 
1E80(0383) 00 00 00 00 | 
1E84(0384) 00 00 00 00 | 
1E88(0385) 00 00 00 00 | 
1E8C(0386) 60 30 30 18 | 
1E90(0387) 24 66 66 66 |   long $66666624,$18181a1c,$38606666,$3c183060,$666c7870,$663e0606,$3e060666,$30306060
1E94(0388) 1C 1A 18 18 | 
1E98(0389) 66 66 60 38 | 
1E9C(038A) 60 30 18 3C | 
1EA0(038B) 70 78 6C 66 | 
1EA4(038C) 06 06 3E 66 | 
1EA8(038D) 66 06 06 3E | 
1EAC(038E) 60 60 30 30 | 
1EB0(038F) 66 66 66 3C |   long $3c666666,$7c666666,$183c1800,$183c1800,$060c1830,$007e0000,$6030180c,$38606666
1EB4(0390) 66 66 66 7C | 
1EB8(0391) 00 18 3C 18 | 
1EBC(0392) 00 18 3C 18 | 
1EC0(0393) 30 18 0C 06 | 
1EC4(0394) 00 00 7E 00 | 
1EC8(0395) 0C 18 30 60 | 
1ECC(0396) 66 66 60 38 | 
1ED0(0397) 66 66 76 76 |   long $76766666,$7e666666,$3e666666,$06060666,$66666666,$3e060606,$3e060606,$76060666
1ED4(0398) 66 66 66 7E | 
1ED8(0399) 66 66 66 3E | 
1EDC(039A) 66 06 06 06 | 
1EE0(039B) 66 66 66 66 | 
1EE4(039C) 06 06 06 3E | 
1EE8(039D) 06 06 06 3E | 
1EEC(039E) 66 06 06 76 | 
1EF0(039F) 66 66 66 7E |   long $7e666666,$18181818,$60606060,$0e1e3666,$06060606,$667e7e66,$7e6e6e66,$66666666
1EF4(03A0) 18 18 18 18 | 
1EF8(03A1) 60 60 60 60 | 
1EFC(03A2) 66 36 1E 0E | 
1F00(03A3) 06 06 06 06 | 
1F04(03A4) 66 7E 7E 66 | 
1F08(03A5) 66 6E 6E 7E | 
1F0C(03A6) 66 66 66 66 | 
1F10(03A7) 66 66 66 3E |   long $3e666666,$66666666,$3e666666,$3c060666,$18181818,$66666666,$24246666,$66666666
1F14(03A8) 66 66 66 66 | 
1F18(03A9) 66 66 66 3E | 
1F1C(03AA) 66 06 06 3C | 
1F20(03AB) 18 18 18 18 | 
1F24(03AC) 66 66 66 66 | 
1F28(03AD) 66 66 24 24 | 
1F2C(03AE) 66 66 66 66 | 
1F30(03AF) 66 24 3C 18 |   long $183c2466,$183c3c66,$18306060,$0c0c0c0c,$180c0c06,$30303030,$0042663c,$00000000
1F34(03B0) 66 3C 3C 18 | 
1F38(03B1) 60 60 30 18 | 
1F3C(03B2) 0C 0C 0C 0C | 
1F40(03B3) 06 0C 0C 18 | 
1F44(03B4) 30 30 30 30 | 
1F48(03B5) 3C 66 42 00 | 
1F4C(03B6) 00 00 00 00 | 
1F50(03B7) 30 00 00 00 |   long $00000030,$603c0000,$663e0606,$663c0000,$667c6060,$663c0000,$1e0c0c6c,$665c0000
1F54(03B8) 00 00 3C 60 | 
1F58(03B9) 06 06 3E 66 | 
1F5C(03BA) 00 00 3C 66 | 
1F60(03BB) 60 60 7C 66 | 
1F64(03BC) 00 00 3C 66 | 
1F68(03BD) 6C 0C 0C 1E | 
1F6C(03BE) 00 00 5C 66 | 
1F70(03BF) 06 06 3E 66 |   long $663e0606,$181c0018,$60600060,$36660606,$18181818,$fe6a0000,$663e0000,$663c0000
1F74(03C0) 18 00 1C 18 | 
1F78(03C1) 60 00 60 60 | 
1F7C(03C2) 06 06 66 36 | 
1F80(03C3) 18 18 18 18 | 
1F84(03C4) 00 00 6A FE | 
1F88(03C5) 00 00 3E 66 | 
1F8C(03C6) 00 00 3C 66 | 
1F90(03C7) 00 00 3E 66 |   long $663e0000,$667c0000,$663e0000,$663c0000,$0c3e0c0c,$66660000,$66660000,$66660000
1F94(03C8) 00 00 7C 66 | 
1F98(03C9) 00 00 3E 66 | 
1F9C(03CA) 00 00 3C 66 | 
1FA0(03CB) 0C 0C 3E 0C | 
1FA4(03CC) 00 00 66 66 | 
1FA8(03CD) 00 00 66 66 | 
1FAC(03CE) 00 00 66 66 | 
1FB0(03CF) 00 00 66 66 |   long $66660000,$66660000,$607e0000,$0c180c0c,$18181818,$30183030,$0000327e,$aa55aa55
1FB4(03D0) 00 00 66 66 | 
1FB8(03D1) 00 00 7E 60 | 
1FBC(03D2) 0C 0C 18 0C | 
1FC0(03D3) 18 18 18 18 | 
1FC4(03D4) 30 30 18 30 | 
1FC8(03D5) 7E 32 00 00 | 
1FCC(03D6) 55 AA 55 AA | 
1FD0(03D7) 82 00 82 82 |   long $82820082,$00183c7e,$2a552a55,$30303078,$18381878,$58385838,$18381878,$00000000
1FD4(03D8) 7E 3C 18 00 | 
1FD8(03D9) 55 2A 55 2A | 
1FDC(03DA) 78 30 30 30 | 
1FE0(03DB) 78 18 38 18 | 
1FE4(03DC) 38 58 38 58 | 
1FE8(03DD) 78 18 38 18 | 
1FEC(03DE) 00 00 00 00 | 
1FF0(03DF) 18 00 7E 00 |   long $007e0018,$18181818,$30303078,$0000001f,$1818181f,$181818f8,$000000f8,$181818ff
1FF4(03E0) 18 18 18 18 | 
1FF8(03E1) 78 30 30 30 | 
1FFC(03E2) 1F 00 00 00 | 
2000(03E3) 1F 18 18 18 | 
2004(03E4) F8 18 18 18 | 
2008(03E5) F8 00 00 00 | 
200C(03E6) FF 18 18 18 | 
2010(03E7) 00 00 00 00 |   long $00000000,$00000000,$0000ffff,$ff000000,$00000000,$181818f8,$1818181f,$000000ff
2014(03E8) 00 00 00 00 | 
2018(03E9) FF FF 00 00 | 
201C(03EA) 00 00 00 FF | 
2020(03EB) 00 00 00 00 | 
2024(03EC) F8 18 18 18 | 
2028(03ED) 1F 18 18 18 | 
202C(03EE) FF 00 00 00 | 
2030(03EF) FF 18 18 18 |   long $181818ff,$18181818,$7e006030,$7e00060c,$66666666,$0c0c7e18,$3a6c0c0c,$00000000
2034(03F0) 18 18 18 18 | 
2038(03F1) 30 60 00 7E | 
203C(03F2) 0C 06 00 7E | 
2040(03F3) 66 66 66 66 | 
2044(03F4) 18 7E 0C 0C | 
2048(03F5) 0C 0C 6C 3A | 
204C(03F6) 00 00 00 00 | 
2050(03F7) 00 00 00 00 |   long $00000000,$18180018,$00000000,$24247e7e,$183c5a58,$7256740c,$5c367656,$00000000
2054(03F8) 18 00 18 18 | 
2058(03F9) 00 00 00 00 | 
205C(03FA) 7E 7E 24 24 | 
2060(03FB) 58 5A 3C 18 | 
2064(03FC) 0C 74 56 72 | 
2068(03FD) 56 76 36 5C | 
206C(03FE) 00 00 00 00 | 
2070(03FF) 0C 18 18 30 |   long $3018180c,$0c181830,$0024187e,$0018187e,$18383800,$0000007e,$3c180000,$06060c0c
2074(0400) 30 18 18 0C | 
2078(0401) 7E 18 24 00 | 
207C(0402) 7E 18 18 00 | 
2080(0403) 00 38 38 18 | 
2084(0404) 7E 00 00 00 | 
2088(0405) 00 00 18 3C | 
208C(0406) 0C 0C 06 06 | 
2090(0407) 66 66 24 18 |   long $18246666,$7e181818,$7e06060c,$3c666060,$60607e66,$3c666060,$3c666666,$0c0c1818
2094(0408) 18 18 18 7E | 
2098(0409) 0C 06 06 7E | 
209C(040A) 60 60 66 3C | 
20A0(040B) 66 7E 60 60 | 
20A4(040C) 60 60 66 3C | 
20A8(040D) 66 66 66 3C | 
20AC(040E) 18 18 0C 0C | 
20B0(040F) 66 66 66 3C |   long $3c666666,$3c666060,$3c180000,$18383800,$6030180c,$00007e00,$060c1830,$18180018
20B4(0410) 60 60 66 3C | 
20B8(0411) 00 00 18 3C | 
20BC(0412) 00 38 38 18 | 
20C0(0413) 0C 18 30 60 | 
20C4(0414) 00 7E 00 00 | 
20C8(0415) 30 18 0C 06 | 
20CC(0416) 18 00 18 18 | 
20D0(0417) 7A 02 62 3C |   long $3c62027a,$66666666,$3e666666,$3c660606,$3e666666,$7e060606,$06060606,$7c666666
20D4(0418) 66 66 66 66 | 
20D8(0419) 66 66 66 3E | 
20DC(041A) 06 06 66 3C | 
20E0(041B) 66 66 66 3E | 
20E4(041C) 06 06 06 7E | 
20E8(041D) 06 06 06 06 | 
20EC(041E) 66 66 66 7C | 
20F0(041F) 66 66 66 66 |   long $66666666,$7e181818,$3c666060,$4666361e,$7e060606,$66666666,$66667676,$3c666666
20F4(0420) 18 18 18 7E | 
20F8(0421) 60 60 66 3C | 
20FC(0422) 1E 36 66 46 | 
2100(0423) 06 06 06 7E | 
2104(0424) 66 66 66 66 | 
2108(0425) 76 76 66 66 | 
210C(0426) 66 66 66 3C | 
2110(0427) 06 06 06 06 |   long $06060606,$3c766e66,$4666361e,$3c666060,$18181818,$3c666666,$1818183c,$42667e7e
2114(0428) 66 6E 76 3C | 
2118(0429) 1E 36 66 46 | 
211C(042A) 60 60 66 3C | 
2120(042B) 18 18 18 18 | 
2124(042C) 66 66 66 3C | 
2128(042D) 3C 18 18 18 | 
212C(042E) 7E 7E 66 42 | 
2130(042F) 3C 24 66 42 |   long $4266243c,$18181818,$7e06060c,$3c0c0c0c,$60603030,$3c303030,$00000000,$fe000000
2134(0430) 18 18 18 18 | 
2138(0431) 0C 06 06 7E | 
213C(0432) 0C 0C 0C 3C | 
2140(0433) 30 30 60 60 | 
2144(0434) 30 30 30 3C | 
2148(0435) 00 00 00 00 | 
214C(0436) 00 00 00 FE | 
2150(0437) 00 00 00 00 |   long $00000000,$7c66667c,$3e666666,$3c660606,$7c666666,$3c66067e,$0c0c0c0c,$3c063c66
2154(0438) 7C 66 66 7C | 
2158(0439) 66 66 66 3E | 
215C(043A) 06 06 66 3C | 
2160(043B) 66 66 66 7C | 
2164(043C) 7E 06 66 3C | 
2168(043D) 0C 0C 0C 0C | 
216C(043E) 66 3C 06 3C | 
2170(043F) 66 66 66 66 |   long $66666666,$7e181818,$60606060,$66361e1e,$7e181818,$c6c6d6d6,$66666666,$3c666666
2174(0440) 18 18 18 7E | 
2178(0441) 60 60 60 60 | 
217C(0442) 1E 1E 36 66 | 
2180(0443) 18 18 18 7E | 
2184(0444) D6 D6 C6 C6 | 
2188(0445) 66 66 66 66 | 
218C(0446) 66 66 66 3C | 
2190(0447) 66 66 3E 06 |   long $063e6666,$607c6666,$06060606,$3c66300c,$386c0c0c,$7c666666,$183c3c66,$247e7e66
2194(0448) 66 66 7C 60 | 
2198(0449) 06 06 06 06 | 
219C(044A) 0C 30 66 3C | 
21A0(044B) 0C 0C 6C 38 | 
21A4(044C) 66 66 66 7C | 
21A8(044D) 66 3C 3C 18 | 
21AC(044E) 66 7E 7E 24 | 
21B0(044F) 3C 3C 66 66 |   long $66663c3c,$607c6666,$7e060c30,$380c0c18,$18181818,$1c303018,$00000000,$aa55aa55
21B4(0450) 66 66 7C 60 | 
21B8(0451) 30 0C 06 7E | 
21BC(0452) 18 0C 0C 38 | 
21C0(0453) 18 18 18 18 | 
21C4(0454) 18 30 30 1C | 
21C8(0455) 00 00 00 00 | 
21CC(0456) 55 AA 55 AA | 
21D0(0457) 00 00 00 00 |   long $00000000,$00183c7e,$2a552a55,$30303078,$18381878,$58385838,$18381878,$00000000
21D4(0458) 7E 3C 18 00 | 
21D8(0459) 55 2A 55 2A | 
21DC(045A) 78 30 30 30 | 
21E0(045B) 78 18 38 18 | 
21E4(045C) 38 58 38 58 | 
21E8(045D) 78 18 38 18 | 
21EC(045E) 00 00 00 00 | 
21F0(045F) 18 00 7E 00 |   long $007e0018,$18181818,$30303078,$00003f20,$24242720,$2424e404,$0000fc04,$2424e700
21F4(0460) 18 18 18 18 | 
21F8(0461) 78 30 30 30 | 
21FC(0462) 20 3F 00 00 | 
2200(0463) 20 27 24 24 | 
2204(0464) 04 E4 24 24 | 
2208(0465) 04 FC 00 00 | 
220C(0466) 00 E7 24 24 | 
2210(0467) 00 00 00 00 |   long $00000000,$00000000,$0000ff00,$00ff0000,$00000000,$2424e404,$24242720,$0000ff00
2214(0468) 00 00 00 00 | 
2218(0469) 00 FF 00 00 | 
221C(046A) 00 00 FF 00 | 
2220(046B) 00 00 00 00 | 
2224(046C) 04 E4 24 24 | 
2228(046D) 20 27 24 24 | 
222C(046E) 00 FF 00 00 | 
2230(046F) 00 E7 24 24 |   long $2424e700,$24242424,$7e006030,$7e00060c,$66666666,$0c0c7e18,$3a6c0c0c,$00000000
2234(0470) 24 24 24 24 | 
2238(0471) 30 60 00 7E | 
223C(0472) 0C 06 00 7E | 
2240(0473) 66 66 66 66 | 
2244(0474) 18 7E 0C 0C | 
2248(0475) 0C 0C 6C 3A | 
224C(0476) 00 00 00 00 | 
2250(0477) 00 00 00 00 |   long $00000000,$18180018,$00000000,$24247e7e,$183c5a58,$7256740c,$5c367656,$00000000
2254(0478) 18 00 18 18 | 
2258(0479) 00 00 00 00 | 
225C(047A) 7E 7E 24 24 | 
2260(047B) 58 5A 3C 18 | 
2264(047C) 0C 74 56 72 | 
2268(047D) 56 76 36 5C | 
226C(047E) 00 00 00 00 | 
2270(047F) 0C 18 18 30 |   long $3018180c,$0c181830,$0024187e,$0018187e,$18383800,$0000007e,$3c180000,$06060c0c
2274(0480) 30 18 18 0C | 
2278(0481) 7E 18 24 00 | 
227C(0482) 7E 18 18 00 | 
2280(0483) 00 38 38 18 | 
2284(0484) 7E 00 00 00 | 
2288(0485) 00 00 18 3C | 
228C(0486) 0C 0C 06 06 | 
2290(0487) 66 66 24 18 |   long $18246666,$7e181818,$7e06060c,$3c666060,$60607e66,$3c666060,$3c666666,$0c0c1818
2294(0488) 18 18 18 7E | 
2298(0489) 0C 06 06 7E | 
229C(048A) 60 60 66 3C | 
22A0(048B) 66 7E 60 60 | 
22A4(048C) 60 60 66 3C | 
22A8(048D) 66 66 66 3C | 
22AC(048E) 18 18 0C 0C | 
22B0(048F) 66 66 66 3C |   long $3c666666,$3c666060,$3c180000,$18383800,$6030180c,$00007e00,$060c1830,$18180018
22B4(0490) 60 60 66 3C | 
22B8(0491) 00 00 18 3C | 
22BC(0492) 00 38 38 18 | 
22C0(0493) 0C 18 30 60 | 
22C4(0494) 00 7E 00 00 | 
22C8(0495) 30 18 0C 06 | 
22CC(0496) 18 00 18 18 | 
22D0(0497) 76 06 66 3C |   long $3c660676,$66666666,$3e666666,$3c660606,$3e666666,$7e060606,$06060606,$7c666666
22D4(0498) 66 66 66 66 | 
22D8(0499) 66 66 66 3E | 
22DC(049A) 06 06 66 3C | 
22E0(049B) 66 66 66 3E | 
22E4(049C) 06 06 06 7E | 
22E8(049D) 06 06 06 06 | 
22EC(049E) 66 66 66 7C | 
22F0(049F) 66 66 66 66 |   long $66666666,$7e181818,$3c666060,$4666361e,$7e060606,$66666666,$66667676,$3c666666
22F4(04A0) 18 18 18 7E | 
22F8(04A1) 60 60 66 3C | 
22FC(04A2) 1E 36 66 46 | 
2300(04A3) 06 06 06 7E | 
2304(04A4) 66 66 66 66 | 
2308(04A5) 76 76 66 66 | 
230C(04A6) 66 66 66 3C | 
2310(04A7) 06 06 06 06 |   long $06060606,$3c766e66,$4666361e,$3c666060,$18181818,$3c666666,$1818183c,$42667e7e
2314(04A8) 66 6E 76 3C | 
2318(04A9) 1E 36 66 46 | 
231C(04AA) 60 60 66 3C | 
2320(04AB) 18 18 18 18 | 
2324(04AC) 66 66 66 3C | 
2328(04AD) 3C 18 18 18 | 
232C(04AE) 7E 7E 66 42 | 
2330(04AF) 3C 24 66 42 |   long $4266243c,$18181818,$7e06060c,$3c0c0c0c,$60603030,$3c303030,$00000000,$fe000000
2334(04B0) 18 18 18 18 | 
2338(04B1) 0C 06 06 7E | 
233C(04B2) 0C 0C 0C 3C | 
2340(04B3) 30 30 60 60 | 
2344(04B4) 30 30 30 3C | 
2348(04B5) 00 00 00 00 | 
234C(04B6) 00 00 00 FE | 
2350(04B7) 00 00 00 00 |   long $00000000,$7c66667c,$3e666666,$3c660606,$7c666666,$3c66067e,$0c0c0c0c,$3c063c66
2354(04B8) 7C 66 66 7C | 
2358(04B9) 66 66 66 3E | 
235C(04BA) 06 06 66 3C | 
2360(04BB) 66 66 66 7C | 
2364(04BC) 7E 06 66 3C | 
2368(04BD) 0C 0C 0C 0C | 
236C(04BE) 66 3C 06 3C | 
2370(04BF) 66 66 66 66 |   long $66666666,$7e181818,$60606060,$66361e1e,$7e181818,$c6c6d6d6,$66666666,$3c666666
2374(04C0) 18 18 18 7E | 
2378(04C1) 60 60 60 60 | 
237C(04C2) 1E 1E 36 66 | 
2380(04C3) 18 18 18 7E | 
2384(04C4) D6 D6 C6 C6 | 
2388(04C5) 66 66 66 66 | 
238C(04C6) 66 66 66 3C | 
2390(04C7) 66 66 3E 06 |   long $063e6666,$607c6666,$06060606,$3c66300c,$386c0c0c,$7c666666,$183c3c66,$247e7e66
2394(04C8) 66 66 7C 60 | 
2398(04C9) 06 06 06 06 | 
239C(04CA) 0C 30 66 3C | 
23A0(04CB) 0C 0C 6C 38 | 
23A4(04CC) 66 66 66 7C | 
23A8(04CD) 66 3C 3C 18 | 
23AC(04CE) 66 7E 7E 24 | 
23B0(04CF) 3C 3C 66 66 |   long $66663c3c,$607c6666,$7e060c30,$380c0c18,$18181818,$1c303018,$00000000,$aa55aa55
23B4(04D0) 66 66 7C 60 | 
23B8(04D1) 30 0C 06 7E | 
23BC(04D2) 18 0C 0C 38 | 
23C0(04D3) 18 18 18 18 | 
23C4(04D4) 18 30 30 1C | 
23C8(04D5) 00 00 00 00 | 
23CC(04D6) 55 AA 55 AA | 
23D0(04D7) 00 82 BA 00 |   long $00ba8200,$00000000,$00002a55,$00000030,$00000018,$00000058,$00000018,$00000000
23D4(04D8) 00 00 00 00 | 
23D8(04D9) 55 2A 00 00 | 
23DC(04DA) 30 00 00 00 | 
23E0(04DB) 18 00 00 00 | 
23E4(04DC) 58 00 00 00 | 
23E8(04DD) 18 00 00 00 | 
23EC(04DE) 00 00 00 00 | 
23F0(04DF) 00 00 00 00 |   long $00000000,$00000078,$00000030,$00000000,$18181818,$18181818,$00000000,$18181818
23F4(04E0) 78 00 00 00 | 
23F8(04E1) 30 00 00 00 | 
23FC(04E2) 00 00 00 00 | 
2400(04E3) 18 18 18 18 | 
2404(04E4) 18 18 18 18 | 
2408(04E5) 00 00 00 00 | 
240C(04E6) 18 18 18 18 | 
2410(04E7) 00 00 00 00 |   long $00000000,$00000000,$00000000,$000000ff,$ffff0000,$18181818,$18181818,$00000000
2414(04E8) 00 00 00 00 | 
2418(04E9) 00 00 00 00 | 
241C(04EA) FF 00 00 00 | 
2420(04EB) 00 00 FF FF | 
2424(04EC) 18 18 18 18 | 
2428(04ED) 18 18 18 18 | 
242C(04EE) 00 00 00 00 | 
2430(04EF) 18 18 18 18 |   long $18181818,$18181818,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
2434(04F0) 18 18 18 18 | 
2438(04F1) 00 00 00 00 | 
243C(04F2) 00 00 00 00 | 
2440(04F3) 00 00 00 00 | 
2444(04F4) 00 00 00 00 | 
2448(04F5) 00 00 00 00 | 
244C(04F6) 00 00 00 00 | 
2450(04F7) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
2454(04F8) 00 00 00 00 | 
2458(04F9) 00 00 00 00 | 
245C(04FA) 00 00 00 00 | 
2460(04FB) 00 00 00 00 | 
2464(04FC) 00 00 00 00 | 
2468(04FD) 00 00 00 00 | 
246C(04FE) 00 00 00 00 | 
2470(04FF) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$0000000c,$00000000,$00000018,$00000000
2474(0500) 00 00 00 00 | 
2478(0501) 00 00 00 00 | 
247C(0502) 00 00 00 00 | 
2480(0503) 0C 00 00 00 | 
2484(0504) 00 00 00 00 | 
2488(0505) 18 00 00 00 | 
248C(0506) 00 00 00 00 | 
2490(0507) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
2494(0508) 00 00 00 00 | 
2498(0509) 00 00 00 00 | 
249C(050A) 00 00 00 00 | 
24A0(050B) 00 00 00 00 | 
24A4(050C) 00 00 00 00 | 
24A8(050D) 00 00 00 00 | 
24AC(050E) 00 00 00 00 | 
24B0(050F) 00 00 00 00 |   long $00000000,$00000000,$00000018,$0000000c,$00000000,$00000000,$00000000,$00000000
24B4(0510) 00 00 00 00 | 
24B8(0511) 18 00 00 00 | 
24BC(0512) 0C 00 00 00 | 
24C0(0513) 00 00 00 00 | 
24C4(0514) 00 00 00 00 | 
24C8(0515) 00 00 00 00 | 
24CC(0516) 00 00 00 00 | 
24D0(0517) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
24D4(0518) 00 00 00 00 | 
24D8(0519) 00 00 00 00 | 
24DC(051A) 00 00 00 00 | 
24E0(051B) 00 00 00 00 | 
24E4(051C) 00 00 00 00 | 
24E8(051D) 00 00 00 00 | 
24EC(051E) 00 00 00 00 | 
24F0(051F) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
24F4(0520) 00 00 00 00 | 
24F8(0521) 00 00 00 00 | 
24FC(0522) 00 00 00 00 | 
2500(0523) 00 00 00 00 | 
2504(0524) 00 00 00 00 | 
2508(0525) 00 00 00 00 | 
250C(0526) 00 00 00 00 | 
2510(0527) 00 00 00 00 |   long $00000000,$00000060,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
2514(0528) 60 00 00 00 | 
2518(0529) 00 00 00 00 | 
251C(052A) 00 00 00 00 | 
2520(052B) 00 00 00 00 | 
2524(052C) 00 00 00 00 | 
2528(052D) 00 00 00 00 | 
252C(052E) 00 00 00 00 | 
2530(052F) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$000000fe
2534(0530) 00 00 00 00 | 
2538(0531) 00 00 00 00 | 
253C(0532) 00 00 00 00 | 
2540(0533) 00 00 00 00 | 
2544(0534) 00 00 00 00 | 
2548(0535) 00 00 00 00 | 
254C(0536) FE 00 00 00 | 
2550(0537) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00003c66
2554(0538) 00 00 00 00 | 
2558(0539) 00 00 00 00 | 
255C(053A) 00 00 00 00 | 
2560(053B) 00 00 00 00 | 
2564(053C) 00 00 00 00 | 
2568(053D) 00 00 00 00 | 
256C(053E) 66 3C 00 00 | 
2570(053F) 00 00 00 00 |   long $00000000,$00000000,$00003c66,$00000000,$00000000,$00000000,$00000000,$00000000
2574(0540) 00 00 00 00 | 
2578(0541) 66 3C 00 00 | 
257C(0542) 00 00 00 00 | 
2580(0543) 00 00 00 00 | 
2584(0544) 00 00 00 00 | 
2588(0545) 00 00 00 00 | 
258C(0546) 00 00 00 00 | 
2590(0547) 06 06 00 00 |   long $00000606,$00006060,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
2594(0548) 60 60 00 00 | 
2598(0549) 00 00 00 00 | 
259C(054A) 00 00 00 00 | 
25A0(054B) 00 00 00 00 | 
25A4(054C) 00 00 00 00 | 
25A8(054D) 00 00 00 00 | 
25AC(054E) 00 00 00 00 | 
25B0(054F) 00 00 00 00 |   long $00000000,$00003c66,$00000000,$00000000,$00000000,$00000000,$00000000,$aa55aa55
25B4(0550) 66 3C 00 00 | 
25B8(0551) 00 00 00 00 | 
25BC(0552) 00 00 00 00 | 
25C0(0553) 00 00 00 00 | 
25C4(0554) 00 00 00 00 | 
25C8(0555) 00 00 00 00 | 
25CC(0556) 55 AA 55 AA | 
25D0(0557) 00 00 00 FF |   long $ff000000,$ff000000,$ff002a55,$ff000030,$ff000018,$ff000058,$ff000018,$ff000000
25D4(0558) 00 00 00 FF | 
25D8(0559) 55 2A 00 FF | 
25DC(055A) 30 00 00 FF | 
25E0(055B) 18 00 00 FF | 
25E4(055C) 58 00 00 FF | 
25E8(055D) 18 00 00 FF | 
25EC(055E) 00 00 00 FF | 
25F0(055F) 00 00 00 FF |   long $ff000000,$ff000078,$ff000030,$00000000,$24242424,$24242424,$00000000,$24242424
25F4(0560) 78 00 00 FF | 
25F8(0561) 30 00 00 FF | 
25FC(0562) 00 00 00 00 | 
2600(0563) 24 24 24 24 | 
2604(0564) 24 24 24 24 | 
2608(0565) 00 00 00 00 | 
260C(0566) 24 24 24 24 | 
2610(0567) 00 00 00 00 |   long $00000000,$00000000,$00000000,$000000ff,$ff00ff00,$24242424,$24242424,$00000000
2614(0568) 00 00 00 00 | 
2618(0569) 00 00 00 00 | 
261C(056A) FF 00 00 00 | 
2620(056B) 00 FF 00 FF | 
2624(056C) 24 24 24 24 | 
2628(056D) 24 24 24 24 | 
262C(056E) 00 00 00 00 | 
2630(056F) 24 24 24 24 |   long $24242424,$24242424,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2634(0570) 24 24 24 24 | 
2638(0571) 00 00 00 FF | 
263C(0572) 00 00 00 FF | 
2640(0573) 00 00 00 FF | 
2644(0574) 00 00 00 FF | 
2648(0575) 00 00 00 FF | 
264C(0576) 00 00 00 FF | 
2650(0577) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2654(0578) 00 00 00 FF | 
2658(0579) 00 00 00 FF | 
265C(057A) 00 00 00 FF | 
2660(057B) 00 00 00 FF | 
2664(057C) 00 00 00 FF | 
2668(057D) 00 00 00 FF | 
266C(057E) 00 00 00 FF | 
2670(057F) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff00000c,$ff000000,$ff000018,$ff000000
2674(0580) 00 00 00 FF | 
2678(0581) 00 00 00 FF | 
267C(0582) 00 00 00 FF | 
2680(0583) 0C 00 00 FF | 
2684(0584) 00 00 00 FF | 
2688(0585) 18 00 00 FF | 
268C(0586) 00 00 00 FF | 
2690(0587) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2694(0588) 00 00 00 FF | 
2698(0589) 00 00 00 FF | 
269C(058A) 00 00 00 FF | 
26A0(058B) 00 00 00 FF | 
26A4(058C) 00 00 00 FF | 
26A8(058D) 00 00 00 FF | 
26AC(058E) 00 00 00 FF | 
26B0(058F) 00 00 00 FF |   long $ff000000,$ff000000,$ff000018,$ff00000c,$ff000000,$ff000000,$ff000000,$ff000000
26B4(0590) 00 00 00 FF | 
26B8(0591) 18 00 00 FF | 
26BC(0592) 0C 00 00 FF | 
26C0(0593) 00 00 00 FF | 
26C4(0594) 00 00 00 FF | 
26C8(0595) 00 00 00 FF | 
26CC(0596) 00 00 00 FF | 
26D0(0597) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
26D4(0598) 00 00 00 FF | 
26D8(0599) 00 00 00 FF | 
26DC(059A) 00 00 00 FF | 
26E0(059B) 00 00 00 FF | 
26E4(059C) 00 00 00 FF | 
26E8(059D) 00 00 00 FF | 
26EC(059E) 00 00 00 FF | 
26F0(059F) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
26F4(05A0) 00 00 00 FF | 
26F8(05A1) 00 00 00 FF | 
26FC(05A2) 00 00 00 FF | 
2700(05A3) 00 00 00 FF | 
2704(05A4) 00 00 00 FF | 
2708(05A5) 00 00 00 FF | 
270C(05A6) 00 00 00 FF | 
2710(05A7) 00 00 00 FF |   long $ff000000,$ff000060,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2714(05A8) 60 00 00 FF | 
2718(05A9) 00 00 00 FF | 
271C(05AA) 00 00 00 FF | 
2720(05AB) 00 00 00 FF | 
2724(05AC) 00 00 00 FF | 
2728(05AD) 00 00 00 FF | 
272C(05AE) 00 00 00 FF | 
2730(05AF) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff0000fe
2734(05B0) 00 00 00 FF | 
2738(05B1) 00 00 00 FF | 
273C(05B2) 00 00 00 FF | 
2740(05B3) 00 00 00 FF | 
2744(05B4) 00 00 00 FF | 
2748(05B5) 00 00 00 FF | 
274C(05B6) FE 00 00 FF | 
2750(05B7) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff003c66
2754(05B8) 00 00 00 FF | 
2758(05B9) 00 00 00 FF | 
275C(05BA) 00 00 00 FF | 
2760(05BB) 00 00 00 FF | 
2764(05BC) 00 00 00 FF | 
2768(05BD) 00 00 00 FF | 
276C(05BE) 66 3C 00 FF | 
2770(05BF) 00 00 00 FF |   long $ff000000,$ff000000,$ff003c66,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2774(05C0) 00 00 00 FF | 
2778(05C1) 66 3C 00 FF | 
277C(05C2) 00 00 00 FF | 
2780(05C3) 00 00 00 FF | 
2784(05C4) 00 00 00 FF | 
2788(05C5) 00 00 00 FF | 
278C(05C6) 00 00 00 FF | 
2790(05C7) 06 06 00 FF |   long $ff000606,$ff006060,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2794(05C8) 60 60 00 FF | 
2798(05C9) 00 00 00 FF | 
279C(05CA) 00 00 00 FF | 
27A0(05CB) 00 00 00 FF | 
27A4(05CC) 00 00 00 FF | 
27A8(05CD) 00 00 00 FF | 
27AC(05CE) 00 00 00 FF | 
27B0(05CF) 00 00 00 FF |   long $ff000000,$ff003c66,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff55aa55
27B4(05D0) 66 3C 00 FF | 
27B8(05D1) 00 00 00 FF | 
27BC(05D2) 00 00 00 FF | 
27C0(05D3) 00 00 00 FF | 
27C4(05D4) 00 00 00 FF | 
27C8(05D5) 00 00 00 FF | 
27CC(05D6) 55 AA 55 FF | 
|===========================================================================|
|===========================================================================|
Spin Block start with 4 Parameters and 2 Extra Stack Longs. Method 1
PUB start(BasePin, ScreenPtr, CursorPtr, SyncPtr) : okay | i, j

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - BasePin
Local Parameter DBASE:0008 - ScreenPtr
Local Parameter DBASE:000C - CursorPtr
Local Parameter DBASE:0010 - SyncPtr
Local Variable  DBASE:0014 - i
Local Variable  DBASE:0018 - j
|===========================================================================|
Addr : 27D0:             01  : Drop Anchor   
Addr : 27D1:          05 02  : Call Sub 2    
Addr : 27D3: 3B 20 00 00 FF  : Constant 4 Bytes - 20 00 00 FF 
Addr : 27D8:             64  : Variable Operation Local Offset - 1 Read
Addr : 27D9:          38 38  : Constant 1 Bytes - 38 
Addr : 27DB:             E8  : Math Op &     
Addr : 27DC:          38 06  : Constant 1 Bytes - 06 
Addr : 27DE:             E3  : Math Op <<    
Addr : 27DF:             EC  : Math Op +     
Addr : 27E0:       C5 80 98  : Memory Op Long PBASE + WRITE Address = 0098
Addr : 27E3:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 27E5:             64  : Variable Operation Local Offset - 1 Read
Addr : 27E6:          38 18  : Constant 1 Bytes - 18 
Addr : 27E8:             E8  : Math Op &     
Addr : 27E9:             E3  : Math Op <<    
Addr : 27EA:             75  : Variable Operation Local Offset - 5 Write
Addr : 27EB:             64  : Variable Operation Local Offset - 1 Read
Addr : 27EC:          37 04  : Constant Mask Y=4 00000020
Addr : 27EE:             E8  : Math Op &     
Addr : 27EF:             35  : Constant 1 $00000000
Addr : 27F0:             FC  : Math Op ==    
Addr : 27F1:             79  : Variable Operation Local Offset - 6 Write
Addr : 27F2:             74  : Variable Operation Local Offset - 5 Read
Addr : 27F3:             78  : Variable Operation Local Offset - 6 Read
Addr : 27F4:             E8  : Math Op &     
Addr : 27F5:       C5 80 90  : Memory Op Long PBASE + WRITE Address = 0090
Addr : 27F8:             74  : Variable Operation Local Offset - 5 Read
Addr : 27F9:             78  : Variable Operation Local Offset - 6 Read
Addr : 27FA:             E7  : Math Op !     
Addr : 27FB:             E8  : Math Op &     
Addr : 27FC:       C5 80 94  : Memory Op Long PBASE + WRITE Address = 0094
Addr : 27FF:          3F 91  : Register op CNT Read
Addr : 2801:          37 0F  : Constant Mask Y=15 00010000
Addr : 2803:             EC  : Math Op +     
Addr : 2804:       C5 80 9C  : Memory Op Long PBASE + WRITE Address = 009C
Addr : 2807:       C7 82 10  : Memory Op Long PBASE + ADDRESS Address = 0210
Addr : 280A:             6B  : Variable Operation Local Offset - 2 Address
Addr : 280B:          37 00  : Constant Mask Y=0 00000002
Addr : 280D:             1E  : LongMove(To, From, Count)
Addr : 280E:       C7 82 CC  : Memory Op Long PBASE + ADDRESS Address = 02CC
Addr : 2811:       C5 82 18  : Memory Op Long PBASE + WRITE Address = 0218
Addr : 2814:          38 14  : Constant 1 Bytes - 14 
Addr : 2816:       85 81 D8  : Memory Op Byte PBASE + WRITE Address = 01D8
Addr : 2819:          38 11  : Constant 1 Bytes - 11 
Addr : 281B:       85 80 A8  : Memory Op Byte PBASE + WRITE Address = 00A8
Addr : 281E:             36  : Constant 2 $00000001
Addr : 281F:       C5 82 1C  : Memory Op Long PBASE + WRITE Address = 021C
Addr : 2822:             34  : Constant 0 $FFFFFFFF
Addr : 2823:          C7 0C  : Memory Op Long PBASE + ADDRESS Address = 000C
Addr : 2825:             70  : Variable Operation Local Offset - 4 Read
Addr : 2826:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 2827:             36  : Constant 2 $00000001
Addr : 2828:             EC  : Math Op +     
Addr : 2829:             36  : Constant 2 $00000001
Addr : 282A:          D9 00  : Memory Op Long VBASE + POP Index WRITE Address = 0000
Addr : 282C:          37 0C  : Constant Mask Y=12 00002000
Addr : 282E:          3F 91  : Register op CNT Read
Addr : 2830:             EC  : Math Op +     
Addr : 2831:             23  : WaitCnt(count)
Addr : 2832:          38 14  : Constant 1 Bytes - 14 
Addr : 2834:          37 01  : Constant Mask Y=1 00000004
Addr : 2836:             EC  : Math Op +     
Addr : 2837:       85 81 D8  : Memory Op Byte PBASE + WRITE Address = 01D8
Addr : 283A:          38 11  : Constant 1 Bytes - 11 
Addr : 283C:          37 01  : Constant Mask Y=1 00000004
Addr : 283E:             ED  : Math Op -     
Addr : 283F:       85 80 A8  : Memory Op Byte PBASE + WRITE Address = 00A8
Addr : 2842:             35  : Constant 1 $00000000
Addr : 2843:       C5 82 1C  : Memory Op Long PBASE + WRITE Address = 021C
Addr : 2846:             34  : Constant 0 $FFFFFFFF
Addr : 2847:          C7 0C  : Memory Op Long PBASE + ADDRESS Address = 000C
Addr : 2849:             70  : Variable Operation Local Offset - 4 Read
Addr : 284A:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 284B:             36  : Constant 2 $00000001
Addr : 284C:             EC  : Math Op +     
Addr : 284D:             35  : Constant 1 $00000000
Addr : 284E:          D9 00  : Memory Op Long VBASE + POP Index WRITE Address = 0000
Addr : 2850:             35  : Constant 1 $00000000
Addr : 2851:          D8 00  : Memory Op Long VBASE + POP Index READ Address = 0000
Addr : 2853:             36  : Constant 2 $00000001
Addr : 2854:          D8 00  : Memory Op Long VBASE + POP Index READ Address = 0000
Addr : 2856:             F0  : Math Op AND   
Addr : 2857: JZ Label0008
Addr : 2857:          0A 02  : jz Address = 285B 2
Addr : 2859:             35  : Constant 1 $00000000
Addr : 285A:             33  : Return value  
Addr : 285B: Label0008
Addr : 285B: Label0009
Addr : 285B:             01  : Drop Anchor   
Addr : 285C:          05 02  : Call Sub 2    
Addr : 285E:             32  : Return        
|===========================================================================|
Spin Block stop with 0 Parameters and 1 Extra Stack Longs. Method 2
PUB stop | i

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - i
|===========================================================================|
Addr : 285F:             35  : Constant 1 $00000000
Addr : 2860:             65  : Variable Operation Local Offset - 1 Write
Addr : 2861: Label0008
Addr : 2861:             64  : Variable Operation Local Offset - 1 Read
Addr : 2862:          D8 00  : Memory Op Long VBASE + POP Index READ Address = 0000
Addr : 2864: JZ Label000B
Addr : 2864:          0A 07  : jz Address = 286D 7
Addr : 2866:             64  : Variable Operation Local Offset - 1 Read
Addr : 2867:       DA 00 98  : Memory Op Long VBASE + POP Index ASSIGN Address = 0000 VAR~ Post-clear Push
Addr : 286A:             36  : Constant 2 $00000001
Addr : 286B:             ED  : Math Op -     
Addr : 286C:             21  : CogStop(id)   
Addr : 286D: Label000B
Addr : 286D: Label000C
Addr : 286D: Label0009
Addr : 286D:             35  : Constant 1 $00000000
Addr : 286E:             36  : Constant 2 $00000001
Addr : 286F: Repeat i Step Label0008
Addr : 286F:       66 02 6F  : Variable Operation Local Offset - 1 Assign Repeat-Var loop Address= 2861 -17
Addr : 2872: Label000A
Addr : 2872:             32  : Return        
|===========================================================================|
Object E555_SPKEngine
Object Base is 2874
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
Spin Block speakerFrequency with 2 Parameters and 0 Extra Stack Longs. Method 1
PUB speakerFrequency(newFrequency, speakerPinNumber) '' 10 Stack Longs

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - newFrequency
Local Parameter DBASE:0008 - speakerPinNumber
|===========================================================================|
Addr : 2884:             01  : Drop Anchor   
Addr : 2885:             64  : Variable Operation Local Offset - 1 Read
Addr : 2886:             34  : Constant 0 $FFFFFFFF
Addr : 2887:             FB  : Math Op <>    
Addr : 2888:             68  : Variable Operation Local Offset - 2 Read
Addr : 2889:          05 03  : Call Sub 3    
Addr : 288B:             64  : Variable Operation Local Offset - 1 Read
Addr : 288C:             35  : Constant 1 $00000000
Addr : 288D:             C0  : Memory Op Long POP Address READ 
Addr : 288E:             E5  : Math Op <#    
Addr : 288F:             35  : Constant 1 $00000000
Addr : 2890:             E4  : Math Op #>    
Addr : 2891:             65  : Variable Operation Local Offset - 1 Write
Addr : 2892:             36  : Constant 2 $00000001
Addr : 2893:             61  : Variable Operation Local Offset - 0 Write
Addr : 2894:          37 04  : Constant Mask Y=4 00000020
Addr : 2896: TJZ Label0004
Addr : 2896:          08 15  : tjz Address = 28AD 21
Addr : 2898: Label0002
Addr : 2898:             36  : Constant 2 $00000001
Addr : 2899:          66 43  : Variable Operation Local Offset - 1 Assign ByteMathop <<
Addr : 289B:             36  : Constant 2 $00000001
Addr : 289C:          62 41  : Variable Operation Local Offset - 0 Assign BitMathop -<
Addr : 289E:             64  : Variable Operation Local Offset - 1 Read
Addr : 289F:             35  : Constant 1 $00000000
Addr : 28A0:             C0  : Memory Op Long POP Address READ 
Addr : 28A1:             FE  : Math Op =>    
Addr : 28A2: JZ Label0005
Addr : 28A2:          0A 07  : jz Address = 28AB 7
Addr : 28A4:             35  : Constant 1 $00000000
Addr : 28A5:             C0  : Memory Op Long POP Address READ 
Addr : 28A6:          66 4D  : Variable Operation Local Offset - 1 Assign WordMathop -
Addr : 28A8:             36  : Constant 2 $00000001
Addr : 28A9:          62 4C  : Variable Operation Local Offset - 0 Assign WordMathop +
Addr : 28AB: Label0005
Addr : 28AB: Label0006
Addr : 28AB: Label0003
Addr : 28AB: DJNZ Label0002
Addr : 28AB:          09 6B  : djnz Address = 2898 -21
Addr : 28AD: Label0004
Addr : 28AD:          62 98  : Variable Operation Local Offset - 0 Assign VAR~ Post-clear Push
Addr : 28AF:          3F BA  : Register op FRQA Write
Addr : 28B1:             35  : Constant 1 $00000000
Addr : 28B2:          3F BD  : Register op PHSB Write
Addr : 28B4:             32  : Return        
|===========================================================================|
Spin Block speakerVolume with 2 Parameters and 0 Extra Stack Longs. Method 2
PUB speakerVolume(newVolume, speakerPinNumber) '' 10 Stack Longs

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - newVolume
Local Parameter DBASE:0008 - speakerPinNumber
|===========================================================================|
Addr : 28B5:             01  : Drop Anchor   
Addr : 28B6:             64  : Variable Operation Local Offset - 1 Read
Addr : 28B7:             34  : Constant 0 $FFFFFFFF
Addr : 28B8:             FB  : Math Op <>    
Addr : 28B9:             68  : Variable Operation Local Offset - 2 Read
Addr : 28BA:          05 03  : Call Sub 3    
Addr : 28BC:          38 64  : Constant 1 Bytes - 64 
Addr : 28BE:             64  : Variable Operation Local Offset - 1 Read
Addr : 28BF:          38 64  : Constant 1 Bytes - 64 
Addr : 28C1:             E5  : Math Op <#    
Addr : 28C2:             35  : Constant 1 $00000000
Addr : 28C3:             E4  : Math Op #>    
Addr : 28C4:             ED  : Math Op -     
Addr : 28C5: 3B 02 8F 5C 28  : Constant 4 Bytes - 02 8F 5C 28 
Addr : 28CA:             F4  : Math Op *     
Addr : 28CB:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 28CD:             EA  : Math Op |     
Addr : 28CE:          3F BB  : Register op FRQB Write
Addr : 28D0:             32  : Return        
|===========================================================================|
Spin Block speakerSetup with 2 Parameters and 0 Extra Stack Longs. Method 3
PRI speakerSetup(activeOrInactive, speakerPinNumber) ' 5 Stack Longs

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - activeOrInactive
Local Parameter DBASE:0008 - speakerPinNumber
|===========================================================================|
Addr : 28D1:             68  : Variable Operation Local Offset - 2 Read
Addr : 28D2:          37 24  : Constant Mask Y=36 Decrement 0000001F
Addr : 28D4:             E5  : Math Op <#    
Addr : 28D5:             35  : Constant 1 $00000000
Addr : 28D6:             E4  : Math Op #>    
Addr : 28D7:             69  : Variable Operation Local Offset - 2 Write
Addr : 28D8:             64  : Variable Operation Local Offset - 1 Read
Addr : 28D9:             68  : Variable Operation Local Offset - 2 Read
Addr : 28DA:          3D B6  : Register [Bit] op DIRA Write
Addr : 28DC:             35  : Constant 1 $00000000
Addr : 28DD:             68  : Variable Operation Local Offset - 2 Read
Addr : 28DE:          3D B4  : Register [Bit] op OUTA Write
Addr : 28E0:          37 1B  : Constant Mask Y=27 10000000
Addr : 28E2:             68  : Variable Operation Local Offset - 2 Read
Addr : 28E3:             EC  : Math Op +     
Addr : 28E4:             64  : Variable Operation Local Offset - 1 Read
Addr : 28E5:             E8  : Math Op &     
Addr : 28E6:          3F B8  : Register op CTRA Write
Addr : 28E8: 3B 18 00 00 00  : Constant 4 Bytes - 18 00 00 00 
Addr : 28ED:             68  : Variable Operation Local Offset - 2 Read
Addr : 28EE:             EC  : Math Op +     
Addr : 28EF:             64  : Variable Operation Local Offset - 1 Read
Addr : 28F0:             E8  : Math Op &     
Addr : 28F1:          3F B9  : Register op CTRB Write
Addr : 28F3:             32  : Return        
|===========================================================================|
Object Keyboard
Object Base is 28F4
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0004 Variable cog
VBASE : 0004 LONG Size 0004 Variable par_tail
VBASE : 0008 LONG Size 0004 Variable par_head
VBASE : 000C LONG Size 0004 Variable par_present
VBASE : 0010 LONG Size 0020 Variable par_states
VBASE : 0030 LONG Size 0020 Variable par_keys
VBASE : 0050 LONG Size 0004 Variable nkey
VBASE : 0054 LONG Size 0004 Variable dkeyhd
VBASE : 0058 LONG Size 0004 Variable dkeytail
VBASE : 005C BYTE Size 0010 Variable dkeys
|===========================================================================|
Object DAT Blocks
|===========================================================================|
292C(0000)             |                         org
292C(0000) 3D 09 FC 54 | entry                   movd    :par,#_dpin             'load input parameters _dpin/_cpin/_locks/_auto
2930(0001) F0 61 BE A0 |                         mov     x,par
2934(0002) 2C 60 FE 80 |                         add     x,#11*4
2938(0003) 04 62 FE A0 |                         mov     y,#4
293C(0004) 30 01 BC 08 | :par                    rdlong  0,x
2940(0005) D8 08 BC 80 |                         add     :par,dlsb
2944(0006) 04 60 FE 80 |                         add     x,#4
2948(0007) 04 62 FE E4 |                         djnz    y,#:par
294C(0008) 01 58 FE A0 |                         mov     dmask,#1                'set pin masks
2950(0009) 3D 59 BE 2C |                         shl     dmask,_dpin
2954(000A) 01 5A FE A0 |                         mov     cmask,#1
2958(000B) 3E 5B BE 2C |                         shl     cmask,_cpin
295C(000C) 20 7A 7E 61 |                         test    _dpin,#$20      wc      'modify port registers within code
2960(000D) D8 3E BD 70 |                         muxc    _d1,dlsb
2964(000E) D8 52 BD 70 |                         muxc    _d2,dlsb
2968(000F) 01 76 FD 70 |                         muxc    _d3,#1
296C(0010) 01 94 FD 70 |                         muxc    _d4,#1
2970(0011) 20 7C 7E 61 |                         test    _cpin,#$20      wc
2974(0012) D8 38 BD 70 |                         muxc    _c1,dlsb
2978(0013) D8 44 BD 70 |                         muxc    _c2,dlsb
297C(0014) 01 92 FD 70 |                         muxc    _c3,#1
2980(0015) 00 66 FE A0 |                         mov     _head,#0                'reset output parameter _head
2984(0016) 00 EC FF A0 | reset                   mov     dira,#0                 'reset directions
2988(0017) 00 EE FF A0 |                         mov     dirb,#0
298C(0018) 34 35 FC 54 |                         movd    :par,#_present          'reset output parameters _present/_states[8]
2990(0019) 09 60 FE A0 |                         mov     x,#1+8
2994(001A) 00 00 FC A0 | :par                    mov     0,#0
2998(001B) D8 34 BC 80 |                         add     :par,dlsb
299C(001C) 1A 60 FE E4 |                         djnz    x,#:par
29A0(001D) 08 5C FE A0 |                         mov     stat,#8                 'set reset flag
29A4(001E) 33 45 FC 54 | update                  movd    :par,#_head             'update output parameters _head/_present/_states[8]
29A8(001F) F0 61 BE A0 |                         mov     x,par
29AC(0020) 04 60 FE 80 |                         add     x,#1*4
29B0(0021) 0A 62 FE A0 |                         mov     y,#1+1+8
29B4(0022) 30 01 3C 08 | :par                    wrlong  0,x
29B8(0023) D8 44 BC 80 |                         add     :par,dlsb
29BC(0024) 04 60 FE 80 |                         add     x,#4
29C0(0025) 22 62 FE E4 |                         djnz    y,#:par
29C4(0026) 08 5C 7E 61 |                         test    stat,#8         wc      'if reset flag, transmit reset command
29C8(0027) FF 5E F2 A0 |         if_c            mov     data,#$FF
29CC(0028) 9C 68 F1 5C |         if_c            call    #transmit
29D0(0029) 00 5C FE A0 | newcode                 mov     stat,#0                 'reset state
29D4(002A) B5 88 FD 5C | :same                   call    #receive                'receive byte from keyboard
29D8(002B) 84 5E 7E 85 |                         cmp     data,#$83+1     wc      'scancode?
29DC(002C) AA 5E 4E 86 |         if_nc           cmp     data,#$AA       wz      'powerup/reset?
29E0(002D) 80 00 48 5C |         if_nc_and_z     jmp     #configure
29E4(002E) E0 5E 4E 86 |         if_nc           cmp     data,#$E0       wz      'extended?
29E8(002F) 01 5C CA 68 |         if_nc_and_z     or      stat,#1
29EC(0030) 2A 00 48 5C |         if_nc_and_z     jmp     #:same
29F0(0031) F0 5E 4E 86 |         if_nc           cmp     data,#$F0       wz      'released?
29F4(0032) 02 5C CA 68 |         if_nc_and_z     or      stat,#2
29F8(0033) 2A 00 48 5C |         if_nc_and_z     jmp     #:same
29FC(0034) 29 00 4C 5C |         if_nc           jmp     #newcode                'unknown, ignore
2A00(0035) 01 5C 7E 61 |                         test    stat,#1         wc      'lookup code with extended flag
2A04(0036) 01 5E FE 34 |                         rcl     data,#1
2A08(0037) 94 88 FD 5C |                         call    #look
2A0C(0038) 00 5E 7E 86 |                         cmp     data,#0         wz      'if unknown, ignore
2A10(0039) 29 00 68 5C |         if_z            jmp     #newcode
2A14(003A) 3B 65 BE A0 |                         mov     t,_states+6             'remember lock keys in _states
2A18(003B) 2F 61 BE A0 |                         mov     x,data                  'set/clear key bit in _states
2A1C(003C) 05 60 FE 28 |                         shr     x,#5
2A20(003D) 35 61 FE 80 |                         add     x,#_states
2A24(003E) 30 85 BC 54 |                         movd    :reg,x
2A28(003F) 01 62 FE A0 |                         mov     y,#1
2A2C(0040) 2F 63 BE 2C |                         shl     y,data
2A30(0041) 02 5C 7E 61 |                         test    stat,#2         wc
2A34(0042) 31 01 BC 74 | :reg                    muxnc   0,y
2A38(0043) F0 5E CE E1 |         if_nc           cmpsub  data,#$F0       wc      'if released or shift/ctrl/alt/win, done
2A3C(0044) 1E 00 70 5C |         if_c            jmp     #update
2A40(0045) 3C 63 BE A0 |                         mov     y,_states+7             'get shift/ctrl/alt/win bit pairs
2A44(0046) 10 62 FE 28 |                         shr     y,#16
2A48(0047) E0 5E FE E1 |                         cmpsub  data,#$E0       wc      'translate keypad, considering numlock
2A4C(0048) 04 7E 72 62 |         if_c            test    _locks,#%100    wz
2A50(0049) 08 5F E2 80 |         if_c_and_z      add     data,#@keypad1-@table
2A54(004A) 18 5F D2 80 |         if_c_and_nz     add     data,#@keypad2-@table
2A58(004B) 94 88 F1 5C |         if_c            call    #look
2A5C(004C) 6A 00 70 5C |         if_c            jmp     #:flags
2A60(004D) DD 5E FE E1 |                         cmpsub  data,#$DD       wc      'handle scrlock/capslock/numlock
2A64(004E) 08 60 F2 A0 |         if_c            mov     x,#%001_000
2A68(004F) 2F 61 B2 2C |         if_c            shl     x,data
2A6C(0050) 3F 61 B2 64 |         if_c            andn    x,_locks
2A70(0051) 03 60 F2 28 |         if_c            shr     x,#3
2A74(0052) 1D 64 F2 28 |         if_c            shr     t,#29                   'ignore auto-repeat
2A78(0053) 32 61 B2 66 |         if_c            andn    x,t             wz
2A7C(0054) 30 7F B2 6C |         if_c            xor     _locks,x
2A80(0055) DD 5E F2 80 |         if_c            add     data,#$DD
2A84(0056) 04 5C D2 68 |         if_c_and_nz     or      stat,#4                 'if change, set configure flag to update leds
2A88(0057) 03 62 7E 62 |                         test    y,#%11          wz      'get shift into nz
2A8C(0058) 61 5E 56 85 |         if_nz           cmp     data,#$60+1     wc      'check shift1
2A90(0059) 5B 5E D2 E1 |         if_nz_and_c     cmpsub  data,#$5B       wc
2A94(005A) 28 5F D2 80 |         if_nz_and_c     add     data,#@shift1-@table
2A98(005B) 94 88 D1 5C |         if_nz_and_c     call    #look
2A9C(005C) 03 62 D2 64 |         if_nz_and_c     andn    y,#%11
2AA0(005D) 3E 5E 56 85 |         if_nz           cmp     data,#$3D+1     wc      'check shift2
2AA4(005E) 27 5E D2 E1 |         if_nz_and_c     cmpsub  data,#$27       wc
2AA8(005F) 2E 5F D2 80 |         if_nz_and_c     add     data,#@shift2-@table
2AAC(0060) 94 88 D1 5C |         if_nz_and_c     call    #look
2AB0(0061) 03 62 D2 64 |         if_nz_and_c     andn    y,#%11
2AB4(0062) 02 7E 7E 61 |                         test    _locks,#%010    wc      'check shift-alpha, considering capslock
2AB8(0063) 20 D0 FC 74 |                         muxnc   :shift,#$20
2ABC(0064) 40 7E 7E 61 |                         test    _locks,#$40     wc
2AC0(0065) 20 D0 C4 6C |         if_nz_and_nc    xor     :shift,#$20
2AC4(0066) 7B 5E 7E 85 |                         cmp     data,#"z"+1     wc
2AC8(0067) 61 5E F2 E1 |         if_c            cmpsub  data,#"a"       wc
2ACC(0068) 41 5E F2 80 | :shift  if_c            add     data,#"A"
2AD0(0069) 03 62 F2 64 |         if_c            andn    y,#%11
2AD4(006A) 08 5E FE 20 | :flags                  ror     data,#8                 'add shift/ctrl/alt/win flags
2AD8(006B) 04 60 FE A0 |                         mov     x,#4                    '+$100 if shift
2ADC(006C) 03 62 7E 62 | :loop                   test    y,#%11          wz      '+$200 if ctrl
2AE0(006D) 02 62 FE 28 |                         shr     y,#2                    '+$400 if alt
2AE4(006E) 01 5E D6 68 |         if_nz           or      data,#1                 '+$800 if win
2AE8(006F) 01 5E FE 20 |                         ror     data,#1
2AEC(0070) 6C 60 FE E4 |                         djnz    x,#:loop
2AF0(0071) 0C 5E FE 24 |                         rol     data,#12
2AF4(0072) F0 61 BE 08 |                         rdlong  x,par                   'if room in buffer and key valid, enter
2AF8(0073) 01 60 FE 84 |                         sub     x,#1
2AFC(0074) 0F 60 FE 60 |                         and     x,#$F
2B00(0075) 33 61 3E 86 |                         cmp     x,_head         wz
2B04(0076) FF 5E 56 62 |         if_nz           test    data,#$FF       wz
2B08(0077) F0 61 96 A0 |         if_nz           mov     x,par
2B0C(0078) 2C 60 D6 80 |         if_nz           add     x,#11*4
2B10(0079) 33 61 96 80 |         if_nz           add     x,_head
2B14(007A) 33 61 96 80 |         if_nz           add     x,_head
2B18(007B) 30 5F 16 04 |         if_nz           wrword  data,x
2B1C(007C) 01 66 D6 80 |         if_nz           add     _head,#1
2B20(007D) 0F 66 D6 60 |         if_nz           and     _head,#$F
2B24(007E) 04 5C 7E 61 |                         test    stat,#4         wc      'if not configure flag, done
2B28(007F) 1E 00 4C 5C |         if_nc           jmp     #update                 'else configure to update leds
2B2C(0080) F3 5E FE A0 | configure               mov     data,#$F3               'set keyboard auto-repeat
2B30(0081) 9C 68 FD 5C |                         call    #transmit
2B34(0082) 40 5F BE A0 |                         mov     data,_auto
2B38(0083) 7F 5E FE 60 |                         and     data,#%11_11111
2B3C(0084) 9C 68 FD 5C |                         call    #transmit
2B40(0085) ED 5E FE A0 |                         mov     data,#$ED               'set keyboard lock-leds
2B44(0086) 9C 68 FD 5C |                         call    #transmit
2B48(0087) 3F 5F BE A0 |                         mov     data,_locks
2B4C(0088) 1D 5E FE 3C |                         rev     data,#-3 & $1F
2B50(0089) 04 5E 7E 61 |                         test    data,#%100      wc
2B54(008A) 01 5E FE 34 |                         rcl     data,#1
2B58(008B) 07 5E FE 60 |                         and     data,#%111
2B5C(008C) 9C 68 FD 5C |                         call    #transmit
2B60(008D) 3F 61 BE A0 |                         mov     x,_locks                'insert locks into _states
2B64(008E) 07 60 FE 60 |                         and     x,#%111
2B68(008F) 03 78 FE 2C |                         shl     _states+7,#3
2B6C(0090) 30 79 BE 68 |                         or      _states+7,x
2B70(0091) 03 78 FE 20 |                         ror     _states+7,#3
2B74(0092) 01 68 FE A0 |                         mov     _present,#1             'set _present
2B78(0093) 1E 00 7C 5C |                         jmp     #update                 'done
2B7C(0094) 02 5E FE 20 | look                    ror     data,#2                 'perform lookup
2B80(0095) 2F 33 BD 50 |                         movs    :reg,data
2B84(0096) DA 32 FD 80 |                         add     :reg,#table
2B88(0097) 1B 5E FE 28 |                         shr     data,#27
2B8C(0098) 2F 61 BE A0 |                         mov     x,data
2B90(0099) 00 5E BE A0 | :reg                    mov     data,0
2B94(009A) 30 5F BE 28 |                         shr     data,x
2B98(009B) C3 00 7C 5C |                         jmp     #rand                   'isolate byte
2B9C(009C)             | transmit
2B9C(009C) 2D ED BF 68 | _c1                     or      dira,cmask              'pull clock low
2BA0(009D) 0D A6 FD 50 |                         movs    napshr,#13              'hold clock for ~128us (must be >100us)
2BA4(009E) D2 AE FD 5C |                         call    #nap
2BA8(009F) 2C ED BF 68 | _d1                     or      dira,dmask              'pull data low
2BAC(00A0) 12 A6 FD 50 |                         movs    napshr,#18              'hold data for ~4us
2BB0(00A1) D2 AE FD 5C |                         call    #nap
2BB4(00A2) 2D ED BF 6C | _c2                     xor     dira,cmask              'release clock
2BB8(00A3) FF 5E 7E 61 |                         test    data,#$0FF      wc      'append parity and stop bits to byte
2BBC(00A4) 00 5F FE 74 |                         muxnc   data,#$100
2BC0(00A5) D8 5E BE 68 |                         or      data,dlsb
2BC4(00A6) 0A 60 FE A0 |                         mov     x,#10                   'ready 10 bits
2BC8(00A7) C5 9A FD 5C | transmit_bit            call    #wait_c0                'wait until clock low
2BCC(00A8) 01 5E FE 29 |                         shr     data,#1         wc      'output data bit
2BD0(00A9) 2C ED BF 74 | _d2                     muxnc   dira,dmask
2BD4(00AA) CF 96 BD A0 |                         mov     wcond,c1                'wait until clock high
2BD8(00AB) C6 9A FD 5C |                         call    #wait
2BDC(00AC) A7 60 FE E4 |                         djnz    x,#transmit_bit         'another bit?
2BE0(00AD) D0 96 BD A0 |                         mov     wcond,c0d0              'wait until clock and data low
2BE4(00AE) C6 9A FD 5C |                         call    #wait
2BE8(00AF) D1 96 BD A0 |                         mov     wcond,c1d1              'wait until clock and data high
2BEC(00B0) C6 9A FD 5C |                         call    #wait
2BF0(00B1) B7 88 FD 5C |                         call    #receive_ack            'receive ack byte with timed wait
2BF4(00B2) FA 5E 7E 86 |                         cmp     data,#$FA       wz      'if ack error, reset keyboard
2BF8(00B3) 16 00 54 5C |         if_nz           jmp     #reset
2BFC(00B4) 00 00 7C 5C | transmit_ret            ret
2C00(00B5) 20 7C 7E 61 | receive                 test    _cpin,#$20      wc      'wait indefinitely for initial clock low
2C04(00B6) 2D 5B 3E F4 |                         waitpne cmask,cmask
2C08(00B7)             | receive_ack
2C08(00B7) 0B 60 FE A0 |                         mov     x,#11                   'ready 11 bits
2C0C(00B8) C5 9A FD 5C | receive_bit             call    #wait_c0                'wait until clock low
2C10(00B9) 10 A6 FD 50 |                         movs    napshr,#16              'pause ~16us
2C14(00BA) D2 AE FD 5C |                         call    #nap
2C18(00BB) F2 59 3E 61 | _d3                     test    dmask,ina       wc      'input data bit
2C1C(00BC) 01 5E FE 30 |                         rcr     data,#1
2C20(00BD) CF 96 BD A0 |                         mov     wcond,c1                'wait until clock high
2C24(00BE) C6 9A FD 5C |                         call    #wait
2C28(00BF) B8 60 FE E4 |                         djnz    x,#receive_bit          'another bit?
2C2C(00C0) 16 5E FE 28 |                         shr     data,#22                'align byte
2C30(00C1) FF 5F 7E 61 |                         test    data,#$1FF      wc      'if parity error, reset keyboard
2C34(00C2) 16 00 4C 5C |         if_nc           jmp     #reset
2C38(00C3) FF 5E FE 60 | rand                    and     data,#$FF               'isolate byte
2C3C(00C4)             | look_ret
2C3C(00C4)             | receive_ack_ret
2C3C(00C4) 00 00 7C 5C | receive_ret             ret
2C40(00C5) CE 96 BD A0 | wait_c0                 mov     wcond,c0                '(wait until clock low)
2C44(00C6) D9 62 BE A0 | wait                    mov     y,tenms                 'set timeout to 10ms
2C48(00C7) 12 A6 FD 50 | wloop                   movs    napshr,#18              'nap ~4us
2C4C(00C8) D2 AE FD 5C |                         call    #nap
2C50(00C9) F2 5B 3E 61 | _c3                     test    cmask,ina       wc      'check required state(s)
2C54(00CA) F2 59 3E 62 | _d4                     test    dmask,ina       wz      'loop until got state(s) or timeout
2C58(00CB) C7 62 C2 E4 | wcond   if_never        djnz    y,#wloop                '(replaced with c0/c1/c0d0/c1d1)
2C5C(00CC) 16 62 7E EC |                         tjz     y,#reset                'if timeout, reset keyboard
2C60(00CD)             | wait_ret
2C60(00CD) 00 00 7C 5C | wait_c0_ret             ret
2C64(00CE) C7 62 F2 E4 | c0      if_c            djnz    y,#wloop                '(if_never replacements)
2C68(00CF) C7 62 CE E4 | c1      if_nc           djnz    y,#wloop
2C6C(00D0) C7 62 F6 E4 | c0d0    if_c_or_nz      djnz    y,#wloop
2C70(00D1) C7 62 EE E4 | c1d1    if_nc_or_z      djnz    y,#wloop
2C74(00D2) 00 64 FE 08 | nap                     rdlong  t,#0                    'get clkfreq
2C78(00D3) 00 64 FE 28 | napshr                  shr     t,#18/16/13             'shr scales time
2C7C(00D4) 03 64 FE 48 |                         min     t,#3                    'ensure waitcnt won't snag
2C80(00D5) F1 65 BE 80 |                         add     t,cnt                   'add cnt to time
2C84(00D6) 00 64 FE F8 |                         waitcnt t,#0                    'wait until time elapses (nap)
2C88(00D7) 00 00 7C 5C | nap_ret                 ret
2C8C(00D8) 00 02 00 00 | dlsb                    long    1 << 9
2C90(00D9) C4 09 00 00 | tenms                   long    10_000 / 4
2C94(00DA) 00 00       | table                   word    $0000   '00
2C96(00DA) D8 00       |                         word    $00D8   '01             F9
2C98(00DB) 00 00       |                         word    $0000   '02
2C9A(00DB) D4 00       |                         word    $00D4   '03             F5
2C9C(00DC) D2 00       |                         word    $00D2   '04             F3
2C9E(00DC) D0 00       |                         word    $00D0   '05             F1
2CA0(00DD) D1 00       |                         word    $00D1   '06             F2
2CA2(00DD) DB 00       |                         word    $00DB   '07             F12
2CA4(00DE) 00 00       |                         word    $0000   '08
2CA6(00DE) D9 00       |                         word    $00D9   '09             F10
2CA8(00DF) D7 00       |                         word    $00D7   '0A             F8
2CAA(00DF) D5 00       |                         word    $00D5   '0B             F6
2CAC(00E0) D3 00       |                         word    $00D3   '0C             F4
2CAE(00E0) 09 00       |                         word    $0009   '0D             Tab
2CB0(00E1) 60 00       |                         word    $0060   '0E             `
2CB2(00E1) 00 00       |                         word    $0000   '0F
2CB4(00E2) 00 00       |                         word    $0000   '10
2CB6(00E2) F4 F5       |                         word    $F5F4   '11     Alt-R   Alt-L
2CB8(00E3) F0 00       |                         word    $00F0   '12             Shift-L
2CBA(00E3) 00 00       |                         word    $0000   '13
2CBC(00E4) F2 F3       |                         word    $F3F2   '14     Ctrl-R  Ctrl-L
2CBE(00E4) 71 00       |                         word    $0071   '15             q
2CC0(00E5) 31 00       |                         word    $0031   '16             1
2CC2(00E5) 00 00       |                         word    $0000   '17
2CC4(00E6) 00 00       |                         word    $0000   '18
2CC6(00E6) 00 00       |                         word    $0000   '19
2CC8(00E7) 7A 00       |                         word    $007A   '1A             z
2CCA(00E7) 73 00       |                         word    $0073   '1B             s
2CCC(00E8) 61 00       |                         word    $0061   '1C             a
2CCE(00E8) 77 00       |                         word    $0077   '1D             w
2CD0(00E9) 32 00       |                         word    $0032   '1E             2
2CD2(00E9) 00 F6       |                         word    $F600   '1F     Win-L
2CD4(00EA) 00 00       |                         word    $0000   '20
2CD6(00EA) 63 00       |                         word    $0063   '21             c
2CD8(00EB) 78 00       |                         word    $0078   '22             x
2CDA(00EB) 64 00       |                         word    $0064   '23             d
2CDC(00EC) 65 00       |                         word    $0065   '24             e
2CDE(00EC) 34 00       |                         word    $0034   '25             4
2CE0(00ED) 33 00       |                         word    $0033   '26             3
2CE2(00ED) 00 F7       |                         word    $F700   '27     Win-R
2CE4(00EE) 00 00       |                         word    $0000   '28
2CE6(00EE) 20 00       |                         word    $0020   '29             Space
2CE8(00EF) 76 00       |                         word    $0076   '2A             v
2CEA(00EF) 66 00       |                         word    $0066   '2B             f
2CEC(00F0) 74 00       |                         word    $0074   '2C             t
2CEE(00F0) 72 00       |                         word    $0072   '2D             r
2CF0(00F1) 35 00       |                         word    $0035   '2E             5
2CF2(00F1) 00 CC       |                         word    $CC00   '2F     Apps
2CF4(00F2) 00 00       |                         word    $0000   '30
2CF6(00F2) 6E 00       |                         word    $006E   '31             n
2CF8(00F3) 62 00       |                         word    $0062   '32             b
2CFA(00F3) 68 00       |                         word    $0068   '33             h
2CFC(00F4) 67 00       |                         word    $0067   '34             g
2CFE(00F4) 79 00       |                         word    $0079   '35             y
2D00(00F5) 36 00       |                         word    $0036   '36             6
2D02(00F5) 00 CD       |                         word    $CD00   '37     Power
2D04(00F6) 00 00       |                         word    $0000   '38
2D06(00F6) 00 00       |                         word    $0000   '39
2D08(00F7) 6D 00       |                         word    $006D   '3A             m
2D0A(00F7) 6A 00       |                         word    $006A   '3B             j
2D0C(00F8) 75 00       |                         word    $0075   '3C             u
2D0E(00F8) 37 00       |                         word    $0037   '3D             7
2D10(00F9) 38 00       |                         word    $0038   '3E             8
2D12(00F9) 00 CE       |                         word    $CE00   '3F     Sleep
2D14(00FA) 00 00       |                         word    $0000   '40
2D16(00FA) 2C 00       |                         word    $002C   '41             ,
2D18(00FB) 6B 00       |                         word    $006B   '42             k
2D1A(00FB) 69 00       |                         word    $0069   '43             i
2D1C(00FC) 6F 00       |                         word    $006F   '44             o
2D1E(00FC) 30 00       |                         word    $0030   '45             0
2D20(00FD) 39 00       |                         word    $0039   '46             9
2D22(00FD) 00 00       |                         word    $0000   '47
2D24(00FE) 00 00       |                         word    $0000   '48
2D26(00FE) 2E 00       |                         word    $002E   '49             .
2D28(00FF) 2F EF       |                         word    $EF2F   '4A     (/)     /
2D2A(00FF) 6C 00       |                         word    $006C   '4B             l
2D2C(0100) 3B 00       |                         word    $003B   '4C             ;
2D2E(0100) 70 00       |                         word    $0070   '4D             p
2D30(0101) 2D 00       |                         word    $002D   '4E             -
2D32(0101) 00 00       |                         word    $0000   '4F
2D34(0102) 00 00       |                         word    $0000   '50
2D36(0102) 00 00       |                         word    $0000   '51
2D38(0103) 27 00       |                         word    $0027   '52             '
2D3A(0103) 00 00       |                         word    $0000   '53
2D3C(0104) 5B 00       |                         word    $005B   '54             [
2D3E(0104) 3D 00       |                         word    $003D   '55             =
2D40(0105) 00 00       |                         word    $0000   '56
2D42(0105) 00 00       |                         word    $0000   '57
2D44(0106) DE 00       |                         word    $00DE   '58             CapsLock
2D46(0106) F1 00       |                         word    $00F1   '59             Shift-R
2D48(0107) 0D EB       |                         word    $EB0D   '5A     (Enter) Enter
2D4A(0107) 5D 00       |                         word    $005D   '5B             ]
2D4C(0108) 00 00       |                         word    $0000   '5C
2D4E(0108) 5C 00       |                         word    $005C   '5D             \
2D50(0109) 00 CF       |                         word    $CF00   '5E     WakeUp
2D52(0109) 00 00       |                         word    $0000   '5F
2D54(010A) 00 00       |                         word    $0000   '60
2D56(010A) 00 00       |                         word    $0000   '61
2D58(010B) 00 00       |                         word    $0000   '62
2D5A(010B) 00 00       |                         word    $0000   '63
2D5C(010C) 00 00       |                         word    $0000   '64
2D5E(010C) 00 00       |                         word    $0000   '65
2D60(010D) C8 00       |                         word    $00C8   '66             BackSpace
2D62(010D) 00 00       |                         word    $0000   '67
2D64(010E) 00 00       |                         word    $0000   '68
2D66(010E) E1 C5       |                         word    $C5E1   '69     End     (1)
2D68(010F) 00 00       |                         word    $0000   '6A
2D6A(010F) E4 C0       |                         word    $C0E4   '6B     Left    (4)
2D6C(0110) E7 C4       |                         word    $C4E7   '6C     Home    (7)
2D6E(0110) 00 00       |                         word    $0000   '6D
2D70(0111) 00 00       |                         word    $0000   '6E
2D72(0111) 00 00       |                         word    $0000   '6F
2D74(0112) E0 CA       |                         word    $CAE0   '70     Insert  (0)
2D76(0112) EA C9       |                         word    $C9EA   '71     Delete  (.)
2D78(0113) E2 C3       |                         word    $C3E2   '72     Down    (2)
2D7A(0113) E5 00       |                         word    $00E5   '73             (5)
2D7C(0114) E6 C1       |                         word    $C1E6   '74     Right   (6)
2D7E(0114) E8 C2       |                         word    $C2E8   '75     Up      (8)
2D80(0115) CB 00       |                         word    $00CB   '76             Esc
2D82(0115) DF 00       |                         word    $00DF   '77             NumLock
2D84(0116) DA 00       |                         word    $00DA   '78             F11
2D86(0116) EC 00       |                         word    $00EC   '79             (+)
2D88(0117) E3 C7       |                         word    $C7E3   '7A     PageDn  (3)
2D8A(0117) ED 00       |                         word    $00ED   '7B             (-)
2D8C(0118) EE DC       |                         word    $DCEE   '7C     PrScr   (*)
2D8E(0118) E9 C6       |                         word    $C6E9   '7D     PageUp  (9)
2D90(0119) DD 00       |                         word    $00DD   '7E             ScrLock
2D92(0119) 00 00       |                         word    $0000   '7F
2D94(011A) 00 00       |                         word    $0000   '80
2D96(011A) 00 00       |                         word    $0000   '81
2D98(011B) 00 00       |                         word    $0000   '82
2D9A(011B) D6 00       |                         word    $00D6   '83             F7
2D9C(011C) CA          | keypad1                 byte    $CA, $C5, $C3, $C7, $C0, 0, $C1, $C4, $C2, $C6, $C9, $0D, "+-*/"
2D9D(011C) C5          | 
2D9E(011C) C3          | 
2D9F(011C) C7          | 
2DA0(011D) C0          | 
2DA1(011D) 00          | 
2DA2(011D) C1          | 
2DA3(011D) C4          | 
2DA4(011E) C2          | 
2DA5(011E) C6          | 
2DA6(011E) C9          | 
2DA7(011E) 0D          | 
2DA8(011F) 2B          | 
2DA9(011F) 2D          | 
2DAA(011F) 2A          | 
2DAB(011F) 2F          | 
2DAC(0120) 30          | keypad2                 byte    "0123456789.", $0D, "+-*/"
2DAD(0120) 31          | 
2DAE(0120) 32          | 
2DAF(0120) 33          | 
2DB0(0121) 34          | 
2DB1(0121) 35          | 
2DB2(0121) 36          | 
2DB3(0121) 37          | 
2DB4(0122) 38          | 
2DB5(0122) 39          | 
2DB6(0122) 2E          | 
2DB7(0122) 0D          | 
2DB8(0123) 2B          | 
2DB9(0123) 2D          | 
2DBA(0123) 2A          | 
2DBB(0123) 2F          | 
2DBC(0124) 7B          | shift1                  byte    "{|}", 0, 0, "~"
2DBD(0124) 7C          | 
2DBE(0124) 7D          | 
2DBF(0124) 00          | 
2DC0(0125) 00          | 
2DC1(0125) 7E          | 
2DC2(0125) 22          | shift2                  byte    $22, 0, 0, 0, 0, "<_>?)!@#$%^&*(", 0, ":", 0, "+"
2DC3(0125) 00          | 
2DC4(0126) 00          | 
2DC5(0126) 00          | 
2DC6(0126) 00          | 
2DC7(0126) 3C          | 
2DC8(0127) 5F          | 
2DC9(0127) 3E          | 
2DCA(0127) 3F          | 
2DCB(0127) 29          | 
2DCC(0128) 21          | 
2DCD(0128) 40          | 
2DCE(0128) 23          | 
2DCF(0128) 24          | 
2DD0(0129) 25          | 
2DD1(0129) 5E          | 
2DD2(0129) 26          | 
2DD3(0129) 2A          | 
2DD4(012A) 28          | 
2DD5(012A) 00          | 
2DD6(012A) 3A          | 
2DD7(012A) 00          | 
2DD8(012B) 2B          | 
2DD9(012B)             | dmask                   res     1
2DDC(012D)             | cmask                   res     1
2DDC(012E)             | stat                    res     1
2DDC(012F)             | data                    res     1
2DDC(0130)             | x                       res     1
2DDC(0131)             | y                       res     1
2DDC(0132)             | t                       res     1
2DDC(0133)             | _head                   res     1       'write-only
2DDC(0134)             | _present                res     1       'write-only
2DDC(0135)             | _states                 res     8       'write-only
2DDC(013D)             | _dpin                   res     1       'read-only at start
2DDC(013E)             | _cpin                   res     1       'read-only at start
2DDC(013F)             | _locks                  res     1       'read-only at start
2DDC(0140)             | _auto                   res     1       'read-only at start
|===========================================================================|
|===========================================================================|
Spin Block start with 2 Parameters and 0 Extra Stack Longs. Method 1
PUB start(dpin, cpin) : okay

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - dpin
Local Parameter DBASE:0008 - cpin
|===========================================================================|
Addr : 2DDC:             00  : Drop Anchor Push 
Addr : 2DDD:             64  : Variable Operation Local Offset - 1 Read
Addr : 2DDE:             68  : Variable Operation Local Offset - 2 Read
Addr : 2DDF:          37 01  : Constant Mask Y=1 00000004
Addr : 2DE1:          38 28  : Constant 1 Bytes - 28 
Addr : 2DE3:          05 02  : Call Sub 2    
Addr : 2DE5:             61  : Variable Operation Local Offset - 0 Write
Addr : 2DE6:             35  : Constant 1 $00000000
Addr : 2DE7:       CA 58 80  : Memory Op Long VBASE + ASSIGN Address = 0058 Write Push
Addr : 2DEA:       CA 54 80  : Memory Op Long VBASE + ASSIGN Address = 0054 Write Push
Addr : 2DED:          C9 50  : Memory Op Long VBASE + WRITE Address = 0050
Addr : 2DEF:             32  : Return        
|===========================================================================|
Spin Block startx with 4 Parameters and 0 Extra Stack Longs. Method 2
PUB startx(dpin, cpin, locks, auto) : okay

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - dpin
Local Parameter DBASE:0008 - cpin
Local Parameter DBASE:000C - locks
Local Parameter DBASE:0010 - auto
|===========================================================================|
Addr : 2DF0:             01  : Drop Anchor   
Addr : 2DF1:          05 03  : Call Sub 3    
Addr : 2DF3:          CB 30  : Memory Op Long VBASE + ADDRESS Address = 0030
Addr : 2DF5:             67  : Variable Operation Local Offset - 1 Address
Addr : 2DF6:          37 01  : Constant Mask Y=1 00000004
Addr : 2DF8:             1E  : LongMove(To, From, Count)
Addr : 2DF9:             34  : Constant 0 $FFFFFFFF
Addr : 2DFA:          C7 38  : Memory Op Long PBASE + ADDRESS Address = 0038
Addr : 2DFC:             47  : Variable Operation Global Offset - 1 Address
Addr : 2DFD:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 2DFE:             36  : Constant 2 $00000001
Addr : 2DFF:             EC  : Math Op +     
Addr : 2E00:          42 80  : Variable Operation Global Offset - 0 Assign Write Push
Addr : 2E02:             61  : Variable Operation Local Offset - 0 Write
Addr : 2E03:             32  : Return        
|===========================================================================|
Spin Block stop with 0 Parameters and 0 Extra Stack Longs. Method 3
PUB stop

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 2E04:             40  : Variable Operation Global Offset - 0 Read
Addr : 2E05: JZ Label0002
Addr : 2E05:          0A 05  : jz Address = 2E0C 5
Addr : 2E07:          42 98  : Variable Operation Global Offset - 0 Assign VAR~ Post-clear Push
Addr : 2E09:             36  : Constant 2 $00000001
Addr : 2E0A:             ED  : Math Op -     
Addr : 2E0B:             21  : CogStop(id)   
Addr : 2E0C: Label0002
Addr : 2E0C: Label0003
Addr : 2E0C:             47  : Variable Operation Global Offset - 1 Address
Addr : 2E0D:             35  : Constant 1 $00000000
Addr : 2E0E:          38 13  : Constant 1 Bytes - 13 
Addr : 2E10:             1A  : LongFill(Start, Value, Count)
Addr : 2E11:             32  : Return        
|===========================================================================|
Spin Block present with 0 Parameters and 0 Extra Stack Longs. Method 4
PUB present : truefalse

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 2E12:             4C  : Variable Operation Global Offset - 3 Read
Addr : 2E13:             E6  : Math Op -     
Addr : 2E14:             61  : Variable Operation Local Offset - 0 Write
Addr : 2E15:             32  : Return        
|===========================================================================|
Spin Block key with 0 Parameters and 0 Extra Stack Longs. Method 5
PUB key : keycode

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 2E16:             44  : Variable Operation Global Offset - 1 Read
Addr : 2E17:             48  : Variable Operation Global Offset - 2 Read
Addr : 2E18:             FB  : Math Op <>    
Addr : 2E19: JZ Label0002
Addr : 2E19:          0A 0A  : jz Address = 2E25 10
Addr : 2E1B:             44  : Variable Operation Global Offset - 1 Read
Addr : 2E1C:          B8 30  : Memory Op Word VBASE + POP Index READ Address = 0030
Addr : 2E1E:             61  : Variable Operation Local Offset - 0 Write
Addr : 2E1F:          46 A6  : Variable Operation Global Offset - 1 Assign ++VAR pre-inc Long Push
Addr : 2E21:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 2E23:             E8  : Math Op &     
Addr : 2E24:             45  : Variable Operation Global Offset - 1 Write
Addr : 2E25: Label0002
Addr : 2E25: Label0003
Addr : 2E25:             32  : Return        
|===========================================================================|
Spin Block getkey with 0 Parameters and 1 Extra Stack Longs. Method 6
PUB getkey : keycode | temp

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - temp
|===========================================================================|
Addr : 2E26:             00  : Drop Anchor Push 
Addr : 2E27:          05 05  : Call Sub 5    
Addr : 2E29:             65  : Variable Operation Local Offset - 1 Write
Addr : 2E2A:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E2B:             35  : Constant 1 $00000000
Addr : 2E2C:             FA  : Math Op >     
Addr : 2E2D: JZ Label0002
Addr : 2E2D:          0A 04  : jz Address = 2E33 4
Addr : 2E2F:             01  : Drop Anchor   
Addr : 2E30:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E31:          05 0D  : Call Sub 13   
Addr : 2E33: Label0002
Addr : 2E33: Label0003
Addr : 2E33:             35  : Constant 1 $00000000
Addr : 2E34:             61  : Variable Operation Local Offset - 0 Write
Addr : 2E35:          C8 50  : Memory Op Long VBASE + READ Address = 0050
Addr : 2E37: JZ Label0004
Addr : 2E37:          0A 14  : jz Address = 2E4D 20
Addr : 2E39:             36  : Constant 2 $00000001
Addr : 2E3A:       CA 50 4D  : Memory Op Long VBASE + ASSIGN Address = 0050 WordMathop -
Addr : 2E3D:          C8 58  : Memory Op Long VBASE + READ Address = 0058
Addr : 2E3F:          98 5C  : Memory Op Byte VBASE + POP Index READ Address = 005C
Addr : 2E41:             61  : Variable Operation Local Offset - 0 Write
Addr : 2E42:             35  : Constant 1 $00000000
Addr : 2E43:       CA 58 AE  : Memory Op Long VBASE + ASSIGN Address = 0058 VAR++ post inc Long Push
Addr : 2E46:          99 5C  : Memory Op Byte VBASE + POP Index WRITE Address = 005C
Addr : 2E48:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 2E4A:       CA 58 48  : Memory Op Long VBASE + ASSIGN Address = 0058 BitMathop &
Addr : 2E4D: Label0004
Addr : 2E4D: Label0005
Addr : 2E4D:             32  : Return        
|===========================================================================|
Spin Block newkey with 0 Parameters and 0 Extra Stack Longs. Method 7
PUB newkey : keycode

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 2E4E:             48  : Variable Operation Global Offset - 2 Read
Addr : 2E4F:             45  : Variable Operation Global Offset - 1 Write
Addr : 2E50:             00  : Drop Anchor Push 
Addr : 2E51:          05 06  : Call Sub 6    
Addr : 2E53:             61  : Variable Operation Local Offset - 0 Write
Addr : 2E54:             32  : Return        
|===========================================================================|
Spin Block gotkey with 0 Parameters and 1 Extra Stack Longs. Method 8
PUB gotkey : truefalse | temp

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - temp
|===========================================================================|
Addr : 2E55:             00  : Drop Anchor Push 
Addr : 2E56:          05 05  : Call Sub 5    
Addr : 2E58:             65  : Variable Operation Local Offset - 1 Write
Addr : 2E59:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E5A:             35  : Constant 1 $00000000
Addr : 2E5B:             FA  : Math Op >     
Addr : 2E5C: JZ Label0002
Addr : 2E5C:          0A 04  : jz Address = 2E62 4
Addr : 2E5E:             01  : Drop Anchor   
Addr : 2E5F:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E60:          05 0D  : Call Sub 13   
Addr : 2E62: Label0002
Addr : 2E62: Label0003
Addr : 2E62:          C8 50  : Memory Op Long VBASE + READ Address = 0050
Addr : 2E64:             33  : Return value  
Addr : 2E65: Data : 32                       2
|===========================================================================|
Spin Block clearkeys with 0 Parameters and 0 Extra Stack Longs. Method 9
PUB clearkeys

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 2E66:             48  : Variable Operation Global Offset - 2 Read
Addr : 2E67:             45  : Variable Operation Global Offset - 1 Write
Addr : 2E68:             32  : Return        
|===========================================================================|
Spin Block keystate with 1 Parameters and 0 Extra Stack Longs. Method 10
PUB keystate(k) : state

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - k
|===========================================================================|
Addr : 2E69:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E6A:          38 05  : Constant 1 Bytes - 05 
Addr : 2E6C:             E2  : Math Op >>    
Addr : 2E6D:          D8 10  : Memory Op Long VBASE + POP Index READ Address = 0010
Addr : 2E6F:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E70:             E2  : Math Op >>    
Addr : 2E71:             36  : Constant 2 $00000001
Addr : 2E72:             E8  : Math Op &     
Addr : 2E73:             E6  : Math Op -     
Addr : 2E74:             61  : Variable Operation Local Offset - 0 Write
Addr : 2E75:             32  : Return        
|===========================================================================|
Spin Block enqueue with 1 Parameters and 0 Extra Stack Longs. Method 11
PRI enqueue(c)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - c
|===========================================================================|
Addr : 2E76:          C8 50  : Memory Op Long VBASE + READ Address = 0050
Addr : 2E78:          37 03  : Constant Mask Y=3 00000010
Addr : 2E7A:             FC  : Math Op ==    
Addr : 2E7B: JZ Label0002
Addr : 2E7B:          0A 01  : jz Address = 2E7E 1
Addr : 2E7D:             32  : Return        
Addr : 2E7E: Label0002
Addr : 2E7E: Label0003
Addr : 2E7E:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E7F:       CA 54 AE  : Memory Op Long VBASE + ASSIGN Address = 0054 VAR++ post inc Long Push
Addr : 2E82:          99 5C  : Memory Op Byte VBASE + POP Index WRITE Address = 005C
Addr : 2E84:             36  : Constant 2 $00000001
Addr : 2E85:       CA 50 4C  : Memory Op Long VBASE + ASSIGN Address = 0050 WordMathop +
Addr : 2E88:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 2E8A:       CA 54 48  : Memory Op Long VBASE + ASSIGN Address = 0054 BitMathop &
Addr : 2E8D:             32  : Return        
|===========================================================================|
Spin Block escstr with 1 Parameters and 1 Extra Stack Longs. Method 12
PRI escstr(s) | xx

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - s
Local Variable  DBASE:0008 - xx
|===========================================================================|
Addr : 2E8E:             01  : Drop Anchor   
Addr : 2E8F:          38 1B  : Constant 1 Bytes - 1B 
Addr : 2E91:          05 0B  : Call Sub 11   
Addr : 2E93:             35  : Constant 1 $00000000
Addr : 2E94:             69  : Variable Operation Local Offset - 2 Write
Addr : 2E95: Label0002
Addr : 2E95:             01  : Drop Anchor   
Addr : 2E96:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E97:             68  : Variable Operation Local Offset - 2 Read
Addr : 2E98:             90  : Memory Op Byte POP Address POP Index READ 
Addr : 2E99:          05 0B  : Call Sub 11   
Addr : 2E9B: Label0003
Addr : 2E9B:             35  : Constant 1 $00000000
Addr : 2E9C:             64  : Variable Operation Local Offset - 1 Read
Addr : 2E9D:             16  : StrSize(String)
Addr : 2E9E:             36  : Constant 2 $00000001
Addr : 2E9F:             ED  : Math Op -     
Addr : 2EA0: Repeat xx Step Label0002
Addr : 2EA0:       6A 02 72  : Variable Operation Local Offset - 2 Assign Repeat-Var loop Address= 2E95 -14
Addr : 2EA3: Label0004
Addr : 2EA3:             32  : Return        
|===========================================================================|
Spin Block decode_key with 1 Parameters and 1 Extra Stack Longs. Method 13
PRI decode_key(scode)   | s

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - scode
Local Variable  DBASE:0008 - s
|===========================================================================|
Addr : 2EA4: Constant Address of Label0002
Addr : 2EA4:       39 06 47  : Constant 2 Bytes - 06 47 
Addr : 2EA7:             64  : Variable Operation Local Offset - 1 Read
Addr : 2EA8:          38 C0  : Constant 1 Bytes - C0 
Addr : 2EAA: Case_Value Label0003
Addr : 2EAA:       0D 80 5C  : Value Case Address = 2F09 92
Addr : 2EAD:          38 C1  : Constant 1 Bytes - C1 
Addr : 2EAF: Case_Value Label0005
Addr : 2EAF:       0D 80 5C  : Value Case Address = 2F0E 92
Addr : 2EB2:          38 C2  : Constant 1 Bytes - C2 
Addr : 2EB4: Case_Value Label0007
Addr : 2EB4:       0D 80 5C  : Value Case Address = 2F13 92
Addr : 2EB7:          38 C3  : Constant 1 Bytes - C3 
Addr : 2EB9: Case_Value Label0009
Addr : 2EB9:       0D 80 5C  : Value Case Address = 2F18 92
Addr : 2EBC:          38 C4  : Constant 1 Bytes - C4 
Addr : 2EBE: Case_Value Label000B
Addr : 2EBE:       0D 80 5C  : Value Case Address = 2F1D 92
Addr : 2EC1:          38 C5  : Constant 1 Bytes - C5 
Addr : 2EC3: Case_Value Label000D
Addr : 2EC3:       0D 80 5C  : Value Case Address = 2F22 92
Addr : 2EC6:          38 C6  : Constant 1 Bytes - C6 
Addr : 2EC8: Case_Value Label000F
Addr : 2EC8:       0D 80 5C  : Value Case Address = 2F27 92
Addr : 2ECB:          38 C7  : Constant 1 Bytes - C7 
Addr : 2ECD: Case_Value Label0011
Addr : 2ECD:       0D 80 5C  : Value Case Address = 2F2C 92
Addr : 2ED0:          38 C9  : Constant 1 Bytes - C9 
Addr : 2ED2: Case_Value Label0013
Addr : 2ED2:       0D 80 5C  : Value Case Address = 2F31 92
Addr : 2ED5:          38 CA  : Constant 1 Bytes - CA 
Addr : 2ED7: Case_Value Label0015
Addr : 2ED7:       0D 80 5C  : Value Case Address = 2F36 92
Addr : 2EDA:             64  : Variable Operation Local Offset - 1 Read
Addr : 2EDB:          38 CB  : Constant 1 Bytes - CB 
Addr : 2EDD:             FC  : Math Op ==    
Addr : 2EDE: JZ Label0017
Addr : 2EDE:          0A 03  : jz Address = 2EE3 3
Addr : 2EE0:          38 1B  : Constant 1 Bytes - 1B 
Addr : 2EE2:             65  : Variable Operation Local Offset - 1 Write
Addr : 2EE3: Label0017
Addr : 2EE3: Label0018
Addr : 2EE3:             64  : Variable Operation Local Offset - 1 Read
Addr : 2EE4:          38 C8  : Constant 1 Bytes - C8 
Addr : 2EE6:             FC  : Math Op ==    
Addr : 2EE7: JZ Label0019
Addr : 2EE7:          0A 03  : jz Address = 2EEC 3
Addr : 2EE9:          37 02  : Constant Mask Y=2 00000008
Addr : 2EEB:             65  : Variable Operation Local Offset - 1 Write
Addr : 2EEC: Label0019
Addr : 2EEC: Label001A
Addr : 2EEC:             64  : Variable Operation Local Offset - 1 Read
Addr : 2EED:       39 02 60  : Constant 2 Bytes - 02 60 
Addr : 2EF0:             FA  : Math Op >     
Addr : 2EF1:             64  : Variable Operation Local Offset - 1 Read
Addr : 2EF2:       39 02 7B  : Constant 2 Bytes - 02 7B 
Addr : 2EF5:             F9  : Math Op <     
Addr : 2EF6:             F0  : Math Op AND   
Addr : 2EF7: JZ Label001B
Addr : 2EF7:          0A 04  : jz Address = 2EFD 4
Addr : 2EF9:          37 24  : Constant Mask Y=36 Decrement 0000001F
Addr : 2EFB:          66 48  : Variable Operation Local Offset - 1 Assign BitMathop &
Addr : 2EFD: Label001B
Addr : 2EFD: Label001C
Addr : 2EFD:             64  : Variable Operation Local Offset - 1 Read
Addr : 2EFE:          37 06  : Constant Mask Y=6 00000080
Addr : 2F00:             F9  : Math Op <     
Addr : 2F01: JZ Label001D
Addr : 2F01:          0A 04  : jz Address = 2F07 4
Addr : 2F03:             01  : Drop Anchor   
Addr : 2F04:             64  : Variable Operation Local Offset - 1 Read
Addr : 2F05:          05 0B  : Call Sub 11   
Addr : 2F07: Label001D
Addr : 2F07: Label001E
Addr : 2F07:             32  : Return        
Addr : 2F08: CaseDone Label0015
Addr : 2F08:             0C  : Casedone      
Addr : 2F09: Label0003
Addr : 2F09: PBASE Constant Address of Label0004
Addr : 2F09:       87 86 4C  : Memory Op Byte PBASE + ADDRESS Address = 064C
Addr : 2F0C:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F0D: CaseDone Label0003
Addr : 2F0D:             0C  : Casedone      
Addr : 2F0E: Label0005
Addr : 2F0E: PBASE Constant Address of Label0006
Addr : 2F0E:       87 86 4F  : Memory Op Byte PBASE + ADDRESS Address = 064F
Addr : 2F11:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F12: CaseDone Label0005
Addr : 2F12:             0C  : Casedone      
Addr : 2F13: Label0007
Addr : 2F13: PBASE Constant Address of Label0008
Addr : 2F13:       87 86 52  : Memory Op Byte PBASE + ADDRESS Address = 0652
Addr : 2F16:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F17: CaseDone Label0007
Addr : 2F17:             0C  : Casedone      
Addr : 2F18: Label0009
Addr : 2F18: PBASE Constant Address of Label000A
Addr : 2F18:       87 86 55  : Memory Op Byte PBASE + ADDRESS Address = 0655
Addr : 2F1B:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F1C: CaseDone Label0009
Addr : 2F1C:             0C  : Casedone      
Addr : 2F1D: Label000B
Addr : 2F1D: PBASE Constant Address of Label000C
Addr : 2F1D:       87 86 58  : Memory Op Byte PBASE + ADDRESS Address = 0658
Addr : 2F20:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F21: CaseDone Label000B
Addr : 2F21:             0C  : Casedone      
Addr : 2F22: Label000D
Addr : 2F22: PBASE Constant Address of Label000E
Addr : 2F22:       87 86 5B  : Memory Op Byte PBASE + ADDRESS Address = 065B
Addr : 2F25:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F26: CaseDone Label000D
Addr : 2F26:             0C  : Casedone      
Addr : 2F27: Label000F
Addr : 2F27: PBASE Constant Address of Label0010
Addr : 2F27:       87 86 5E  : Memory Op Byte PBASE + ADDRESS Address = 065E
Addr : 2F2A:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F2B: CaseDone Label000F
Addr : 2F2B:             0C  : Casedone      
Addr : 2F2C: Label0011
Addr : 2F2C: PBASE Constant Address of Label0012
Addr : 2F2C:       87 86 62  : Memory Op Byte PBASE + ADDRESS Address = 0662
Addr : 2F2F:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F30: CaseDone Label0011
Addr : 2F30:             0C  : Casedone      
Addr : 2F31: Label0013
Addr : 2F31: PBASE Constant Address of Label0014
Addr : 2F31:       87 86 66  : Memory Op Byte PBASE + ADDRESS Address = 0666
Addr : 2F34:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F35: CaseDone Label0013
Addr : 2F35:             0C  : Casedone      
Addr : 2F36: Label0015
Addr : 2F36: PBASE Constant Address of Label0016
Addr : 2F36:       87 86 6A  : Memory Op Byte PBASE + ADDRESS Address = 066A
Addr : 2F39:             69  : Variable Operation Local Offset - 2 Write
Addr : 2F3A: CaseDone Label0015
Addr : 2F3A:             0C  : Casedone      
Addr : 2F3B: Label0002
Addr : 2F3B:             01  : Drop Anchor   
Addr : 2F3C:             68  : Variable Operation Local Offset - 2 Read
Addr : 2F3D:          05 0C  : Call Sub 12   
Addr : 2F3F:             32  : Return        
Addr : 2F40: Label0004
Addr : 2F40: Data : 5B 44 00                 [D.
Addr : 2F43: Label0006
Addr : 2F43: Data : 5B 43 00                 [C.
Addr : 2F46: Label0008
Addr : 2F46: Data : 5B 41 00                 [A.
Addr : 2F49: Label000A
Addr : 2F49: Data : 5B 42 00                 [B.
Addr : 2F4C: Label000C
Addr : 2F4C: Data : 4F 48 00                 OH.
Addr : 2F4F: Label000E
Addr : 2F4F: Data : 4F 46 00                 OF.
Addr : 2F52: Label0010
Addr : 2F52: Data : 5B 35 7E 00              [5~.
Addr : 2F56: Label0012
Addr : 2F56: Data : 5B 36 7E 00              [6~.
Addr : 2F5A: Label0014
Addr : 2F5A: Data : 5B 33 7E 00              [3~.
Addr : 2F5E: Label0016
Addr : 2F5E: Data : 5B 32 7E 00              [2~.
|===========================================================================|
Object safe_spi
Object Base is 2F64
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
|===========================================================================|
Object DAT Blocks
|===========================================================================|
2FA4(0000) 00 00 00 00 | SPI_engine_cog          long 0
2FA8(0001) 00 00 00 00 | SPI_command             long 0  ' "t", "r", "w", 0 =>done, <0 => error          | unused
2FAC(0002) 00 00 00 00 | SPI_block_index         long 0  ' which 512-byte block to read/write            | cnt at init
2FB0(0003) 00 00 00 00 | SPI_buffer_address      long 0  ' where to get/put the data in Hub RAM          | unused
2FB4(0004) 00 00 00 00 | SPI_capacity            long 0
2FB8(0005) 00          | SPI_csdbuf              byte 0 [16]
2FC8(0009)             | ORG 0
2FC8(0000)             | SPI_engine_entry
2FC8(0000) 2F F1 BF A0 |         mov ctra,writeMode
2FCC(0001) 31 F3 BF A0 |         mov ctrb,clockLineMode
2FD0(0002) 2B ED BF A0 |         mov dira,maskAll
2FD4(0003) 01 80 FE A4 |         neg user_request,#1
2FD8(0004) F0 81 3E 08 |         wrlong user_request,par
2FDC(0005) F1 8B BE A0 |         mov last_time,cnt
2FE0(0006)             | waiting_for_command
2FE0(0006) A4 66 FD 5C |         call #handle_time
2FE4(0007) F0 81 BE 08 |         rdlong user_request,par
2FE8(0008) 00 80 7E C3 |         cmps user_request,#0 wz,wc
2FEC(0009) 06 00 78 5C | if_be   jmp #waiting_for_command
2FF0(000A) 72 80 7E 86 |         cmp user_request,#"r" wz
2FF4(000B) 1D 00 68 5C | if_z    jmp #read_ahead
2FF8(000C) 77 80 7E 86 |         cmp user_request,#"w" wz
2FFC(000D) 2D 00 68 5C | if_z    jmp #write_behind
3000(000E) 7A 80 7E 86 |         cmp user_request,#"z" wz
3004(000F) 16 00 68 5C | if_z    jmp #release_card
3008(0010) 74 80 7E 86 |         cmp user_request,#"t" wz    ' time
300C(0011) 2E 6F 2A 08 | if_z    wrlong seconds,sdAdr    ' seconds goes into the SD index register
3010(0012) 2D 71 2A 08 | if_z    wrlong dtime,bufAdr     ' the remainder goes into the buffer address register
3014(0013) 00 80 FE A0 |         mov user_request,#0
3018(0014) F0 81 3E 08 |         wrlong user_request,par
301C(0015) 06 00 7C 5C |         jmp #waiting_for_command
3020(0016)             | release_card
3020(0016) 7A 82 FE A0 |         mov user_cmd,#"z"       ' request a release 
3024(0017) 01 76 FE A4 |         neg lastIndexPlus,#1    ' reset the last block index 
3028(0018) 01 84 FE A4 |         neg user_idx,#1         ' and make this match it 
302C(0019) 35 96 FC 5C |         call #handle_command
3030(001A) 41 81 BE A0 |         mov user_request,user_cmd
3034(001B) F0 81 3E 08 |         wrlong user_request,par
3038(001C) 06 00 7C 5C |         jmp #waiting_for_command
303C(001D)             | read_ahead
303C(001D) 2E 85 BE 08 |         rdlong user_idx,sdAdr
3040(001E) 42 7F BE A0 |         mov tmp1,user_idx
3044(001F) 01 7E FE 80 |         add tmp1,#1
3048(0020) 3B 7F 3E 86 |         cmp tmp1,lastIndexPlus wz
304C(0021) 72 78 6A 86 | if_z    cmp lastCommand,#"r" wz
3050(0022) 25 00 68 5C | if_z    jmp #:get_on_with_it
3054(0023) 72 82 FE A0 |         mov user_cmd,#"r"
3058(0024) 35 96 FC 5C |         call #handle_command
305C(0025)             | :get_on_with_it
305C(0025) 10 78 FD 58 |         movi transfer_long,#%000010_000 'set to wrlong
3060(0026) B4 8A FD 5C |         call #hub_cog_transfer
3064(0027) 41 81 BE A0 |         mov user_request,user_cmd
3068(0028) F0 81 3E 08 |         wrlong user_request,par
306C(0029) 72 82 FE A0 |         mov user_cmd,#"r"
3070(002A) 01 84 FE 80 |         add user_idx,#1
3074(002B) 35 96 FC 5C |         call #handle_command
3078(002C) 06 00 7C 5C |         jmp #waiting_for_command
307C(002D)             | write_behind
307C(002D) 2E 85 BE 08 |         rdlong user_idx,sdAdr
3080(002E) 11 78 FD 58 |         movi transfer_long,#%000010_001 'set to rdlong
3084(002F) B4 8A FD 5C |         call #hub_cog_transfer
3088(0030) 41 81 BE A0 |         mov user_request,user_cmd
308C(0031) F0 81 3E 08 |         wrlong user_request,par
3090(0032) 77 82 FE A0 |         mov user_cmd,#"w"
3094(0033) 35 96 FC 5C |         call #handle_command
3098(0034) 06 00 7C 5C |         jmp #waiting_for_command
309C(0035)             | handle_command
309C(0035) 42 77 3E 86 |         cmp lastIndexPlus,user_idx wz
30A0(0036) 3C 83 2A 86 | if_z    cmp user_cmd,lastCommand wz
30A4(0037) 42 00 68 5C | if_z    jmp #:execute_block_command
30A8(0038) 77 78 7E 86 |         cmp lastCommand,#"w" wz
30AC(0039) 5A C4 E8 5C | if_z    call #stop_mb_write
30B0(003A) 72 78 7E 86 |         cmp lastCommand,#"r" wz  
30B4(003B) 53 AC E8 5C | if_z    call #stop_mb_read
30B8(003C) 77 82 7E 86 |         cmp user_cmd,#"w" wz
30BC(003D) 57 B2 E8 5C | if_z    call #start_mb_write
30C0(003E) 72 82 7E 86 |         cmp user_cmd,#"r" wz
30C4(003F) 50 A4 E8 5C | if_z    call #start_mb_read
30C8(0040) 7A 82 7E 86 |         cmp user_cmd,#"z" wz
30CC(0041) 4C 9E E8 5C | if_z    call #release_DO
30D0(0042)             | :execute_block_command
30D0(0042) 42 77 BE A0 |         mov lastIndexPlus,user_idx
30D4(0043) 01 76 FE 80 |         add lastIndexPlus,#1
30D8(0044) 41 79 BE A0 |         mov lastCommand,user_cmd
30DC(0045) 77 82 7E 86 |         cmp user_cmd,#"w" wz
30E0(0046) F0 48 EA 5C | if_z    call #write_single_block
30E4(0047) 72 82 7E 86 |         cmp user_cmd,#"r" wz
30E8(0048) C6 DE E9 5C | if_z    call #read_single_block
30EC(0049) 7A 82 7E 86 |         cmp user_cmd,#"z" wz
30F0(004A) 00 82 EA A0 | if_z    mov user_cmd,#0
30F4(004B)             | handle_command_ret
30F4(004B) 00 00 7C 5C |         ret   
30F8(004C)             | release_DO
30F8(004C) 2A E9 BF 68 |         or outa,maskCS
30FC(004D) 8D 46 FD 5C |         call #in8
3100(004E) 8D 46 FD 5C |         call #in8
3104(004F)             | release_DO_ret
3104(004F) 00 00 7C 5C |         ret
3108(0050)             | start_mb_read  
3108(0050) A4 86 FE 58 |         movi block_cmd,#CMD18<<1
310C(0051) 63 F6 FC 5C |         call #send_SPI_command_fast       
3110(0052)             | start_mb_read_ret
3110(0052) 00 00 7C 5C |         ret
3114(0053)             | stop_mb_read
3114(0053) 98 86 FE 58 |         movi block_cmd,#CMD12<<1
3118(0054) 63 F6 FC 5C |         call #send_SPI_command_fast
311C(0055) 7C 00 FD 5C |         call #busy_fast
3120(0056)             | stop_mb_read_ret
3120(0056) 00 00 7C 5C |         ret
3124(0057)             | start_mb_write  
3124(0057) B2 86 FE 58 |         movi block_cmd,#CMD25<<1
3128(0058) 63 F6 FC 5C |         call #send_SPI_command_fast
312C(0059)             | start_mb_write_ret
312C(0059) 00 00 7C 5C |         ret
3130(005A)             | stop_mb_write
3130(005A) 7C 00 FD 5C |         call #busy_fast
3134(005B) 10 7E FE A0 |         mov tmp1,#16
3138(005C)             | :loopity
3138(005C) 8D 46 FD 5C |         call #in8         
313C(005D) 5C 7E FE E4 |         djnz tmp1,#:loopity
3140(005E) FA F9 FF 58 |         movi phsa,#$FD<<1
3144(005F) 81 18 FD 5C |         call #out8
3148(0060) 8D 46 FD 5C |         call #in8       ' stuff byte
314C(0061) 7C 00 FD 5C |         call #busy_fast
3150(0062)             | stop_mb_write_ret
3150(0062) 00 00 7C 5C |         ret
3154(0063)             | send_SPI_command_fast
3154(0063) 2B ED BF A0 |         mov dira,maskAll
3158(0064) 2A E9 BF 68 |         or outa,maskCS  
315C(0065) 2A E9 BF 64 |         andn outa,maskCS
3160(0066) 8D 46 FD 5C |         call #in8 
3164(0067) 43 F9 BF A0 |         mov phsa,block_cmd                      ' do which ever block command this is (already in the top 8 bits)
3168(0068) 81 18 FD 5C |         call #out8                               ' write the byte
316C(0069) 42 F9 BF A0 |         mov phsa,user_idx                       ' read in the desired block index
3170(006A) 2C F9 BF 2C |         shl phsa,adrShift                       ' this will multiply by 512 (bytes/sector) for MMC and SD
3174(006B) 81 18 FD 5C |         call #out8                               ' move out the 1st MSB                              '
3178(006C) 01 F8 FF 24 |         rol phsa,#1
317C(006D) 81 18 FD 5C |         call #out8                               ' move out the 1st MSB                              '
3180(006E) 01 F8 FF 24 |         rol phsa,#1
3184(006F) 81 18 FD 5C |         call #out8                               ' move out the 1st MSB                              '
3188(0070) 01 F8 FF 24 |         rol phsa,#1
318C(0071) 81 18 FD 5C |         call #out8                               ' move out the 1st MSB                              '
3190(0072) 8D 46 FD 5C |         call #in8                                ' in8 looks like out8 with $FF
3194(0073) 18 86 FE 28 |         shr block_cmd,#24
3198(0074) 4C 86 7E 86 |         cmp block_cmd,#CMD12 wz
319C(0075) 8D 46 E9 5C | if_z    call #in8                               ' 8 clocks
31A0(0076) 09 7E FE A0 |         mov tmp1,#9
31A4(0077)             | :cmd_response
31A4(0077) 8D 46 FD 5C |         call #in8
31A8(0078) 80 7C 7E 63 |         test readback,#$80 wc,wz
31AC(0079) 77 7E F2 E4 | if_c    djnz tmp1,#:cmd_response
31B0(007A) 3E 83 96 A4 | if_nz   neg user_cmd,readback
31B4(007B)             | send_SPI_command_fast_ret
31B4(007B) 00 00 7C 5C |         ret    
31B8(007C)             | busy_fast
31B8(007C) 30 7F BE A0 |         mov tmp1,N_in8_500ms
31BC(007D)             | :still_busy
31BC(007D) 8D 46 FD 5C |         call #in8
31C0(007E) FF 7C 7E 86 |         cmp readback,#$FF wz
31C4(007F) 7D 7E D6 E4 | if_nz   djnz tmp1,#:still_busy
31C8(0080)             | busy_fast_ret
31C8(0080) 00 00 7C 5C |         ret
31CC(0081)             | out8
31CC(0081) 29 E9 BF 64 |         andn outa,maskDI 
31D0(0082) 00 FA FF A0 |         mov phsb,#0
31D4(0083) 80 F6 FF 58 |         movi frqb,#%01_0000000        
31D8(0084) 01 F8 FF 24 |         rol phsa,#1
31DC(0085) 01 F8 FF 24 |         rol phsa,#1
31E0(0086) 01 F8 FF 24 |         rol phsa,#1
31E4(0087) 01 F8 FF 24 |         rol phsa,#1
31E8(0088) 01 F8 FF 24 |         rol phsa,#1
31EC(0089) 01 F8 FF 24 |         rol phsa,#1
31F0(008A) 01 F8 FF 24 |         rol phsa,#1
31F4(008B) 00 F6 FF A0 |         mov frqb,#0
31F8(008C)             | out8_ret
31F8(008C) 00 00 7C 5C |         ret
31FC(008D)             | in8
31FC(008D) 01 F8 FF A4 |         neg phsa,#1' DI high
3200(008E) 00 7C FE A0 |         mov readback,#0
3204(008F) C0 FA FF 58 |         movi phsb,#%011_000000
3208(0090) 40 F6 FF 58 |         movi frqb,#%001_000000
320C(0091) F2 51 3E 61 |         test maskDO,ina wc
3210(0092) 01 7C FE 34 |         rcl readback,#1
3214(0093) F2 51 3E 61 |         test maskDO,ina wc
3218(0094) 01 7C FE 34 |         rcl readback,#1
321C(0095) F2 51 3E 61 |         test maskDO,ina wc
3220(0096) 01 7C FE 34 |         rcl readback,#1
3224(0097) F2 51 3E 61 |         test maskDO,ina wc
3228(0098) 01 7C FE 34 |         rcl readback,#1
322C(0099) F2 51 3E 61 |         test maskDO,ina wc
3230(009A) 01 7C FE 34 |         rcl readback,#1
3234(009B) F2 51 3E 61 |         test maskDO,ina wc
3238(009C) 01 7C FE 34 |         rcl readback,#1
323C(009D) F2 51 3E 61 |         test maskDO,ina wc
3240(009E) 01 7C FE 34 |         rcl readback,#1
3244(009F) F2 51 3E 61 |         test maskDO,ina wc
3248(00A0) 00 F6 FF A0 |         mov frqb,#0 ' stop the clock
324C(00A1) 01 7C FE 34 |         rcl readback,#1
3250(00A2) 00 F8 FF A0 |         mov phsa,#0 'DI low
3254(00A3)             | in8_ret
3254(00A3) 00 00 7C 5C |         ret
3258(00A4)             | handle_time        
3258(00A4) F1 7F BE A0 |         mov tmp1,cnt            ' get the current timestamp
325C(00A5) 3F 73 BE 80 |         add idle_time,tmp1      ' add the current time to my idle time counter
3260(00A6) 45 73 BE 84 |         sub idle_time,last_time ' subtract the last time from my idle counter (hence delta)    
3264(00A7) 3F 71 BE 80 |         add dtime,tmp1          ' add to my accumulator, 
3268(00A8) 45 71 BE 84 |         sub dtime,last_time     ' and subtract the old (adding delta)
326C(00A9) 3F 8B BE A0 |         mov last_time,tmp1      ' update my "last timestamp"        
3270(00AA) 00 7E FE 08 |         rdlong tmp1,#0          ' what is the clock frequency?
3274(00AB) 3F 71 BE E1 |         cmpsub dtime,tmp1 wc    ' if I have more than a second in my accumulator
3278(00AC) 00 6E FE C8 |         addx seconds,#0         ' then add it to "seconds"
327C(00AD) 3A 73 3E 87 |         cmp idle_time,idle_limit wz,wc
3280(00AE) B3 00 70 5C | if_b    jmp #handle_time_ret    ' don't clear if we haven't hit the limit
3284(00AF) 7A 82 FE A0 |         mov user_cmd,#"z"       ' we can't overdo it, the command handler makes sure
3288(00B0) 01 76 FE A4 |         neg lastIndexPlus,#1    ' reset the last block index 
328C(00B1) 01 84 FE A4 |         neg user_idx,#1         ' and make this match it 
3290(00B2) 35 96 FC 5C |         call #handle_command    ' release the card, but don't mess with the user's request register
3294(00B3)             | handle_time_ret
3294(00B3) 00 00 7C 5C |         ret
3298(00B4)             | hub_cog_transfer
3298(00B4) 32 F3 BF A0 |         mov ctrb,clockXferMode
329C(00B5) 01 F6 FF A0 |         mov frqb,#1 
32A0(00B6) 2D 89 BE 08 |         rdlong buf_ptr,bufAdr
32A4(00B7) 04 7A FE A0 |         mov ops_left,#4
32A8(00B8) 46 79 FD 54 |         movd transfer_long,#speed_buf
32AC(00B9)             | four_transfer_passes
32AC(00B9) 3F 7F BE 08 |         rdlong tmp1,tmp1
32B0(00BA) 20 7E FE A0 |         mov tmp1,#(512 / 4 / 4)
32B4(00BB) 44 FB BF A0 |         mov phsb,buf_ptr
32B8(00BC)             | transfer_long
32B8(00BC) FD 01 BC 08 |         rdlong 0-0,phsb
32BC(00BD) 35 79 BD 80 |         add transfer_long,incDest4
32C0(00BE) BC 7E FE E4 |         djnz tmp1,#transfer_long
32C4(00BF) 36 79 BD 84 |         sub transfer_long,decDestNminus1
32C8(00C0) 04 88 FE 80 |         add buf_ptr,#4
32CC(00C1) B9 7A FE E4 |         djnz ops_left,#four_transfer_passes
32D0(00C2) 00 F6 FF A0 |         mov frqb,#0
32D4(00C3) 00 FA FF A0 |         mov phsb,#0
32D8(00C4) 31 F3 BF A0 |         mov ctrb,clockLineMode
32DC(00C5)             | hub_cog_transfer_ret
32DC(00C5) 00 00 7C 5C |         ret
32E0(00C6)             | read_single_block
32E0(00C6) 46 CD FD 54 |         movd :store_read_long,#speed_buf
32E4(00C7) 80 7A FE A0 |         mov ops_left,#128
32E8(00C8) 30 7F BE A0 |         mov tmp1,N_in8_500ms
32EC(00C9)             | :get_resp
32EC(00C9) 8D 46 FD 5C |         call #in8
32F0(00CA) FE 7C 7E 86 |         cmp readback,#$FE wz        
32F4(00CB) C9 7E D6 E4 | if_nz   djnz tmp1,#:get_resp
32F8(00CC) 64 82 D6 A4 | if_nz   neg user_cmd,#ERR_ASM_NO_READ_TOKEN  
32FC(00CD) EF 00 54 5C | if_nz   jmp #read_single_block_ret
3300(00CE) 01 F8 FF A4 |         neg phsa,#1
3304(00CF) 80 7A FE A0 |         mov ops_left,#128
3308(00D0)             | :read_loop        
3308(00D0) 04 7E FE A0 |         mov tmp1,#4
330C(00D1) C0 FA FF 58 |         movi phsb,#%011_000000
3310(00D2)             | :in_byte        
3310(00D2) 40 F6 FF 58 |         movi frqb,#%001_000000
3314(00D3) F2 51 3E 61 |         test maskDO,ina wc
3318(00D4) 08 7C FE 34 |         rcl readback,#8
331C(00D5) F2 51 3E 61 |         test maskDO,ina wc
3320(00D6) 02 7C FE 70 |         muxc readback,#2
3324(00D7) F2 51 3E 61 |         test maskDO,ina wc
3328(00D8) 04 7C FE 70 |         muxc readback,#4
332C(00D9) F2 51 3E 61 |         test maskDO,ina wc
3330(00DA) 08 7C FE 70 |         muxc readback,#8
3334(00DB) F2 51 3E 61 |         test maskDO,ina wc
3338(00DC) 10 7C FE 70 |         muxc readback,#16
333C(00DD) F2 51 3E 61 |         test maskDO,ina wc
3340(00DE) 20 7C FE 70 |         muxc readback,#32
3344(00DF) F2 51 3E 61 |         test maskDO,ina wc
3348(00E0) 40 7C FE 70 |         muxc readback,#64
334C(00E1) F2 51 3E 61 |         test maskDO,ina wc
3350(00E2) 00 F6 FF A0 |         mov frqb,#0 ' stop the clock
3354(00E3) 80 7C FE 70 |         muxc readback,#128
3358(00E4) D2 7E FE E4 |         djnz tmp1,#:in_byte
335C(00E5) 00 7C FE 3C |         rev readback,#0
3360(00E6)             | :store_read_long
3360(00E6) 3E 01 BC A0 |         mov 0-0,readback       ' due to some counter weirdness, we need this mov
3364(00E7) 33 CD BD 80 |         add :store_read_long,const512
3368(00E8) D0 7A FE E4 |         djnz ops_left,#:read_loop
336C(00E9) 00 F8 FF A0 |         mov phsa,#0
3370(00EA) 8D 46 FD 5C |         call #in8      ' out8 is 2x faster than in8
3374(00EB) 8D 46 FD 5C |         call #in8      ' and I'm not using the CRC anyway
3378(00EC) 8D 46 FD 5C |         call #in8       ' in8 looks like out8($FF)
337C(00ED) 00 72 FE A0 |         mov idle_time,#0
3380(00EE) 00 82 FE A0 |         mov user_cmd,#0               
3384(00EF)             | read_single_block_ret
3384(00EF) 00 00 7C 5C |         ret          
3388(00F0)             | write_single_block               
3388(00F0) 46 ED FD 50 |         movs :write_loop,#speed_buf
338C(00F1) 80 7A FE A0 |         mov ops_left,#128        
3390(00F2) 7C 00 FD 5C |         call #busy_fast 
3394(00F3) F8 F9 FF 58 |         movi phsa,#$FC<<1
3398(00F4) 81 18 FD 5C |         call #out8
339C(00F5) 00 FA FF A0 |         mov phsb,#0             ' make sure my clock accumulator is right
33A0(00F6)             | :write_loop
33A0(00F6) 46 F9 BF A0 |         mov phsa,speed_buf
33A4(00F7) 01 EC FD 80 |         add :write_loop,#1
33A8(00F8) 18 F8 FF 24 |         rol phsa,#24            ' move A7 into position, so I can do the swizzled version
33AC(00F9) 80 F6 FF 58 |         movi frqb,#%010000000   ' start the clock (remember A7 is already in place)
33B0(00FA) 01 F8 FF 24 |         rol phsa,#1             ' A7 is going out, at the end of this instr, A6 is in place
33B4(00FB) 01 F8 FF 24 |         rol phsa,#1             ' A5
33B8(00FC) 01 F8 FF 24 |         rol phsa,#1             ' A4
33BC(00FD) 01 F8 FF 24 |         rol phsa,#1             ' A3
33C0(00FE) 01 F8 FF 24 |         rol phsa,#1             ' A2
33C4(00FF) 01 F8 FF 24 |         rol phsa,#1             ' A1
33C8(0100) 01 F8 FF 24 |         rol phsa,#1             ' A0
33CC(0101) 11 F8 FF 24 |         rol phsa,#17            ' B7
33D0(0102) 01 F8 FF 24 |         rol phsa,#1             ' B6
33D4(0103) 01 F8 FF 24 |         rol phsa,#1             ' B5
33D8(0104) 01 F8 FF 24 |         rol phsa,#1             ' B4
33DC(0105) 01 F8 FF 24 |         rol phsa,#1             ' B3
33E0(0106) 01 F8 FF 24 |         rol phsa,#1             ' B2
33E4(0107) 01 F8 FF 24 |         rol phsa,#1             ' B1
33E8(0108) 01 F8 FF 24 |         rol phsa,#1             ' B0
33EC(0109) 11 F8 FF 24 |         rol phsa,#17            ' C7
33F0(010A) 01 F8 FF 24 |         rol phsa,#1             ' C6
33F4(010B) 01 F8 FF 24 |         rol phsa,#1             ' C5
33F8(010C) 01 F8 FF 24 |         rol phsa,#1             ' C4
33FC(010D) 01 F8 FF 24 |         rol phsa,#1             ' C3
3400(010E) 01 F8 FF 24 |         rol phsa,#1             ' C2
3404(010F) 01 F8 FF 24 |         rol phsa,#1             ' C1
3408(0110) 01 F8 FF 24 |         rol phsa,#1             ' C0
340C(0111) 11 F8 FF 24 |         rol phsa,#17            ' D7
3410(0112) 01 F8 FF 24 |         rol phsa,#1             ' D6
3414(0113) 01 F8 FF 24 |         rol phsa,#1             ' D5
3418(0114) 01 F8 FF 24 |         rol phsa,#1             ' D4
341C(0115) 01 F8 FF 24 |         rol phsa,#1             ' D3
3420(0116) 01 F8 FF 24 |         rol phsa,#1             ' D2
3424(0117) 01 F8 FF 24 |         rol phsa,#1             ' D1
3428(0118) 01 F8 FF 24 |         rol phsa,#1             ' D0 will be in place _after_ this instruction
342C(0119) 00 F6 FF A0 |         mov frqb,#0             ' shuts the clock off, _after_ this instruction
3430(011A) F6 7A FE E4 |         djnz ops_left,#:write_loop
3434(011B) 8D 46 FD 5C |         call #in8
3438(011C) 8D 46 FD 5C |         call #in8
343C(011D) 8D 46 FD 5C |         call #in8
3440(011E) 1F 7C FE 60 |         and readback,#$1F
3444(011F) 05 7C 7E 86 |         cmp readback,#5 wz
3448(0120) 00 82 EA A0 | if_z    mov user_cmd,#0 ' great
344C(0121) 65 82 D6 A4 | if_nz   neg user_cmd,#ERR_ASM_BLOCK_NOT_WRITTEN ' oops
3450(0122) 8D 46 FD 5C |         call #in8 
3454(0123) 00 72 FE A0 |         mov idle_time,#0
3458(0124)             | write_single_block_ret
3458(0124) 00 00 7C 5C |         ret
345C(0125) 00 00 00 00 | pinDO         long 0    ' pin is controlled by a counter
3460(0126) 00 00 00 00 | pinCLK        long 0    ' pin is controlled by a counter
3464(0127) 00 00 00 00 | pinDI         long 0    ' pin is controlled by a counter
3468(0128) 00 00 00 00 | maskDO        long 0    ' mask for reading the DO line from the card
346C(0129) 00 00 00 00 | maskDI        long 0    ' mask for setting the pin high while reading  
3470(012A) 00 00 00 00 | maskCS        long 0    ' mask = (1<<pin), and is controlled directly
3474(012B) 00 00 00 00 | maskAll       long 0
3478(012C) 09 00 00 00 | adrShift      long 9    ' will be 0 for SDHC, 9 for MMC & SD
347C(012D) 00 00 00 00 | bufAdr        long 0    ' where in Hub RAM is the buffer to copy to/from?
3480(012E) 00 00 00 00 | sdAdr         long 0    ' where on the SD card does it read/write?
3484(012F) 00 00 00 00 | writeMode     long 0    ' the counter setup in NCO single ended, clocking data out on pinDI
3488(0130) 40 42 0F 00 | N_in8_500ms   long 1_000_000 ' used for timeout checking in PASM
348C(0131) 00 00 00 00 | clockLineMode long 0
3490(0132) 00 00 00 7C | clockXferMode long %11111 << 26
3494(0133) 00 02 00 00 | const512      long 512
3498(0134) 00 04 00 00 | const1024     long 1024
349C(0135) 00 08 00 00 | incDest4      long 4 << 9
34A0(0136) 00 FE 00 00 | decDestNminus1 long (512 / 4 - 1) << 9         
34A4(0137) 00 00 00 00 | seconds       long 0
34A8(0138) 00 00 00 00 | dtime         long 0
34AC(0139) 00 00 00 00 | idle_time     long 0
34B0(013A) 00 00 00 00 | idle_limit    long 0
34B4(013B) FF FF FF FF | lastIndexPlus long -1   ' state handler will check against lastIndexPlus, which will not have been -1
34B8(013C) 00 00 00 00 | lastCommand   long 0    ' this will never be the last command.
34BC(013D)             | ops_left      res 1     ' used as a counter for bytes, words, longs, whatever (start w/ # byte clocks out)
34BC(013E)             | readback      res 1     ' all reading from the card goes through here
34BC(013F)             | tmp1          res 1     ' this may get used in all subroutines...don't use except in lowest 
34BC(0140)             | user_request  res 1     ' the main command variable, read in from Hub: "r"-read single, "w"-write single
34BC(0141)             | user_cmd      res 1     ' used internally to handle actual commands to be executed
34BC(0142)             | user_idx      res 1     ' the pointer to the Hub RAM where the data block is/goes
34BC(0143)             | block_cmd     res 1     ' one of the SD/MMC command codes, no app-specific allowed
34BC(0144)             | buf_ptr       res 1     ' moving pointer to the Hub RAM buffer
34BC(0145)             | last_time     res 1     ' tracking the timestamp
34BC(0146)             | speed_buf     res 128   ' 512 bytes to be used for read-ahead / write-behind
34BC(01C6)             | FIT 496
34BC(01C6)             | There are 42 ($02A) Longs left in the cog
|===========================================================================|
|===========================================================================|
Spin Block start with 1 Parameters and 0 Extra Stack Longs. Method 1
PUB start( basepin )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - basepin
|===========================================================================|
Addr : 34BC:             00  : Drop Anchor Push 
Addr : 34BD:             64  : Variable Operation Local Offset - 1 Read
Addr : 34BE:             64  : Variable Operation Local Offset - 1 Read
Addr : 34BF:             36  : Constant 2 $00000001
Addr : 34C0:             EC  : Math Op +     
Addr : 34C1:             64  : Variable Operation Local Offset - 1 Read
Addr : 34C2:          37 00  : Constant Mask Y=0 00000002
Addr : 34C4:             EC  : Math Op +     
Addr : 34C5:             64  : Variable Operation Local Offset - 1 Read
Addr : 34C6:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 34C8:             EC  : Math Op +     
Addr : 34C9:          05 08  : Call Sub 8    
Addr : 34CB:             33  : Return value  
Addr : 34CC: Data : 32                       2
|===========================================================================|
Spin Block readblock with 2 Parameters and 0 Extra Stack Longs. Method 2
PUB readblock( block_index, buffer_address )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - block_index
Local Parameter DBASE:0008 - buffer_address
|===========================================================================|
Addr : 34CD:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 34CF:             35  : Constant 1 $00000000
Addr : 34D0:             FC  : Math Op ==    
Addr : 34D1: JZ Label0002
Addr : 34D1:          0A 05  : jz Address = 34D8 5
Addr : 34D3:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 34D6:             E7  : Math Op !     
Addr : 34D7:             31  : Abort value   
Addr : 34D8: Label0002
Addr : 34D8: Label0003
Addr : 34D8:             68  : Variable Operation Local Offset - 2 Read
Addr : 34D9:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 34DB:             E8  : Math Op &     
Addr : 34DC: JZ Label0004
Addr : 34DC:          0A 03  : jz Address = 34E1 3
Addr : 34DE:          37 61  : Constant Mask Y=97 Decrement Invert FFFFFFFC
Addr : 34E0:             31  : Abort value   
Addr : 34E1: Label0004
Addr : 34E1: Label0005
Addr : 34E1:             64  : Variable Operation Local Offset - 1 Read
Addr : 34E2:          C5 48  : Memory Op Long PBASE + WRITE Address = 0048
Addr : 34E4:             68  : Variable Operation Local Offset - 2 Read
Addr : 34E5:          C5 4C  : Memory Op Long PBASE + WRITE Address = 004C
Addr : 34E7:          38 72  : Constant 1 Bytes - 72 
Addr : 34E9:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 34EB: Label0006
Addr : 34EB:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 34ED:          38 72  : Constant 1 Bytes - 72 
Addr : 34EF:             FC  : Math Op ==    
Addr : 34F0: JZ Label0008
Addr : 34F0:          0A 02  : jz Address = 34F4 2
Addr : 34F2: Label0007
Addr : 34F2: JMP Label0006
Addr : 34F2:          04 77  : Jmp 34EB -9   
Addr : 34F4: Label0008
Addr : 34F4:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 34F6:             35  : Constant 1 $00000000
Addr : 34F7:             F9  : Math Op <     
Addr : 34F8: JZ Label0009
Addr : 34F8:          0A 03  : jz Address = 34FD 3
Addr : 34FA:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 34FC:             31  : Abort value   
Addr : 34FD: Label0009
Addr : 34FD: Label000A
Addr : 34FD:             32  : Return        
|===========================================================================|
Spin Block writeblock with 2 Parameters and 0 Extra Stack Longs. Method 3
PUB writeblock( block_index, buffer_address )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - block_index
Local Parameter DBASE:0008 - buffer_address
|===========================================================================|
Addr : 34FE:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 3500:             35  : Constant 1 $00000000
Addr : 3501:             FC  : Math Op ==    
Addr : 3502: JZ Label0002
Addr : 3502:          0A 05  : jz Address = 3509 5
Addr : 3504:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 3507:             E7  : Math Op !     
Addr : 3508:             31  : Abort value   
Addr : 3509: Label0002
Addr : 3509: Label0003
Addr : 3509:             68  : Variable Operation Local Offset - 2 Read
Addr : 350A:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 350C:             E8  : Math Op &     
Addr : 350D: JZ Label0004
Addr : 350D:          0A 03  : jz Address = 3512 3
Addr : 350F:          37 61  : Constant Mask Y=97 Decrement Invert FFFFFFFC
Addr : 3511:             31  : Abort value   
Addr : 3512: Label0004
Addr : 3512: Label0005
Addr : 3512:             64  : Variable Operation Local Offset - 1 Read
Addr : 3513:          C5 48  : Memory Op Long PBASE + WRITE Address = 0048
Addr : 3515:             68  : Variable Operation Local Offset - 2 Read
Addr : 3516:          C5 4C  : Memory Op Long PBASE + WRITE Address = 004C
Addr : 3518:          38 77  : Constant 1 Bytes - 77 
Addr : 351A:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 351C: Label0006
Addr : 351C:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 351E:          38 77  : Constant 1 Bytes - 77 
Addr : 3520:             FC  : Math Op ==    
Addr : 3521: JZ Label0008
Addr : 3521:          0A 02  : jz Address = 3525 2
Addr : 3523: Label0007
Addr : 3523: JMP Label0006
Addr : 3523:          04 77  : Jmp 351C -9   
Addr : 3525: Label0008
Addr : 3525:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 3527:             35  : Constant 1 $00000000
Addr : 3528:             F9  : Math Op <     
Addr : 3529: JZ Label0009
Addr : 3529:          0A 03  : jz Address = 352E 3
Addr : 352B:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 352D:             31  : Abort value   
Addr : 352E: Label0009
Addr : 352E: Label000A
Addr : 352E:             32  : Return        
|===========================================================================|
Spin Block getcapacity with 0 Parameters and 0 Extra Stack Longs. Method 4
PUB getcapacity

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 352F:          C4 50  : Memory Op Long PBASE + READ Address = 0050
Addr : 3531:             61  : Variable Operation Local Offset - 0 Write
Addr : 3532:             32  : Return        
|===========================================================================|
Spin Block getcsd with 1 Parameters and 0 Extra Stack Longs. Method 5
PUB getcsd( buffer_address )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - buffer_address
|===========================================================================|
Addr : 3533:             64  : Variable Operation Local Offset - 1 Read
Addr : 3534:          87 54  : Memory Op Byte PBASE + ADDRESS Address = 0054
Addr : 3536:          37 03  : Constant Mask Y=3 00000010
Addr : 3538:             1C  : ByteMove(To, From, Count)
Addr : 3539:             32  : Return        
|===========================================================================|
Spin Block get_seconds with 0 Parameters and 0 Extra Stack Longs. Method 6
PUB get_seconds

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 353A:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 353C:             35  : Constant 1 $00000000
Addr : 353D:             FC  : Math Op ==    
Addr : 353E: JZ Label0002
Addr : 353E:          0A 05  : jz Address = 3545 5
Addr : 3540:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 3543:             E7  : Math Op !     
Addr : 3544:             31  : Abort value   
Addr : 3545: Label0002
Addr : 3545: Label0003
Addr : 3545:          38 74  : Constant 1 Bytes - 74 
Addr : 3547:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 3549: Label0004
Addr : 3549:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 354B:          38 74  : Constant 1 Bytes - 74 
Addr : 354D:             FC  : Math Op ==    
Addr : 354E: JZ Label0006
Addr : 354E:          0A 02  : jz Address = 3552 2
Addr : 3550: Label0005
Addr : 3550: JMP Label0004
Addr : 3550:          04 77  : Jmp 3549 -9   
Addr : 3552: Label0006
Addr : 3552:          C4 48  : Memory Op Long PBASE + READ Address = 0048
Addr : 3554:             33  : Return value  
Addr : 3555: Data : 32                       2
|===========================================================================|
Spin Block get_milliseconds with 0 Parameters and 0 Extra Stack Longs. Method 7
PUB get_milliseconds : ms

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3556:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 3558:             35  : Constant 1 $00000000
Addr : 3559:             FC  : Math Op ==    
Addr : 355A: JZ Label0002
Addr : 355A:          0A 05  : jz Address = 3561 5
Addr : 355C:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 355F:             E7  : Math Op !     
Addr : 3560:             31  : Abort value   
Addr : 3561: Label0002
Addr : 3561: Label0003
Addr : 3561:          38 74  : Constant 1 Bytes - 74 
Addr : 3563:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 3565: Label0004
Addr : 3565:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 3567:          38 74  : Constant 1 Bytes - 74 
Addr : 3569:             FC  : Math Op ==    
Addr : 356A: JZ Label0006
Addr : 356A:          0A 02  : jz Address = 356E 2
Addr : 356C: Label0005
Addr : 356C: JMP Label0004
Addr : 356C:          04 77  : Jmp 3565 -9   
Addr : 356E: Label0006
Addr : 356E:          C4 48  : Memory Op Long PBASE + READ Address = 0048
Addr : 3570:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 3573:             F4  : Math Op *     
Addr : 3574:             61  : Variable Operation Local Offset - 0 Write
Addr : 3575:          C4 4C  : Memory Op Long PBASE + READ Address = 004C
Addr : 3577:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 357A:             F4  : Math Op *     
Addr : 357B:             35  : Constant 1 $00000000
Addr : 357C:             C0  : Memory Op Long POP Address READ 
Addr : 357D:             F6  : Math Op /     
Addr : 357E:          62 4C  : Variable Operation Local Offset - 0 Assign WordMathop +
Addr : 3580:             32  : Return        
|===========================================================================|
Spin Block start_explicit with 4 Parameters and 2 Extra Stack Longs. Method 8
PUB start_explicit( DO, CLK, DI, CS ) : card_type | tmp, i

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - DO
Local Parameter DBASE:0008 - CLK
Local Parameter DBASE:000C - DI
Local Parameter DBASE:0010 - CS
Local Variable  DBASE:0014 - tmp
Local Variable  DBASE:0018 - i
|===========================================================================|
Addr : 3581:             01  : Drop Anchor   
Addr : 3582:          05 0A  : Call Sub 10   
Addr : 3584:             35  : Constant 1 $00000000
Addr : 3585:          C5 50  : Memory Op Long PBASE + WRITE Address = 0050
Addr : 3587:       39 01 F4  : Constant 2 Bytes - 01 F4 
Addr : 358A:             35  : Constant 1 $00000000
Addr : 358B:             C0  : Memory Op Long POP Address READ 
Addr : 358C:          37 02  : Constant Mask Y=2 00000008
Addr : 358E:             E2  : Math Op >>    
Addr : 358F:             EC  : Math Op +     
Addr : 3590:          3F 91  : Register op CNT Read
Addr : 3592:             EC  : Math Op +     
Addr : 3593:             23  : WaitCnt(count)
Addr : 3594:             64  : Variable Operation Local Offset - 1 Read
Addr : 3595:       C5 84 F8  : Memory Op Long PBASE + WRITE Address = 04F8
Addr : 3598:             64  : Variable Operation Local Offset - 1 Read
Addr : 3599:             F3  : Math Op |<    
Addr : 359A:       C5 85 04  : Memory Op Long PBASE + WRITE Address = 0504
Addr : 359D:             68  : Variable Operation Local Offset - 2 Read
Addr : 359E:       C5 84 FC  : Memory Op Long PBASE + WRITE Address = 04FC
Addr : 35A1:             6C  : Variable Operation Local Offset - 3 Read
Addr : 35A2:       C5 85 00  : Memory Op Long PBASE + WRITE Address = 0500
Addr : 35A5:             6C  : Variable Operation Local Offset - 3 Read
Addr : 35A6:             F3  : Math Op |<    
Addr : 35A7:       C5 85 08  : Memory Op Long PBASE + WRITE Address = 0508
Addr : 35AA:             70  : Variable Operation Local Offset - 4 Read
Addr : 35AB:             F3  : Math Op |<    
Addr : 35AC:       C5 85 0C  : Memory Op Long PBASE + WRITE Address = 050C
Addr : 35AF:          38 09  : Constant 1 Bytes - 09 
Addr : 35B1:       C5 85 14  : Memory Op Long PBASE + WRITE Address = 0514
Addr : 35B4:       C4 85 0C  : Memory Op Long PBASE + READ Address = 050C
Addr : 35B7:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 35BA:             F3  : Math Op |<    
Addr : 35BB:             EA  : Math Op |     
Addr : 35BC:       C4 85 08  : Memory Op Long PBASE + READ Address = 0508
Addr : 35BF:             EA  : Math Op |     
Addr : 35C0:       C5 85 10  : Memory Op Long PBASE + WRITE Address = 0510
Addr : 35C3:       C4 85 10  : Memory Op Long PBASE + READ Address = 0510
Addr : 35C6:       3F D6 4A  : Register op DIRA ByteMathop |
Addr : 35C9:       C4 85 10  : Memory Op Long PBASE + READ Address = 0510
Addr : 35CC:       3F D4 4A  : Register op OUTA ByteMathop |
Addr : 35CF:          37 0B  : Constant Mask Y=11 00001000
Addr : 35D1: TJZ Label0004
Addr : 35D1:          08 0A  : tjz Address = 35DD 10
Addr : 35D3: Label0002
Addr : 35D3:             68  : Variable Operation Local Offset - 2 Read
Addr : 35D4:       3D D4 1C  : Register [Bit] op OUTA VAR~~ Post-set
Addr : 35D7:             68  : Variable Operation Local Offset - 2 Read
Addr : 35D8:       3D D4 18  : Register [Bit] op OUTA VAR~ Post-clear
Addr : 35DB: Label0003
Addr : 35DB: DJNZ Label0002
Addr : 35DB:          09 76  : djnz Address = 35D3 -10
Addr : 35DD: Label0004
Addr : 35DD:          3F 91  : Register op CNT Read
Addr : 35DF:          C5 48  : Memory Op Long PBASE + WRITE Address = 0048
Addr : 35E1:          76 18  : Variable Operation Local Offset - 5 Assign VAR~ Post-clear
Addr : 35E3:             35  : Constant 1 $00000000
Addr : 35E4:             79  : Variable Operation Local Offset - 6 Write
Addr : 35E5: Label0005
Addr : 35E5:             74  : Variable Operation Local Offset - 5 Read
Addr : 35E6:             36  : Constant 2 $00000001
Addr : 35E7:             FB  : Math Op <>    
Addr : 35E8: JZ Label0008
Addr : 35E8:          0A 3B  : jz Address = 3625 59
Addr : 35EA:             00  : Drop Anchor Push 
Addr : 35EB:          37 05  : Constant Mask Y=5 00000040
Addr : 35ED:             35  : Constant 1 $00000000
Addr : 35EE:          38 95  : Constant 1 Bytes - 95 
Addr : 35F0:          05 0C  : Call Sub 12   
Addr : 35F2:             75  : Variable Operation Local Offset - 5 Write
Addr : 35F3:             74  : Variable Operation Local Offset - 5 Read
Addr : 35F4:          37 01  : Constant Mask Y=1 00000004
Addr : 35F6:             E8  : Math Op &     
Addr : 35F7: JZ Label000A
Addr : 35F7:          0A 2C  : jz Address = 3625 44
Addr : 35F9:             78  : Variable Operation Local Offset - 6 Read
Addr : 35FA:             36  : Constant 2 $00000001
Addr : 35FB:             E8  : Math Op &     
Addr : 35FC: JZ Label000C
Addr : 35FC:          0A 1F  : jz Address = 361D 31
Addr : 35FE:          37 01  : Constant Mask Y=1 00000004
Addr : 3600: TJZ Label0010
Addr : 3600:          08 05  : tjz Address = 3607 5
Addr : 3602: Label000E
Addr : 3602:             01  : Drop Anchor   
Addr : 3603:          05 0E  : Call Sub 14   
Addr : 3605: Label000F
Addr : 3605: DJNZ Label000E
Addr : 3605:          09 7B  : djnz Address = 3602 -5
Addr : 3607: Label0010
Addr : 3607:             01  : Drop Anchor   
Addr : 3608:          38 FD  : Constant 1 Bytes - FD 
Addr : 360A:          37 02  : Constant Mask Y=2 00000008
Addr : 360C:          05 0D  : Call Sub 13   
Addr : 360E:             01  : Drop Anchor   
Addr : 360F:          05 0E  : Call Sub 14   
Addr : 3611: Label0011
Addr : 3611:             00  : Drop Anchor Push 
Addr : 3612:          05 0F  : Call Sub 15   
Addr : 3614:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 3616:             FB  : Math Op <>    
Addr : 3617: JZ Label0013
Addr : 3617:          0A 02  : jz Address = 361B 2
Addr : 3619: Label0012
Addr : 3619: JMP Label0011
Addr : 3619:          04 76  : Jmp 3611 -10  
Addr : 361B: Label0013
Addr : 361B: JMP Label000D
Addr : 361B:          04 08  : Jmp 3625 8    
Addr : 361D: Label000C
Addr : 361D:             01  : Drop Anchor   
Addr : 361E:          38 4C  : Constant 1 Bytes - 4C 
Addr : 3620:             35  : Constant 1 $00000000
Addr : 3621:          38 61  : Constant 1 Bytes - 61 
Addr : 3623:          05 0C  : Call Sub 12   
Addr : 3625: Label0014
Addr : 3625: Label000D
Addr : 3625: Label000A
Addr : 3625: Label000B
Addr : 3625: Label0008
Addr : 3625: Label0009
Addr : 3625: Label0006
Addr : 3625:             35  : Constant 1 $00000000
Addr : 3626:          38 09  : Constant 1 Bytes - 09 
Addr : 3628: Repeat i Step Label0005
Addr : 3628:    7A 02 FF B9  : Variable Operation Local Offset - 6 Assign Repeat-Var loop Address= 35E5 -71
Addr : 362C: Label0007
Addr : 362C:             74  : Variable Operation Local Offset - 5 Read
Addr : 362D:             36  : Constant 2 $00000001
Addr : 362E:             FB  : Math Op <>    
Addr : 362F: JZ Label0015
Addr : 362F:          0A 04  : jz Address = 3635 4
Addr : 3631:             01  : Drop Anchor   
Addr : 3632:             34  : Constant 0 $FFFFFFFF
Addr : 3633:          05 0B  : Call Sub 11   
Addr : 3635: Label0015
Addr : 3635: Label0016
Addr : 3635:             00  : Drop Anchor Push 
Addr : 3636:          38 48  : Constant 1 Bytes - 48 
Addr : 3638:       39 01 AA  : Constant 2 Bytes - 01 AA 
Addr : 363B:          38 87  : Constant 1 Bytes - 87 
Addr : 363D:          05 0C  : Call Sub 12   
Addr : 363F:             36  : Constant 2 $00000001
Addr : 3640:             FC  : Math Op ==    
Addr : 3641: JZ Label0017
Addr : 3641:       0A 80 4B  : jz Address = 368F 75
Addr : 3644:             00  : Drop Anchor Push 
Addr : 3645:          05 0E  : Call Sub 14   
Addr : 3647:             75  : Variable Operation Local Offset - 5 Write
Addr : 3648:             74  : Variable Operation Local Offset - 5 Read
Addr : 3649:          37 28  : Constant Mask Y=40 Decrement 000001FF
Addr : 364B:             E8  : Math Op &     
Addr : 364C:       39 01 AA  : Constant 2 Bytes - 01 AA 
Addr : 364F:             FB  : Math Op <>    
Addr : 3650: JZ Label0019
Addr : 3650:          0A 05  : jz Address = 3657 5
Addr : 3652:             01  : Drop Anchor   
Addr : 3653:          37 60  : Constant Mask Y=96 Decrement Invert FFFFFFFE
Addr : 3655:          05 0B  : Call Sub 11   
Addr : 3657: Label0019
Addr : 3657: Label001A
Addr : 3657: Label001B
Addr : 3657:             00  : Drop Anchor Push 
Addr : 3658:          38 E9  : Constant 1 Bytes - E9 
Addr : 365A:          38 1E  : Constant 1 Bytes - 1E 
Addr : 365C:             F3  : Math Op |<    
Addr : 365D:          38 77  : Constant 1 Bytes - 77 
Addr : 365F:          05 0C  : Call Sub 12   
Addr : 3661: JZ Label001D
Addr : 3661:          0A 02  : jz Address = 3665 2
Addr : 3663: Label001C
Addr : 3663: JMP Label001B
Addr : 3663:          04 72  : Jmp 3657 -14  
Addr : 3665: Label001D
Addr : 3665:             00  : Drop Anchor Push 
Addr : 3666:          38 7A  : Constant 1 Bytes - 7A 
Addr : 3668:             35  : Constant 1 $00000000
Addr : 3669:          38 FD  : Constant 1 Bytes - FD 
Addr : 366B:          05 0C  : Call Sub 12   
Addr : 366D:             35  : Constant 1 $00000000
Addr : 366E:             FB  : Math Op <>    
Addr : 366F: JZ Label001E
Addr : 366F:          0A 05  : jz Address = 3676 5
Addr : 3671:             01  : Drop Anchor   
Addr : 3672:          37 40  : Constant Mask Y=64 Invert FFFFFFFD
Addr : 3674:          05 0B  : Call Sub 11   
Addr : 3676: Label001E
Addr : 3676: Label001F
Addr : 3676:             00  : Drop Anchor Push 
Addr : 3677:          05 0E  : Call Sub 14   
Addr : 3679:             75  : Variable Operation Local Offset - 5 Write
Addr : 367A:             74  : Variable Operation Local Offset - 5 Read
Addr : 367B:          38 1E  : Constant 1 Bytes - 1E 
Addr : 367D:             F3  : Math Op |<    
Addr : 367E:             E8  : Math Op &     
Addr : 367F: JZ Label0020
Addr : 367F:          0A 09  : jz Address = 368A 9
Addr : 3681:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 3683:             61  : Variable Operation Local Offset - 0 Write
Addr : 3684:             35  : Constant 1 $00000000
Addr : 3685:       C5 85 14  : Memory Op Long PBASE + WRITE Address = 0514
Addr : 3688: JMP Label0021
Addr : 3688:          04 03  : Jmp 368D 3    
Addr : 368A: Label0020
Addr : 368A:          37 00  : Constant Mask Y=0 00000002
Addr : 368C:             61  : Variable Operation Local Offset - 0 Write
Addr : 368D: Label0022
Addr : 368D: Label0021
Addr : 368D: JMP Label0018
Addr : 368D:          04 35  : Jmp 36C4 53   
Addr : 368F: Label0017
Addr : 368F:             00  : Drop Anchor Push 
Addr : 3690:          38 E9  : Constant 1 Bytes - E9 
Addr : 3692:             35  : Constant 1 $00000000
Addr : 3693:          38 E5  : Constant 1 Bytes - E5 
Addr : 3695:          05 0C  : Call Sub 12   
Addr : 3697:          37 00  : Constant Mask Y=0 00000002
Addr : 3699:             F9  : Math Op <     
Addr : 369A: JZ Label0024
Addr : 369A:          0A 11  : jz Address = 36AD 17
Addr : 369C:          37 00  : Constant Mask Y=0 00000002
Addr : 369E:             61  : Variable Operation Local Offset - 0 Write
Addr : 369F: Label0026
Addr : 369F:             00  : Drop Anchor Push 
Addr : 36A0:          38 E9  : Constant 1 Bytes - E9 
Addr : 36A2:             35  : Constant 1 $00000000
Addr : 36A3:          38 E5  : Constant 1 Bytes - E5 
Addr : 36A5:          05 0C  : Call Sub 12   
Addr : 36A7: JZ Label0028
Addr : 36A7:          0A 02  : jz Address = 36AB 2
Addr : 36A9: Label0027
Addr : 36A9: JMP Label0026
Addr : 36A9:          04 74  : Jmp 369F -12  
Addr : 36AB: Label0028
Addr : 36AB: JMP Label0025
Addr : 36AB:          04 0E  : Jmp 36BB 14   
Addr : 36AD: Label0024
Addr : 36AD:             36  : Constant 2 $00000001
Addr : 36AE:             61  : Variable Operation Local Offset - 0 Write
Addr : 36AF: Label002A
Addr : 36AF:             00  : Drop Anchor Push 
Addr : 36B0:          38 41  : Constant 1 Bytes - 41 
Addr : 36B2:             35  : Constant 1 $00000000
Addr : 36B3:          38 F9  : Constant 1 Bytes - F9 
Addr : 36B5:          05 0C  : Call Sub 12   
Addr : 36B7: JZ Label002C
Addr : 36B7:          0A 02  : jz Address = 36BB 2
Addr : 36B9: Label002B
Addr : 36B9: JMP Label002A
Addr : 36B9:          04 74  : Jmp 36AF -12  
Addr : 36BB: Label002C
Addr : 36BB: Label0029
Addr : 36BB: Label0025
Addr : 36BB:             01  : Drop Anchor   
Addr : 36BC:          38 50  : Constant 1 Bytes - 50 
Addr : 36BE:          37 08  : Constant Mask Y=8 00000200
Addr : 36C0:          38 15  : Constant 1 Bytes - 15 
Addr : 36C2:          05 0C  : Call Sub 12   
Addr : 36C4: Label0023
Addr : 36C4: Label0018
Addr : 36C4:             00  : Drop Anchor Push 
Addr : 36C5:          38 7B  : Constant 1 Bytes - 7B 
Addr : 36C7:             35  : Constant 1 $00000000
Addr : 36C8:          38 91  : Constant 1 Bytes - 91 
Addr : 36CA:          05 0C  : Call Sub 12   
Addr : 36CC:             35  : Constant 1 $00000000
Addr : 36CD:             FB  : Math Op <>    
Addr : 36CE: JZ Label002D
Addr : 36CE:          0A 05  : jz Address = 36D5 5
Addr : 36D0:             01  : Drop Anchor   
Addr : 36D1:          37 41  : Constant Mask Y=65 Invert FFFFFFFB
Addr : 36D3:          05 0B  : Call Sub 11   
Addr : 36D5: Label002D
Addr : 36D5: Label002E
Addr : 36D5:             00  : Drop Anchor Push 
Addr : 36D6:          38 4D  : Constant 1 Bytes - 4D 
Addr : 36D8:             35  : Constant 1 $00000000
Addr : 36D9:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 36DB:          05 0C  : Call Sub 12   
Addr : 36DD:             35  : Constant 1 $00000000
Addr : 36DE:             FB  : Math Op <>    
Addr : 36DF: JZ Label002F
Addr : 36DF:          0A 06  : jz Address = 36E7 6
Addr : 36E1:             01  : Drop Anchor   
Addr : 36E2:          38 05  : Constant 1 Bytes - 05 
Addr : 36E4:             E7  : Math Op !     
Addr : 36E5:          05 0B  : Call Sub 11   
Addr : 36E7: Label002F
Addr : 36E7: Label0030
Addr : 36E7:             01  : Drop Anchor   
Addr : 36E8:          05 0F  : Call Sub 15   
Addr : 36EA:             00  : Drop Anchor Push 
Addr : 36EB:          38 49  : Constant 1 Bytes - 49 
Addr : 36ED:             35  : Constant 1 $00000000
Addr : 36EE:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 36F0:          05 0C  : Call Sub 12   
Addr : 36F2:             35  : Constant 1 $00000000
Addr : 36F3:             FB  : Math Op <>    
Addr : 36F4: JZ Label0031
Addr : 36F4:          0A 06  : jz Address = 36FC 6
Addr : 36F6:             01  : Drop Anchor   
Addr : 36F7:          38 06  : Constant 1 Bytes - 06 
Addr : 36F9:             E7  : Math Op !     
Addr : 36FA:          05 0B  : Call Sub 11   
Addr : 36FC: Label0031
Addr : 36FC: Label0032
Addr : 36FC:          37 04  : Constant Mask Y=4 00000020
Addr : 36FE:             79  : Variable Operation Local Offset - 6 Write
Addr : 36FF: Label0033
Addr : 36FF:             00  : Drop Anchor Push 
Addr : 3700:          05 0F  : Call Sub 15   
Addr : 3702:          38 FE  : Constant 1 Bytes - FE 
Addr : 3704:             FB  : Math Op <>    
Addr : 3705: JZ Label0035
Addr : 3705:          0A 0D  : jz Address = 3714 13
Addr : 3707:             78  : Variable Operation Local Offset - 6 Read
Addr : 3708:             35  : Constant 1 $00000000
Addr : 3709:             FC  : Math Op ==    
Addr : 370A: JZ Label0036
Addr : 370A:          0A 06  : jz Address = 3712 6
Addr : 370C:             01  : Drop Anchor   
Addr : 370D:          38 06  : Constant 1 Bytes - 06 
Addr : 370F:             E7  : Math Op !     
Addr : 3710:          05 0B  : Call Sub 11   
Addr : 3712: Label0036
Addr : 3712: Label0037
Addr : 3712: Label0034
Addr : 3712: JMP Label0033
Addr : 3712:          04 6B  : Jmp 36FF -21  
Addr : 3714: Label0035
Addr : 3714:             35  : Constant 1 $00000000
Addr : 3715:             79  : Variable Operation Local Offset - 6 Write
Addr : 3716: Label0038
Addr : 3716:             00  : Drop Anchor Push 
Addr : 3717:          05 0F  : Call Sub 15   
Addr : 3719:             78  : Variable Operation Local Offset - 6 Read
Addr : 371A:          95 54  : Memory Op Byte PBASE + POP Index WRITE Address = 0054
Addr : 371C: Label0039
Addr : 371C:             35  : Constant 1 $00000000
Addr : 371D:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 371F: Repeat i Step Label0038
Addr : 371F:       7A 02 74  : Variable Operation Local Offset - 6 Assign Repeat-Var loop Address= 3716 -12
Addr : 3722: Label003A
Addr : 3722:             01  : Drop Anchor   
Addr : 3723:          05 0F  : Call Sub 15   
Addr : 3725:             01  : Drop Anchor   
Addr : 3726:          05 0F  : Call Sub 15   
Addr : 3728: Constant Address of Label003B
Addr : 3728:       39 08 4E  : Constant 2 Bytes - 08 4E 
Addr : 372B:             60  : Variable Operation Local Offset - 0 Read
Addr : 372C:             36  : Constant 2 $00000001
Addr : 372D: Case_Value Label003C
Addr : 372D:          0D 0D  : Value Case Address = 373C 13
Addr : 372F:          37 00  : Constant Mask Y=0 00000002
Addr : 3731: Case_Value Label003C
Addr : 3731:          0D 09  : Value Case Address = 373C 9
Addr : 3733:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 3735: Case_Value Label003D
Addr : 3735:       0D 80 55  : Value Case Address = 378D 85
Addr : 3738:             35  : Constant 1 $00000000
Addr : 3739:          C5 50  : Memory Op Long PBASE + WRITE Address = 0050
Addr : 373B: CaseDone Label003D
Addr : 373B:             0C  : Casedone      
Addr : 373C: Label003C
Addr : 373C:          38 09  : Constant 1 Bytes - 09 
Addr : 373E:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3740:             75  : Variable Operation Local Offset - 5 Write
Addr : 3741:             74  : Variable Operation Local Offset - 5 Read
Addr : 3742:          37 02  : Constant Mask Y=2 00000008
Addr : 3744:             E3  : Math Op <<    
Addr : 3745:          38 0A  : Constant 1 Bytes - 0A 
Addr : 3747:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3749:             EA  : Math Op |     
Addr : 374A:             75  : Variable Operation Local Offset - 5 Write
Addr : 374B:             74  : Variable Operation Local Offset - 5 Read
Addr : 374C:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 374E:             E2  : Math Op >>    
Addr : 374F:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 3751:             E8  : Math Op &     
Addr : 3752:             79  : Variable Operation Local Offset - 6 Write
Addr : 3753:          38 05  : Constant 1 Bytes - 05 
Addr : 3755:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3757:             75  : Variable Operation Local Offset - 5 Write
Addr : 3758:             74  : Variable Operation Local Offset - 5 Read
Addr : 3759:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 375B:             E8  : Math Op &     
Addr : 375C:          7A 4C  : Variable Operation Local Offset - 6 Assign WordMathop +
Addr : 375E:          38 06  : Constant 1 Bytes - 06 
Addr : 3760:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3762:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 3764:             E8  : Math Op &     
Addr : 3765:             75  : Variable Operation Local Offset - 5 Write
Addr : 3766:             74  : Variable Operation Local Offset - 5 Read
Addr : 3767:          37 02  : Constant Mask Y=2 00000008
Addr : 3769:             E3  : Math Op <<    
Addr : 376A:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 376C:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 376E:             EA  : Math Op |     
Addr : 376F:             75  : Variable Operation Local Offset - 5 Write
Addr : 3770:             74  : Variable Operation Local Offset - 5 Read
Addr : 3771:          37 02  : Constant Mask Y=2 00000008
Addr : 3773:             E3  : Math Op <<    
Addr : 3774:          37 02  : Constant Mask Y=2 00000008
Addr : 3776:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3778:             EA  : Math Op |     
Addr : 3779:             75  : Variable Operation Local Offset - 5 Write
Addr : 377A:             74  : Variable Operation Local Offset - 5 Read
Addr : 377B:          38 06  : Constant 1 Bytes - 06 
Addr : 377D:             E2  : Math Op >>    
Addr : 377E:             75  : Variable Operation Local Offset - 5 Write
Addr : 377F:             74  : Variable Operation Local Offset - 5 Read
Addr : 3780:             36  : Constant 2 $00000001
Addr : 3781:             EC  : Math Op +     
Addr : 3782:          37 00  : Constant Mask Y=0 00000002
Addr : 3784:             78  : Variable Operation Local Offset - 6 Read
Addr : 3785:             EC  : Math Op +     
Addr : 3786:             E3  : Math Op <<    
Addr : 3787:          38 09  : Constant 1 Bytes - 09 
Addr : 3789:             E2  : Math Op >>    
Addr : 378A:          C5 50  : Memory Op Long PBASE + WRITE Address = 0050
Addr : 378C: CaseDone Label003C
Addr : 378C:             0C  : Casedone      
Addr : 378D: Label003D
Addr : 378D:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 378F:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3791:          37 25  : Constant Mask Y=37 Decrement 0000003F
Addr : 3793:             E8  : Math Op &     
Addr : 3794:             75  : Variable Operation Local Offset - 5 Write
Addr : 3795:             74  : Variable Operation Local Offset - 5 Read
Addr : 3796:          37 02  : Constant Mask Y=2 00000008
Addr : 3798:             E3  : Math Op <<    
Addr : 3799:          37 02  : Constant Mask Y=2 00000008
Addr : 379B:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 379D:             EA  : Math Op |     
Addr : 379E:             75  : Variable Operation Local Offset - 5 Write
Addr : 379F:             74  : Variable Operation Local Offset - 5 Read
Addr : 37A0:          37 02  : Constant Mask Y=2 00000008
Addr : 37A2:             E3  : Math Op <<    
Addr : 37A3:          38 09  : Constant 1 Bytes - 09 
Addr : 37A5:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 37A7:             EA  : Math Op |     
Addr : 37A8:             75  : Variable Operation Local Offset - 5 Write
Addr : 37A9:             74  : Variable Operation Local Offset - 5 Read
Addr : 37AA:             36  : Constant 2 $00000001
Addr : 37AB:             EC  : Math Op +     
Addr : 37AC:          37 09  : Constant Mask Y=9 00000400
Addr : 37AE:             F4  : Math Op *     
Addr : 37AF:          C5 50  : Memory Op Long PBASE + WRITE Address = 0050
Addr : 37B1: CaseDone Label003D
Addr : 37B1:             0C  : Casedone      
Addr : 37B2: Label003B
Addr : 37B2:       C4 85 0C  : Memory Op Long PBASE + READ Address = 050C
Addr : 37B5:       3F D4 4A  : Register op OUTA ByteMathop |
Addr : 37B8:          37 01  : Constant Mask Y=1 00000004
Addr : 37BA:          38 1A  : Constant 1 Bytes - 1A 
Addr : 37BC:             E3  : Math Op <<    
Addr : 37BD:             6C  : Variable Operation Local Offset - 3 Read
Addr : 37BE:             35  : Constant 1 $00000000
Addr : 37BF:             E3  : Math Op <<    
Addr : 37C0:             EA  : Math Op |     
Addr : 37C1:       C5 85 20  : Memory Op Long PBASE + WRITE Address = 0520
Addr : 37C4:          37 01  : Constant Mask Y=1 00000004
Addr : 37C6:          38 1A  : Constant 1 Bytes - 1A 
Addr : 37C8:             E3  : Math Op <<    
Addr : 37C9:             68  : Variable Operation Local Offset - 2 Read
Addr : 37CA:             35  : Constant 1 $00000000
Addr : 37CB:             E3  : Math Op <<    
Addr : 37CC:             EA  : Math Op |     
Addr : 37CD:       C5 85 28  : Memory Op Long PBASE + WRITE Address = 0528
Addr : 37D0:             35  : Constant 1 $00000000
Addr : 37D1:             C0  : Memory Op Long POP Address READ 
Addr : 37D2:          38 06  : Constant 1 Bytes - 06 
Addr : 37D4:             E2  : Math Op >>    
Addr : 37D5:       C5 85 24  : Memory Op Long PBASE + WRITE Address = 0524
Addr : 37D8:          38 7D  : Constant 1 Bytes - 7D 
Addr : 37DA:       C5 85 4C  : Memory Op Long PBASE + WRITE Address = 054C
Addr : 37DD:             35  : Constant 1 $00000000
Addr : 37DE:             C0  : Memory Op Long POP Address READ 
Addr : 37DF:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 37E2:       C4 85 4C  : Memory Op Long PBASE + READ Address = 054C
Addr : 37E5:             F6  : Math Op /     
Addr : 37E6:             F6  : Math Op /     
Addr : 37E7:       C5 85 4C  : Memory Op Long PBASE + WRITE Address = 054C
Addr : 37EA:          C7 4C  : Memory Op Long PBASE + ADDRESS Address = 004C
Addr : 37EC:       C5 85 18  : Memory Op Long PBASE + WRITE Address = 0518
Addr : 37EF:          C7 48  : Memory Op Long PBASE + ADDRESS Address = 0048
Addr : 37F1:       C5 85 1C  : Memory Op Long PBASE + WRITE Address = 051C
Addr : 37F4:             35  : Constant 1 $00000000
Addr : 37F5:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 37F7:             34  : Constant 0 $FFFFFFFF
Addr : 37F8:          C7 64  : Memory Op Long PBASE + ADDRESS Address = 0064
Addr : 37FA:          C7 44  : Memory Op Long PBASE + ADDRESS Address = 0044
Addr : 37FC:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 37FD:             36  : Constant 2 $00000001
Addr : 37FE:             EC  : Math Op +     
Addr : 37FF:          C5 40  : Memory Op Long PBASE + WRITE Address = 0040
Addr : 3801:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 3803:             35  : Constant 1 $00000000
Addr : 3804:             FC  : Math Op ==    
Addr : 3805: JZ Label003E
Addr : 3805:          0A 07  : jz Address = 380E 7
Addr : 3807:             01  : Drop Anchor   
Addr : 3808:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 380B:             E7  : Math Op !     
Addr : 380C:          05 0B  : Call Sub 11   
Addr : 380E: Label003E
Addr : 380E: Label003F
Addr : 380E: Label0040
Addr : 380E:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 3810:             34  : Constant 0 $FFFFFFFF
Addr : 3811:             FB  : Math Op <>    
Addr : 3812: JZ Label0042
Addr : 3812:          0A 02  : jz Address = 3816 2
Addr : 3814: Label0041
Addr : 3814: JMP Label0040
Addr : 3814:          04 78  : Jmp 380E -8   
Addr : 3816: Label0042
Addr : 3816:       C4 85 10  : Memory Op Long PBASE + READ Address = 0510
Addr : 3819:             E7  : Math Op !     
Addr : 381A:       3F D6 48  : Register op DIRA BitMathop &
Addr : 381D:             32  : Return        
|===========================================================================|
Spin Block release with 0 Parameters and 0 Extra Stack Longs. Method 9
PUB release

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 381E:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 3820: JZ Label0002
Addr : 3820:          0A 0D  : jz Address = 382F 13
Addr : 3822:          38 7A  : Constant 1 Bytes - 7A 
Addr : 3824:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 3826: Label0004
Addr : 3826:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 3828:          38 7A  : Constant 1 Bytes - 7A 
Addr : 382A:             FC  : Math Op ==    
Addr : 382B: JZ Label0006
Addr : 382B:          0A 02  : jz Address = 382F 2
Addr : 382D: Label0005
Addr : 382D: JMP Label0004
Addr : 382D:          04 77  : Jmp 3826 -9   
Addr : 382F: Label0006
Addr : 382F: Label0002
Addr : 382F: Label0003
Addr : 382F:             32  : Return        
|===========================================================================|
Spin Block stop with 0 Parameters and 0 Extra Stack Longs. Method 10
PUB stop

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3830:             01  : Drop Anchor   
Addr : 3831:          05 09  : Call Sub 9    
Addr : 3833:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 3835: JZ Label0002
Addr : 3835:          0A 06  : jz Address = 383D 6
Addr : 3837:       C6 40 98  : Memory Op Long PBASE + ASSIGN Address = 0040 VAR~ Post-clear Push
Addr : 383A:             36  : Constant 2 $00000001
Addr : 383B:             ED  : Math Op -     
Addr : 383C:             21  : CogStop(id)   
Addr : 383D: Label0002
Addr : 383D: Label0003
Addr : 383D:             32  : Return        
|===========================================================================|
Spin Block crash with 1 Parameters and 0 Extra Stack Longs. Method 11
PRI crash( abort_code )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - abort_code
|===========================================================================|
Addr : 383E:       C4 85 10  : Memory Op Long PBASE + READ Address = 0510
Addr : 3841:             E7  : Math Op !     
Addr : 3842:       3F D6 48  : Register op DIRA BitMathop &
Addr : 3845:             64  : Variable Operation Local Offset - 1 Read
Addr : 3846:             31  : Abort value   
Addr : 3847: Data : 32                       2
|===========================================================================|
Spin Block send_cmd_slow with 3 Parameters and 1 Extra Stack Longs. Method 12
PRI send_cmd_slow( cmd, val, crc ) : reply | time_stamp

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - cmd
Local Parameter DBASE:0008 - val
Local Parameter DBASE:000C - crc
Local Variable  DBASE:0010 - time_stamp
|===========================================================================|
Addr : 3848:             64  : Variable Operation Local Offset - 1 Read
Addr : 3849:          37 06  : Constant Mask Y=6 00000080
Addr : 384B:             E8  : Math Op &     
Addr : 384C: JZ Label0002
Addr : 384C:          0A 14  : jz Address = 3862 20
Addr : 384E:          37 26  : Constant Mask Y=38 Decrement 0000007F
Addr : 3850:          66 48  : Variable Operation Local Offset - 1 Assign BitMathop &
Addr : 3852:             00  : Drop Anchor Push 
Addr : 3853:          38 77  : Constant 1 Bytes - 77 
Addr : 3855:             35  : Constant 1 $00000000
Addr : 3856:          38 65  : Constant 1 Bytes - 65 
Addr : 3858:          05 0C  : Call Sub 12   
Addr : 385A:             61  : Variable Operation Local Offset - 0 Write
Addr : 385B:             60  : Variable Operation Local Offset - 0 Read
Addr : 385C:             36  : Constant 2 $00000001
Addr : 385D:             FA  : Math Op >     
Addr : 385E: JZ Label0004
Addr : 385E:          0A 02  : jz Address = 3862 2
Addr : 3860:             60  : Variable Operation Local Offset - 0 Read
Addr : 3861:             33  : Return value  
Addr : 3862: Label0004
Addr : 3862: Label0005
Addr : 3862: Label0002
Addr : 3862: Label0003
Addr : 3862:       C4 85 0C  : Memory Op Long PBASE + READ Address = 050C
Addr : 3865:       3F D4 4A  : Register op OUTA ByteMathop |
Addr : 3868:       C4 85 0C  : Memory Op Long PBASE + READ Address = 050C
Addr : 386B:             E7  : Math Op !     
Addr : 386C:       3F D4 48  : Register op OUTA BitMathop &
Addr : 386F:             01  : Drop Anchor   
Addr : 3870:          05 0E  : Call Sub 14   
Addr : 3872:             01  : Drop Anchor   
Addr : 3873:             64  : Variable Operation Local Offset - 1 Read
Addr : 3874:          37 02  : Constant Mask Y=2 00000008
Addr : 3876:          05 0D  : Call Sub 13   
Addr : 3878:             01  : Drop Anchor   
Addr : 3879:             68  : Variable Operation Local Offset - 2 Read
Addr : 387A:          37 04  : Constant Mask Y=4 00000020
Addr : 387C:          05 0D  : Call Sub 13   
Addr : 387E:             01  : Drop Anchor   
Addr : 387F:             6C  : Variable Operation Local Offset - 3 Read
Addr : 3880:          37 02  : Constant Mask Y=2 00000008
Addr : 3882:          05 0D  : Call Sub 13   
Addr : 3884:             64  : Variable Operation Local Offset - 1 Read
Addr : 3885:          38 4C  : Constant 1 Bytes - 4C 
Addr : 3887:             FC  : Math Op ==    
Addr : 3888: JZ Label0006
Addr : 3888:          0A 03  : jz Address = 388D 3
Addr : 388A:             01  : Drop Anchor   
Addr : 388B:          05 0F  : Call Sub 15   
Addr : 388D: Label0006
Addr : 388D: Label0007
Addr : 388D:          38 09  : Constant 1 Bytes - 09 
Addr : 388F:             71  : Variable Operation Local Offset - 4 Write
Addr : 3890: Label0008
Addr : 3890:             00  : Drop Anchor Push 
Addr : 3891:          05 0F  : Call Sub 15   
Addr : 3893:             61  : Variable Operation Local Offset - 0 Write
Addr : 3894: Label0009
Addr : 3894:             60  : Variable Operation Local Offset - 0 Read
Addr : 3895:          37 06  : Constant Mask Y=6 00000080
Addr : 3897:             E8  : Math Op &     
Addr : 3898:          72 BE  : Variable Operation Local Offset - 4 Assign VAR-- post-dec Long Push
Addr : 389A:             F0  : Math Op AND   
Addr : 389B: JNZ Label0008
Addr : 389B:          0B 73  : jnz Address = 3890 -13
Addr : 389D: Label000A
Addr : 389D:             32  : Return        
|===========================================================================|
Spin Block send_slow with 2 Parameters and 0 Extra Stack Longs. Method 13
PRI send_slow( value, bits_to_send )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - bits_to_send
|===========================================================================|
Addr : 389E:             68  : Variable Operation Local Offset - 2 Read
Addr : 389F:          66 4F  : Variable Operation Local Offset - 1 Assign LongMathop ><
Addr : 38A1:             68  : Variable Operation Local Offset - 2 Read
Addr : 38A2: TJZ Label0004
Addr : 38A2:          08 17  : tjz Address = 38BB 23
Addr : 38A4: Label0002
Addr : 38A4:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 38A7:       3D D4 18  : Register [Bit] op OUTA VAR~ Post-clear
Addr : 38AA:             64  : Variable Operation Local Offset - 1 Read
Addr : 38AB:       C4 85 00  : Memory Op Long PBASE + READ Address = 0500
Addr : 38AE:          3D B4  : Register [Bit] op OUTA Write
Addr : 38B0:             36  : Constant 2 $00000001
Addr : 38B1:          66 42  : Variable Operation Local Offset - 1 Assign ByteMathop >>
Addr : 38B3:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 38B6:       3D D4 1C  : Register [Bit] op OUTA VAR~~ Post-set
Addr : 38B9: Label0003
Addr : 38B9: DJNZ Label0002
Addr : 38B9:          09 69  : djnz Address = 38A4 -23
Addr : 38BB: Label0004
Addr : 38BB:             32  : Return        
|===========================================================================|
Spin Block read_32_slow with 0 Parameters and 0 Extra Stack Longs. Method 14
PRI read_32_slow : r

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 38BC:          37 01  : Constant Mask Y=1 00000004
Addr : 38BE: TJZ Label0004
Addr : 38BE:          08 0B  : tjz Address = 38CB 11
Addr : 38C0: Label0002
Addr : 38C0:          37 02  : Constant Mask Y=2 00000008
Addr : 38C2:          62 43  : Variable Operation Local Offset - 0 Assign ByteMathop <<
Addr : 38C4:             00  : Drop Anchor Push 
Addr : 38C5:          05 0F  : Call Sub 15   
Addr : 38C7:          62 4A  : Variable Operation Local Offset - 0 Assign ByteMathop |
Addr : 38C9: Label0003
Addr : 38C9: DJNZ Label0002
Addr : 38C9:          09 75  : djnz Address = 38C0 -11
Addr : 38CB: Label0004
Addr : 38CB:             32  : Return        
|===========================================================================|
Spin Block read_slow with 0 Parameters and 0 Extra Stack Longs. Method 15
PRI read_slow : r

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 38CC:       C4 85 00  : Memory Op Long PBASE + READ Address = 0500
Addr : 38CF:       3D D4 1C  : Register [Bit] op OUTA VAR~~ Post-set
Addr : 38D2:          37 02  : Constant Mask Y=2 00000008
Addr : 38D4: TJZ Label0004
Addr : 38D4:          08 17  : tjz Address = 38ED 23
Addr : 38D6: Label0002
Addr : 38D6:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 38D9:       3D D4 18  : Register [Bit] op OUTA VAR~ Post-clear
Addr : 38DC:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 38DF:       3D D4 1C  : Register [Bit] op OUTA VAR~~ Post-set
Addr : 38E2:             60  : Variable Operation Local Offset - 0 Read
Addr : 38E3:       C4 84 F8  : Memory Op Long PBASE + READ Address = 04F8
Addr : 38E6:          3D 92  : Register [Bit] op INA Read
Addr : 38E8:             EC  : Math Op +     
Addr : 38E9:          62 4C  : Variable Operation Local Offset - 0 Assign WordMathop +
Addr : 38EB: Label0003
Addr : 38EB: DJNZ Label0002
Addr : 38EB:          09 69  : djnz Address = 38D6 -23
Addr : 38ED: Label0004
Addr : 38ED:          3F 91  : Register op CNT Read
Addr : 38EF:          C4 48  : Memory Op Long PBASE + READ Address = 0048
Addr : 38F1:             ED  : Math Op -     
Addr : 38F2:             35  : Constant 1 $00000000
Addr : 38F3:             C0  : Memory Op Long POP Address READ 
Addr : 38F4:          37 00  : Constant Mask Y=0 00000002
Addr : 38F6:             E3  : Math Op <<    
Addr : 38F7:             FA  : Math Op >     
Addr : 38F8: JZ Label0005
Addr : 38F8:          0A 07  : jz Address = 3901 7
Addr : 38FA:             01  : Drop Anchor   
Addr : 38FB:       39 03 E7  : Constant 2 Bytes - 03 E7 
Addr : 38FE:             E7  : Math Op !     
Addr : 38FF:          05 0B  : Call Sub 11   
Addr : 3901: Label0005
Addr : 3901: Label0006
Addr : 3901:             32  : Return        
|===========================================================================|
Object Parallax Serial Terminal Null
Object Base is 3904
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
Spin Block Start with 1 Parameters and 0 Extra Stack Longs. Method 1
PUB Start(baudrate)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - baudrate
|===========================================================================|
Addr : 398C:             32  : Return        
|===========================================================================|
Spin Block StartRxTx with 4 Parameters and 0 Extra Stack Longs. Method 2
PUB StartRxTx(rxpin, txpin, mode, baudrate)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - rxpin
Local Parameter DBASE:0008 - txpin
Local Parameter DBASE:000C - mode
Local Parameter DBASE:0010 - baudrate
|===========================================================================|
Addr : 398D:             32  : Return        
|===========================================================================|
Spin Block Stop with 0 Parameters and 0 Extra Stack Longs. Method 3
PUB Stop

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 398E:             32  : Return        
|===========================================================================|
Spin Block Char with 1 Parameters and 0 Extra Stack Longs. Method 4
PUB Char(bytechr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - bytechr
|===========================================================================|
Addr : 398F:             32  : Return        
|===========================================================================|
Spin Block Chars with 2 Parameters and 0 Extra Stack Longs. Method 5
PUB Chars(bytechr, count)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - bytechr
Local Parameter DBASE:0008 - count
|===========================================================================|
Addr : 3990:             32  : Return        
|===========================================================================|
Spin Block CharIn with 0 Parameters and 0 Extra Stack Longs. Method 6
PUB CharIn

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3991:             32  : Return        
|===========================================================================|
Spin Block Str with 1 Parameters and 0 Extra Stack Longs. Method 7
PUB Str(stringptr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - stringptr
|===========================================================================|
Addr : 3992:             32  : Return        
|===========================================================================|
Spin Block StrIn with 1 Parameters and 0 Extra Stack Longs. Method 8
PUB StrIn(stringptr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - stringptr
|===========================================================================|
Addr : 3993:             32  : Return        
|===========================================================================|
Spin Block StrInMax with 2 Parameters and 0 Extra Stack Longs. Method 9
PUB StrInMax(stringptr, maxcount)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - stringptr
Local Parameter DBASE:0008 - maxcount
|===========================================================================|
Addr : 3994:             32  : Return        
|===========================================================================|
Spin Block Dec with 1 Parameters and 2 Extra Stack Longs. Method 10
PUB Dec(value) | i, x

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Variable  DBASE:0008 - i
Local Variable  DBASE:000C - x
|===========================================================================|
Addr : 3995:             32  : Return        
|===========================================================================|
Spin Block DecIn with 0 Parameters and 0 Extra Stack Longs. Method 11
PUB DecIn : value

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3996:             32  : Return        
|===========================================================================|
Spin Block Bin with 2 Parameters and 0 Extra Stack Longs. Method 12
PUB Bin(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 3997:             32  : Return        
|===========================================================================|
Spin Block BinIn with 0 Parameters and 0 Extra Stack Longs. Method 13
PUB BinIn : value

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3998:             32  : Return        
|===========================================================================|
Spin Block Hex with 2 Parameters and 0 Extra Stack Longs. Method 14
PUB Hex(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 3999:             32  : Return        
|===========================================================================|
Spin Block HexIn with 0 Parameters and 0 Extra Stack Longs. Method 15
PUB HexIn : value

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 399A:             32  : Return        
|===========================================================================|
Spin Block Clear with 0 Parameters and 0 Extra Stack Longs. Method 16
PUB Clear

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 399B:             32  : Return        
|===========================================================================|
Spin Block ClearEnd with 0 Parameters and 0 Extra Stack Longs. Method 17
PUB ClearEnd

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 399C:             32  : Return        
|===========================================================================|
Spin Block ClearBelow with 0 Parameters and 0 Extra Stack Longs. Method 18
PUB ClearBelow

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 399D:             32  : Return        
|===========================================================================|
Spin Block Home with 0 Parameters and 0 Extra Stack Longs. Method 19
PUB Home

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 399E:             32  : Return        
|===========================================================================|
Spin Block Position with 2 Parameters and 0 Extra Stack Longs. Method 20
PUB Position(x, y)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - x
Local Parameter DBASE:0008 - y
|===========================================================================|
Addr : 399F:             32  : Return        
|===========================================================================|
Spin Block PositionX with 1 Parameters and 0 Extra Stack Longs. Method 21
PUB PositionX(x)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - x
|===========================================================================|
Addr : 39A0:             32  : Return        
|===========================================================================|
Spin Block PositionY with 1 Parameters and 0 Extra Stack Longs. Method 22
PUB PositionY(y)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - y
|===========================================================================|
Addr : 39A1:             32  : Return        
|===========================================================================|
Spin Block NewLine with 0 Parameters and 0 Extra Stack Longs. Method 23
PUB NewLine

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 39A2:             32  : Return        
|===========================================================================|
Spin Block LineFeed with 0 Parameters and 0 Extra Stack Longs. Method 24
PUB LineFeed

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 39A3:             32  : Return        
|===========================================================================|
Spin Block MoveLeft with 1 Parameters and 0 Extra Stack Longs. Method 25
PUB MoveLeft(x)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - x
|===========================================================================|
Addr : 39A4:             32  : Return        
|===========================================================================|
Spin Block MoveRight with 1 Parameters and 0 Extra Stack Longs. Method 26
PUB MoveRight(x)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - x
|===========================================================================|
Addr : 39A5:             32  : Return        
|===========================================================================|
Spin Block MoveUp with 1 Parameters and 0 Extra Stack Longs. Method 27
PUB MoveUp(y)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - y
|===========================================================================|
Addr : 39A6:             32  : Return        
|===========================================================================|
Spin Block MoveDown with 1 Parameters and 0 Extra Stack Longs. Method 28
PUB MoveDown(y)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - y
|===========================================================================|
Addr : 39A7:             32  : Return        
|===========================================================================|
Spin Block Tab with 0 Parameters and 0 Extra Stack Longs. Method 29
PUB Tab

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 39A8:             32  : Return        
|===========================================================================|
Spin Block Backspace with 0 Parameters and 0 Extra Stack Longs. Method 30
PUB Backspace

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 39A9:             32  : Return        
|===========================================================================|
Spin Block Beep with 0 Parameters and 0 Extra Stack Longs. Method 31
PUB Beep

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 39AA:             32  : Return        
|===========================================================================|
Spin Block RxCount with 0 Parameters and 0 Extra Stack Longs. Method 32
PUB RxCount : count

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 39AB:             32  : Return        
|===========================================================================|
Spin Block RxFlush with 0 Parameters and 0 Extra Stack Longs. Method 33
PUB RxFlush

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 39AC:             32  : Return        
|===========================================================================|
Object FullDuplexSerial
Object Base is 39B0
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0004 Variable cog
VBASE : 0004 LONG Size 0004 Variable rx_head
VBASE : 0008 LONG Size 0004 Variable rx_tail
VBASE : 000C LONG Size 0004 Variable tx_head
VBASE : 0010 LONG Size 0004 Variable tx_tail
VBASE : 0014 LONG Size 0004 Variable rx_pin
VBASE : 0018 LONG Size 0004 Variable tx_pin
VBASE : 001C LONG Size 0004 Variable rxtx_mode
VBASE : 0020 LONG Size 0004 Variable bit_ticks
VBASE : 0024 LONG Size 0004 Variable buffer_ptr
VBASE : 0028 BYTE Size 0010 Variable rx_buffer
VBASE : 0038 BYTE Size 0010 Variable tx_buffer
|===========================================================================|
Object DAT Blocks
|===========================================================================|
39E8(0000)             |                         org
39E8(0000) F0 A9 BC A0 | entry                   mov     t1,par                'get structure address
39EC(0001) 10 A8 FC 80 |                         add     t1,#4 << 2            'skip past heads and tails
39F0(0002) 54 AA BC 08 |                         rdlong  t2,t1                 'get rx_pin
39F4(0003) 01 B2 FC A0 |                         mov     rxmask,#1
39F8(0004) 55 B2 BC 2C |                         shl     rxmask,t2
39FC(0005) 04 A8 FC 80 |                         add     t1,#4                 'get tx_pin
3A00(0006) 54 AA BC 08 |                         rdlong  t2,t1
3A04(0007) 01 BE FC A0 |                         mov     txmask,#1
3A08(0008) 55 BE BC 2C |                         shl     txmask,t2
3A0C(0009) 04 A8 FC 80 |                         add     t1,#4                 'get rxtx_mode
3A10(000A) 54 AE BC 08 |                         rdlong  rxtxmode,t1
3A14(000B) 04 A8 FC 80 |                         add     t1,#4                 'get bit_ticks
3A18(000C) 54 B0 BC 08 |                         rdlong  bitticks,t1
3A1C(000D) 04 A8 FC 80 |                         add     t1,#4                 'get buffer_ptr
3A20(000E) 54 B4 BC 08 |                         rdlong  rxbuff,t1
3A24(000F) 5A C0 BC A0 |                         mov     txbuff,rxbuff
3A28(0010) 10 C0 FC 80 |                         add     txbuff,#16
3A2C(0011) 04 AE 7C 62 |                         test    rxtxmode,#%100  wz    'init tx pin according to mode
3A30(0012) 02 AE 7C 61 |                         test    rxtxmode,#%010  wc
3A34(0013) 5F E8 9B 68 |         if_z_ne_c       or      outa,txmask
3A38(0014) 5F EC AB 68 |         if_z            or      dira,txmask
3A3C(0015) 33 C8 FC A0 |                         mov     txcode,#transmit      'initialize ping-pong multitasking
3A40(0016) 64 BC BC 5C | receive                 jmpret  rxcode,txcode         'run a chunk of transmit code, then return
3A44(0017) 01 AE 7C 62 |                         test    rxtxmode,#%001  wz    'wait for start bit on rx pin
3A48(0018) F2 B3 3C 61 |                         test    rxmask,ina      wc
3A4C(0019) 16 00 64 5C |         if_z_eq_c       jmp     #receive
3A50(001A) 09 B8 FC A0 |                         mov     rxbits,#9             'ready to receive byte
3A54(001B) 58 BA BC A0 |                         mov     rxcnt,bitticks
3A58(001C) 01 BA FC 28 |                         shr     rxcnt,#1
3A5C(001D) F1 BB BC 80 |                         add     rxcnt,cnt                          
3A60(001E) 58 BA BC 80 | :bit                    add     rxcnt,bitticks        'ready next bit period
3A64(001F) 64 BC BC 5C | :wait                   jmpret  rxcode,txcode         'run a chuck of transmit code, then return
3A68(0020) 5D A8 BC A0 |                         mov     t1,rxcnt              'check if bit receive period done
3A6C(0021) F1 A9 BC 84 |                         sub     t1,cnt
3A70(0022) 00 A8 7C C1 |                         cmps    t1,#0           wc
3A74(0023) 1F 00 4C 5C |         if_nc           jmp     #:wait
3A78(0024) F2 B3 3C 61 |                         test    rxmask,ina      wc    'receive bit on rx pin
3A7C(0025) 01 B6 FC 30 |                         rcr     rxdata,#1
3A80(0026) 1E B8 FC E4 |                         djnz    rxbits,#:bit
3A84(0027) 17 B6 FC 28 |                         shr     rxdata,#32-9          'justify and trim received byte
3A88(0028) FF B6 FC 60 |                         and     rxdata,#$FF
3A8C(0029) 01 AE 7C 62 |                         test    rxtxmode,#%001  wz    'if rx inverted, invert byte
3A90(002A) FF B6 D4 6C |         if_nz           xor     rxdata,#$FF
3A94(002B) F0 AB BC 08 |                         rdlong  t2,par                'save received byte and inc head
3A98(002C) 5A AA BC 80 |                         add     t2,rxbuff
3A9C(002D) 55 B6 3C 00 |                         wrbyte  rxdata,t2
3AA0(002E) 5A AA BC 84 |                         sub     t2,rxbuff
3AA4(002F) 01 AA FC 80 |                         add     t2,#1
3AA8(0030) 0F AA FC 60 |                         and     t2,#$0F
3AAC(0031) F0 AB 3C 08 |                         wrlong  t2,par
3AB0(0032) 16 00 7C 5C |                         jmp     #receive              'byte done, receive next byte
3AB4(0033) 5E C8 BC 5C | transmit                jmpret  txcode,rxcode         'run a chunk of receive code, then return
3AB8(0034) F0 A9 BC A0 |                         mov     t1,par                'check for head <> tail
3ABC(0035) 08 A8 FC 80 |                         add     t1,#2 << 2
3AC0(0036) 54 AA BC 08 |                         rdlong  t2,t1
3AC4(0037) 04 A8 FC 80 |                         add     t1,#1 << 2
3AC8(0038) 54 AC BC 08 |                         rdlong  t3,t1
3ACC(0039) 56 AA 3C 86 |                         cmp     t2,t3           wz
3AD0(003A) 33 00 68 5C |         if_z            jmp     #transmit
3AD4(003B) 60 AC BC 80 |                         add     t3,txbuff             'get byte and inc tail
3AD8(003C) 56 C2 BC 00 |                         rdbyte  txdata,t3
3ADC(003D) 60 AC BC 84 |                         sub     t3,txbuff
3AE0(003E) 01 AC FC 80 |                         add     t3,#1
3AE4(003F) 0F AC FC 60 |                         and     t3,#$0F
3AE8(0040) 54 AC 3C 08 |                         wrlong  t3,t1
3AEC(0041) 00 C3 FC 68 |                         or      txdata,#$100          'ready byte to transmit
3AF0(0042) 02 C2 FC 2C |                         shl     txdata,#2
3AF4(0043) 01 C2 FC 68 |                         or      txdata,#1
3AF8(0044) 0B C4 FC A0 |                         mov     txbits,#11
3AFC(0045) F1 C7 BC A0 |                         mov     txcnt,cnt
3B00(0046) 04 AE 7C 62 | :bit                    test    rxtxmode,#%100  wz    'output bit on tx pin according to mode
3B04(0047) 02 AE 7C 61 |                         test    rxtxmode,#%010  wc
3B08(0048) 01 C2 E0 6C |         if_z_and_c      xor     txdata,#1
3B0C(0049) 01 C2 FC 29 |                         shr     txdata,#1       wc
3B10(004A) 5F E8 AB 70 |         if_z            muxc    outa,txmask        
3B14(004B) 5F EC 97 74 |         if_nz           muxnc   dira,txmask
3B18(004C) 58 C6 BC 80 |                         add     txcnt,bitticks        'ready next cnt
3B1C(004D) 5E C8 BC 5C | :wait                   jmpret  txcode,rxcode         'run a chunk of receive code, then return
3B20(004E) 63 A8 BC A0 |                         mov     t1,txcnt              'check if bit transmit period done
3B24(004F) F1 A9 BC 84 |                         sub     t1,cnt
3B28(0050) 00 A8 7C C1 |                         cmps    t1,#0           wc
3B2C(0051) 4D 00 4C 5C |         if_nc           jmp     #:wait
3B30(0052) 46 C4 FC E4 |                         djnz    txbits,#:bit          'another bit to transmit?
3B34(0053) 33 00 7C 5C |                         jmp     #transmit             'byte done, transmit next byte
3B38(0054)             | t1                      res     1
3B38(0055)             | t2                      res     1
3B38(0056)             | t3                      res     1
3B38(0057)             | rxtxmode                res     1
3B38(0058)             | bitticks                res     1
3B38(0059)             | rxmask                  res     1
3B38(005A)             | rxbuff                  res     1
3B38(005B)             | rxdata                  res     1
3B38(005C)             | rxbits                  res     1
3B38(005D)             | rxcnt                   res     1
3B38(005E)             | rxcode                  res     1
3B38(005F)             | txmask                  res     1
3B38(0060)             | txbuff                  res     1
3B38(0061)             | txdata                  res     1
3B38(0062)             | txbits                  res     1
3B38(0063)             | txcnt                   res     1
3B38(0064)             | txcode                  res     1
|===========================================================================|
|===========================================================================|
Spin Block start with 4 Parameters and 0 Extra Stack Longs. Method 1
PUB start(rxpin, txpin, mode, baudrate) : okay

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - rxpin
Local Parameter DBASE:0008 - txpin
Local Parameter DBASE:000C - mode
Local Parameter DBASE:0010 - baudrate
|===========================================================================|
Addr : 3B38:             01  : Drop Anchor   
Addr : 3B39:          05 02  : Call Sub 2    
Addr : 3B3B:             47  : Variable Operation Global Offset - 1 Address
Addr : 3B3C:             35  : Constant 1 $00000000
Addr : 3B3D:          37 01  : Constant Mask Y=1 00000004
Addr : 3B3F:             1A  : LongFill(Start, Value, Count)
Addr : 3B40:             57  : Variable Operation Global Offset - 5 Address
Addr : 3B41:             67  : Variable Operation Local Offset - 1 Address
Addr : 3B42:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 3B44:             1E  : LongMove(To, From, Count)
Addr : 3B45:             35  : Constant 1 $00000000
Addr : 3B46:             C0  : Memory Op Long POP Address READ 
Addr : 3B47:             70  : Variable Operation Local Offset - 4 Read
Addr : 3B48:             F6  : Math Op /     
Addr : 3B49:          C9 20  : Memory Op Long VBASE + WRITE Address = 0020
Addr : 3B4B:          8B 28  : Memory Op Byte VBASE + ADDRESS Address = 0028
Addr : 3B4D:          C9 24  : Memory Op Long VBASE + WRITE Address = 0024
Addr : 3B4F:             34  : Constant 0 $FFFFFFFF
Addr : 3B50:          C7 38  : Memory Op Long PBASE + ADDRESS Address = 0038
Addr : 3B52:             47  : Variable Operation Global Offset - 1 Address
Addr : 3B53:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 3B54:             36  : Constant 2 $00000001
Addr : 3B55:             EC  : Math Op +     
Addr : 3B56:          42 80  : Variable Operation Global Offset - 0 Assign Write Push
Addr : 3B58:             61  : Variable Operation Local Offset - 0 Write
Addr : 3B59:             32  : Return        
|===========================================================================|
Spin Block stop with 0 Parameters and 0 Extra Stack Longs. Method 2
PUB stop

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3B5A:             40  : Variable Operation Global Offset - 0 Read
Addr : 3B5B: JZ Label0002
Addr : 3B5B:          0A 05  : jz Address = 3B62 5
Addr : 3B5D:          42 98  : Variable Operation Global Offset - 0 Assign VAR~ Post-clear Push
Addr : 3B5F:             36  : Constant 2 $00000001
Addr : 3B60:             ED  : Math Op -     
Addr : 3B61:             21  : CogStop(id)   
Addr : 3B62: Label0002
Addr : 3B62: Label0003
Addr : 3B62:             47  : Variable Operation Global Offset - 1 Address
Addr : 3B63:             35  : Constant 1 $00000000
Addr : 3B64:          38 09  : Constant 1 Bytes - 09 
Addr : 3B66:             1A  : LongFill(Start, Value, Count)
Addr : 3B67:             32  : Return        
|===========================================================================|
Spin Block rxflush with 0 Parameters and 0 Extra Stack Longs. Method 3
PUB rxflush

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3B68: Label0002
Addr : 3B68:             00  : Drop Anchor Push 
Addr : 3B69:          05 06  : Call Sub 6    
Addr : 3B6B:             35  : Constant 1 $00000000
Addr : 3B6C:             FE  : Math Op =>    
Addr : 3B6D: JZ Label0004
Addr : 3B6D:          0A 02  : jz Address = 3B71 2
Addr : 3B6F: Label0003
Addr : 3B6F: JMP Label0002
Addr : 3B6F:          04 77  : Jmp 3B68 -9   
Addr : 3B71: Label0004
Addr : 3B71:             32  : Return        
|===========================================================================|
Spin Block rxcount with 0 Parameters and 0 Extra Stack Longs. Method 4
PUB rxcount : count

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3B72:             44  : Variable Operation Global Offset - 1 Read
Addr : 3B73:             48  : Variable Operation Global Offset - 2 Read
Addr : 3B74:             ED  : Math Op -     
Addr : 3B75:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 3B77:             E8  : Math Op &     
Addr : 3B78:             61  : Variable Operation Local Offset - 0 Write
Addr : 3B79:             32  : Return        
|===========================================================================|
Spin Block txcount with 0 Parameters and 0 Extra Stack Longs. Method 5
PUB txcount : count

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3B7A:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 3B7C:             4C  : Variable Operation Global Offset - 3 Read
Addr : 3B7D:             50  : Variable Operation Global Offset - 4 Read
Addr : 3B7E:             ED  : Math Op -     
Addr : 3B7F:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 3B81:             E8  : Math Op &     
Addr : 3B82:             ED  : Math Op -     
Addr : 3B83:             61  : Variable Operation Local Offset - 0 Write
Addr : 3B84:             32  : Return        
|===========================================================================|
Spin Block rxcheck with 0 Parameters and 0 Extra Stack Longs. Method 6
PUB rxcheck : rxbyte

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3B85:          62 3E  : Variable Operation Local Offset - 0 Assign VAR-- post-dec Long
Addr : 3B87:             48  : Variable Operation Global Offset - 2 Read
Addr : 3B88:             44  : Variable Operation Global Offset - 1 Read
Addr : 3B89:             FB  : Math Op <>    
Addr : 3B8A: JZ Label0002
Addr : 3B8A:          0A 0B  : jz Address = 3B97 11
Addr : 3B8C:             48  : Variable Operation Global Offset - 2 Read
Addr : 3B8D:          98 28  : Memory Op Byte VBASE + POP Index READ Address = 0028
Addr : 3B8F:             61  : Variable Operation Local Offset - 0 Write
Addr : 3B90:             48  : Variable Operation Global Offset - 2 Read
Addr : 3B91:             36  : Constant 2 $00000001
Addr : 3B92:             EC  : Math Op +     
Addr : 3B93:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 3B95:             E8  : Math Op &     
Addr : 3B96:             49  : Variable Operation Global Offset - 2 Write
Addr : 3B97: Label0002
Addr : 3B97: Label0003
Addr : 3B97:             32  : Return        
|===========================================================================|
Spin Block rxtime with 1 Parameters and 1 Extra Stack Longs. Method 7
PUB rxtime(ms) : rxbyte | t

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - ms
Local Variable  DBASE:0008 - t
|===========================================================================|
Addr : 3B98:          3F 91  : Register op CNT Read
Addr : 3B9A:             69  : Variable Operation Local Offset - 2 Write
Addr : 3B9B: Label0002
Addr : 3B9B:             00  : Drop Anchor Push 
Addr : 3B9C:          05 06  : Call Sub 6    
Addr : 3B9E:          62 80  : Variable Operation Local Offset - 0 Assign Write Push
Addr : 3BA0:             35  : Constant 1 $00000000
Addr : 3BA1:             FE  : Math Op =>    
Addr : 3BA2:          3F 91  : Register op CNT Read
Addr : 3BA4:             68  : Variable Operation Local Offset - 2 Read
Addr : 3BA5:             ED  : Math Op -     
Addr : 3BA6:             35  : Constant 1 $00000000
Addr : 3BA7:             C0  : Memory Op Long POP Address READ 
Addr : 3BA8:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 3BAB:             F6  : Math Op /     
Addr : 3BAC:             F6  : Math Op /     
Addr : 3BAD:             64  : Variable Operation Local Offset - 1 Read
Addr : 3BAE:             FA  : Math Op >     
Addr : 3BAF:             F2  : Math Op OR    
Addr : 3BB0: JNZ Label0004
Addr : 3BB0:          0B 02  : jnz Address = 3BB4 2
Addr : 3BB2: Label0003
Addr : 3BB2: JMP Label0002
Addr : 3BB2:          04 67  : Jmp 3B9B -25  
Addr : 3BB4: Label0004
Addr : 3BB4:             32  : Return        
|===========================================================================|
Spin Block rx with 0 Parameters and 0 Extra Stack Longs. Method 8
PUB rx : rxbyte

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3BB5: Label0002
Addr : 3BB5:             00  : Drop Anchor Push 
Addr : 3BB6:          05 06  : Call Sub 6    
Addr : 3BB8:          62 80  : Variable Operation Local Offset - 0 Assign Write Push
Addr : 3BBA:             35  : Constant 1 $00000000
Addr : 3BBB:             F9  : Math Op <     
Addr : 3BBC: JZ Label0004
Addr : 3BBC:          0A 02  : jz Address = 3BC0 2
Addr : 3BBE: Label0003
Addr : 3BBE: JMP Label0002
Addr : 3BBE:          04 75  : Jmp 3BB5 -11  
Addr : 3BC0: Label0004
Addr : 3BC0:             32  : Return        
|===========================================================================|
Spin Block tx with 1 Parameters and 0 Extra Stack Longs. Method 9
PUB tx(txbyte)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - txbyte
|===========================================================================|
Addr : 3BC1: Label0002
Addr : 3BC1:             50  : Variable Operation Global Offset - 4 Read
Addr : 3BC2:             4C  : Variable Operation Global Offset - 3 Read
Addr : 3BC3:             36  : Constant 2 $00000001
Addr : 3BC4:             EC  : Math Op +     
Addr : 3BC5:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 3BC7:             E8  : Math Op &     
Addr : 3BC8:             FB  : Math Op <>    
Addr : 3BC9: JNZ Label0004
Addr : 3BC9:          0B 02  : jnz Address = 3BCD 2
Addr : 3BCB: Label0003
Addr : 3BCB: JMP Label0002
Addr : 3BCB:          04 74  : Jmp 3BC1 -12  
Addr : 3BCD: Label0004
Addr : 3BCD:             64  : Variable Operation Local Offset - 1 Read
Addr : 3BCE:             4C  : Variable Operation Global Offset - 3 Read
Addr : 3BCF:          99 38  : Memory Op Byte VBASE + POP Index WRITE Address = 0038
Addr : 3BD1:             4C  : Variable Operation Global Offset - 3 Read
Addr : 3BD2:             36  : Constant 2 $00000001
Addr : 3BD3:             EC  : Math Op +     
Addr : 3BD4:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 3BD6:             E8  : Math Op &     
Addr : 3BD7:             4D  : Variable Operation Global Offset - 3 Write
Addr : 3BD8:             5C  : Variable Operation Global Offset - 7 Read
Addr : 3BD9:          37 02  : Constant Mask Y=2 00000008
Addr : 3BDB:             E8  : Math Op &     
Addr : 3BDC: JZ Label0005
Addr : 3BDC:          0A 03  : jz Address = 3BE1 3
Addr : 3BDE:             01  : Drop Anchor   
Addr : 3BDF:          05 08  : Call Sub 8    
Addr : 3BE1: Label0005
Addr : 3BE1: Label0006
Addr : 3BE1:             32  : Return        
|===========================================================================|
Spin Block str with 1 Parameters and 0 Extra Stack Longs. Method 10
PUB str(stringptr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - stringptr
|===========================================================================|
Addr : 3BE2:             64  : Variable Operation Local Offset - 1 Read
Addr : 3BE3:             16  : StrSize(String)
Addr : 3BE4: TJZ Label0004
Addr : 3BE4:          08 08  : tjz Address = 3BEE 8
Addr : 3BE6: Label0002
Addr : 3BE6:             01  : Drop Anchor   
Addr : 3BE7:          66 AE  : Variable Operation Local Offset - 1 Assign VAR++ post inc Long Push
Addr : 3BE9:             80  : Memory Op Byte POP Address READ 
Addr : 3BEA:          05 09  : Call Sub 9    
Addr : 3BEC: Label0003
Addr : 3BEC: DJNZ Label0002
Addr : 3BEC:          09 78  : djnz Address = 3BE6 -8
Addr : 3BEE: Label0004
Addr : 3BEE:             32  : Return        
|===========================================================================|
Spin Block dec with 1 Parameters and 2 Extra Stack Longs. Method 11
PUB dec(value) | i, x

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Variable  DBASE:0008 - i
Local Variable  DBASE:000C - x
|===========================================================================|
Addr : 3BEF:             64  : Variable Operation Local Offset - 1 Read
Addr : 3BF0:          37 1E  : Constant Mask Y=30 80000000
Addr : 3BF2:             FC  : Math Op ==    
Addr : 3BF3:             6D  : Variable Operation Local Offset - 3 Write
Addr : 3BF4:             64  : Variable Operation Local Offset - 1 Read
Addr : 3BF5:             35  : Constant 1 $00000000
Addr : 3BF6:             F9  : Math Op <     
Addr : 3BF7: JZ Label0002
Addr : 3BF7:          0A 0A  : jz Address = 3C03 10
Addr : 3BF9:             64  : Variable Operation Local Offset - 1 Read
Addr : 3BFA:             6C  : Variable Operation Local Offset - 3 Read
Addr : 3BFB:             EC  : Math Op +     
Addr : 3BFC:             E9  : Math Op ||    
Addr : 3BFD:             65  : Variable Operation Local Offset - 1 Write
Addr : 3BFE:             01  : Drop Anchor   
Addr : 3BFF:          38 2D  : Constant 1 Bytes - 2D 
Addr : 3C01:          05 09  : Call Sub 9    
Addr : 3C03: Label0002
Addr : 3C03: Label0003
Addr : 3C03: 3B 3B 9A CA 00  : Constant 4 Bytes - 3B 9A CA 00 
Addr : 3C08:             69  : Variable Operation Local Offset - 2 Write
Addr : 3C09:          38 0A  : Constant 1 Bytes - 0A 
Addr : 3C0B: TJZ Label0006
Addr : 3C0B:          08 2D  : tjz Address = 3C3A 45
Addr : 3C0D: Label0004
Addr : 3C0D:             64  : Variable Operation Local Offset - 1 Read
Addr : 3C0E:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C0F:             FE  : Math Op =>    
Addr : 3C10: JZ Label0007
Addr : 3C10:          0A 16  : jz Address = 3C28 22
Addr : 3C12:             01  : Drop Anchor   
Addr : 3C13:             64  : Variable Operation Local Offset - 1 Read
Addr : 3C14:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C15:             F6  : Math Op /     
Addr : 3C16:          38 30  : Constant 1 Bytes - 30 
Addr : 3C18:             EC  : Math Op +     
Addr : 3C19:             6C  : Variable Operation Local Offset - 3 Read
Addr : 3C1A:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C1B:             36  : Constant 2 $00000001
Addr : 3C1C:             FC  : Math Op ==    
Addr : 3C1D:             F4  : Math Op *     
Addr : 3C1E:             EC  : Math Op +     
Addr : 3C1F:          05 09  : Call Sub 9    
Addr : 3C21:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C22:          66 57  : Variable Operation Local Offset - 1 Assign LongMathop //
Addr : 3C24:          62 1C  : Variable Operation Local Offset - 0 Assign VAR~~ Post-set
Addr : 3C26: JMP Label0008
Addr : 3C26:          04 0C  : Jmp 3C34 12   
Addr : 3C28: Label0007
Addr : 3C28:             60  : Variable Operation Local Offset - 0 Read
Addr : 3C29:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C2A:             36  : Constant 2 $00000001
Addr : 3C2B:             FC  : Math Op ==    
Addr : 3C2C:             F2  : Math Op OR    
Addr : 3C2D: JZ Label0009
Addr : 3C2D:          0A 05  : jz Address = 3C34 5
Addr : 3C2F:             01  : Drop Anchor   
Addr : 3C30:          38 30  : Constant 1 Bytes - 30 
Addr : 3C32:          05 09  : Call Sub 9    
Addr : 3C34: Label0009
Addr : 3C34: Label0008
Addr : 3C34:          38 0A  : Constant 1 Bytes - 0A 
Addr : 3C36:          6A 56  : Variable Operation Local Offset - 2 Assign LongMathop /
Addr : 3C38: Label0005
Addr : 3C38: DJNZ Label0004
Addr : 3C38:          09 53  : djnz Address = 3C0D -45
Addr : 3C3A: Label0006
Addr : 3C3A:             32  : Return        
|===========================================================================|
Spin Block hex with 2 Parameters and 0 Extra Stack Longs. Method 12
PUB hex(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 3C3B:          37 02  : Constant Mask Y=2 00000008
Addr : 3C3D:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C3E:             ED  : Math Op -     
Addr : 3C3F:          37 00  : Constant Mask Y=0 00000002
Addr : 3C41:             E3  : Math Op <<    
Addr : 3C42:          66 43  : Variable Operation Local Offset - 1 Assign ByteMathop <<
Addr : 3C44:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C45: TJZ Label0004
Addr : 3C45:          08 1B  : tjz Address = 3C62 27
Addr : 3C47: Label0002
Addr : 3C47:             01  : Drop Anchor   
Addr : 3C48:             35  : Constant 1 $00000000
Addr : 3C49: Constant Address of Label0005
Addr : 3C49:       39 02 AE  : Constant 2 Bytes - 02 AE 
Addr : 3C4C:          37 01  : Constant Mask Y=1 00000004
Addr : 3C4E:          66 C1  : Variable Operation Local Offset - 1 Assign BitMathop -< Push
Addr : 3C50:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 3C52:             E8  : Math Op &     
Addr : 3C53:          38 30  : Constant 1 Bytes - 30 
Addr : 3C55:          38 39  : Constant 1 Bytes - 39 
Addr : 3C57:             12  : Range LookUp  
Addr : 3C58:          38 41  : Constant 1 Bytes - 41 
Addr : 3C5A:          38 46  : Constant 1 Bytes - 46 
Addr : 3C5C:             12  : Range LookUp  
Addr : 3C5D:             0F  : Lookdone      
Addr : 3C5E: Label0005
Addr : 3C5E:          05 09  : Call Sub 9    
Addr : 3C60: Label0003
Addr : 3C60: DJNZ Label0002
Addr : 3C60:          09 65  : djnz Address = 3C47 -27
Addr : 3C62: Label0004
Addr : 3C62:             32  : Return        
|===========================================================================|
Spin Block bin with 2 Parameters and 0 Extra Stack Longs. Method 13
PUB bin(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 3C63:          37 04  : Constant Mask Y=4 00000020
Addr : 3C65:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C66:             ED  : Math Op -     
Addr : 3C67:          66 43  : Variable Operation Local Offset - 1 Assign ByteMathop <<
Addr : 3C69:             68  : Variable Operation Local Offset - 2 Read
Addr : 3C6A: TJZ Label0004
Addr : 3C6A:          08 0D  : tjz Address = 3C79 13
Addr : 3C6C: Label0002
Addr : 3C6C:             01  : Drop Anchor   
Addr : 3C6D:             36  : Constant 2 $00000001
Addr : 3C6E:          66 C1  : Variable Operation Local Offset - 1 Assign BitMathop -< Push
Addr : 3C70:             36  : Constant 2 $00000001
Addr : 3C71:             E8  : Math Op &     
Addr : 3C72:          38 30  : Constant 1 Bytes - 30 
Addr : 3C74:             EC  : Math Op +     
Addr : 3C75:          05 09  : Call Sub 9    
Addr : 3C77: Label0003
Addr : 3C77: DJNZ Label0002
Addr : 3C77:          09 73  : djnz Address = 3C6C -13
Addr : 3C79: Label0004
Addr : 3C79:             32  : Return        
