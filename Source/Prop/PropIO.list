|===========================================================================|
Objects : -
PropIO
   |
   +--AnsiTerm
   |      |
   |      +---vgacolour
   |      |
   |      +---E555_SPKEngine
   |
   +--Keyboard
   |
   +--safe_spi
   |
   +--Parallax Serial Terminal Null

Object Address : 0010 : Object Name : PropIO
Object Address : 0630 : Object Name : AnsiTerm
Object Address : 0FC0 : Object Name : vgacolour
Object Address : 2330 : Object Name : E555_SPKEngine
Object Address : 23B0 : Object Name : Keyboard
Object Address : 2A20 : Object Name : safe_spi
Object Address : 33C0 : Object Name : Parallax Serial Terminal Null

Binary Image Information :
PBASE : 0010
VBASE : 346C
DBASE : 4AD8
PCURR : 01BC
DCURR : 4ADC
|===========================================================================|
|===========================================================================|
Object PropIO
Object Base is 0010
|===========================================================================|
Object Constants
|===========================================================================|
Constant VERSION = 00600000 (6291456)
Constant _CLKMODE = 00000408 (1032)
Constant _XINFREQ = 004C4B40 (5000000)
Constant SLEEP = 00000000 (0)
Constant VGA_BASE = 00000010 (16)
Constant KBD_BASE = 0000000E (14)
Constant SD_BASE = 00000018 (24)
Constant STAT_ATTR1 = 00003000 (12288)
Constant STAT_ATTR = 00007000 (28672)
Constant DSKCMD_NOP = 00000000 (0)
Constant DSKCMD_STATUS = 00000001 (1)
Constant DSKCMD_GETTYPE = 00000002 (2)
Constant DSKCMD_GETCAP = 00000003 (3)
Constant DSKCMD_GETCSD = 00000004 (4)
Constant DSKCMD_RESET = 00000010 (16)
Constant DSKCMD_INIT = 00000020 (32)
Constant DSKCMD_READBLK = 00000030 (48)
Constant DSKCMD_PREPARE = 00000040 (64)
Constant DSKCMD_WRITEBLK = 00000050 (80)
Constant DSKCMD_VERSION = 000000F0 (240)
Constant DSKST_ACT = 00000080 (128)
Constant DSKST_ERR = 00000040 (64)
Constant DSKST_OVR = 00000020 (32)
Constant TRMST_ACT = 00000080 (128)
Constant TRMST_ERR = 00000040 (64)
Constant TRMST_KBDACT = 00000020 (32)
Constant TRMST_DSPACT = 00000010 (16)
Constant TRMST_ACTMASK = 00000030 (48)
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0004 Variable DiskBlk
VBASE : 0004 LONG Size 0200 Variable DiskBuf
VBASE : 0204 LONG Size 0040 Variable TimerStack
VBASE : 0244 LONG Size 0004 Variable TimerCount
VBASE : 0248 LONG Size 0004 Variable DiskResult
VBASE : 024C LONG Size 0004 Variable CardType
VBASE : 0250 BYTE Size 0001 Variable TermStatKbd
VBASE : 0251 BYTE Size 0001 Variable TermStatDsp
VBASE : 0252 BYTE Size 0001 Variable TermKbdBuf
VBASE : 0253 BYTE Size 0001 Variable TermScrBuf
VBASE : 0254 BYTE Size 0001 Variable DiskStat
VBASE : 0255 BYTE Size 0001 Variable DiskCmd
VBASE : 0256 BYTE Size 0001 Variable statRows
VBASE : 0257 BYTE Size 0001 Variable statCols
|===========================================================================|
Object DAT Blocks
|===========================================================================|
0050(0000) 46          | strVer        byte        "F/W v0.96",0
0051(0000) 2F          | 
0052(0000) 57          | 
0053(0000) 20          | 
0054(0001) 76          | 
0055(0001) 30          | 
0056(0001) 2E          | 
0057(0001) 39          | 
0058(0002) 36          | 
0059(0002) 00          | 
005A(0002) 50          | strHW        byte        "PropIO",0
005B(0002) 72          | 
005C(0003) 6F          | 
005D(0003) 70          | 
005E(0003) 49          | 
005F(0003) 4F          | 
0060(0004) 00          | 
0061(0004) 52          | strROM        byte        "RomWBW",0
0062(0004) 6F          | 
0063(0004) 6D          | 
0064(0005) 57          | 
0065(0005) 42          | 
0066(0005) 57          | 
0067(0005) 00          | 
0068(0006)             |                         org 0
0068(0000)             | PortIO
0068(0000) 52 E8 BF 68 |                         or  outa, BitWait               ' deassert wait (high)
006C(0001) 50 A2 3C F0 |                         waitpeq BitCS, MaskCS           ' wait for CS to be deasserted (high)
0070(0002) 53 EC BF A0 |                         mov dira, DirMask               ' tri-state data and set cntl for input
0074(0003) 52 E8 BF A0 |                         mov     outa, BitWait           ' /WAIT deasserted (high)
0078(0004) 54 E8 BF F0 |                         waitpeq outa, WaitMask wr       ' wait for /CS low, note result is written!
007C(0005) 00 E8 FF A0 |                         mov     outa, #0                ' clean up value of outa
0080(0006) F2 AD BC A0 |                         mov TempAdr, ina                ' get input bits
0084(0007) 09 AC FC 28 |                         shr TempAdr, #9                 ' /RD, A1, A0 -> bits 2,1,0
0088(0008) 07 AC FC 60 |                         and TempAdr, #$07               ' isolate the 3 bits
008C(0009) 0D AC FC 80 |                         add     TempAdr,#JmpTable
0090(000A) 56 18 BC 50 |                         movs    JmpCmd,TempAdr
0094(000B) 00 00 00 00 |                         nop
0098(000C) 00 00 7C 5C | JmpCmd                  jmp     #0-0
009C(000D) 16 00 7C 5C | JmpTable                jmp     #TermStatus
00A0(000E) 1E 00 7C 5C |                         jmp     #TermRead
00A4(000F) 34 00 7C 5C |                         jmp     #DiskStatus
00A8(0010) 38 00 7C 5C |                         jmp     #DiskRead
00AC(0011) 15 00 7C 5C |                         jmp     #TermCommand
00B0(0012) 25 00 7C 5C |                         jmp     #TermWrite
00B4(0013) 2B 00 7C 5C |                         jmp     #DiskCommand
00B8(0014) 3F 00 7C 5C |                         jmp     #DiskWrite
00BC(0015)             | TermCommand             ' receive terminal command byte from host
00BC(0015) 4D 00 3C 5C |                         jmp LoopRet
00C0(0016)             | TermStatus              ' send terminal status byte to host
00C0(0016) 45 AA BC 00 |                         rdbyte TempVal, TermStatKbdAdr  ' get kbd status
00C4(0017) 00 E8 FF A0 |                         mov outa, #0
00C8(0018) 55 E8 BF 68 |                         or outa, TempVal                ' combine it
00CC(0019) 46 AA BC 00 |                         rdbyte TempVal, TermStatDspAdr  ' get display status
00D0(001A) 55 E8 BF 68 |                         or outa, TempVal                ' combine it
00D4(001B) 30 E8 FF 6C |                         xor outa, #TRMST_ACTMASK        ' convert 'active' bits to 'ready' bits for host
00D8(001C) 4E EC BF 68 |                         or dira, BitsData               ' set D0-D7 to output
00DC(001D) 4D 00 3C 5C |                         jmp LoopRet
00E0(001E)             | TermRead                ' return byte in key buf to host
00E0(001E) 47 AA BC 00 |                         rdbyte TempVal,TermKbdBufAdr    ' get the byte from the buffer
00E4(001F) 55 E8 BF A0 |                         mov outa,TempVal                ' output byte to port
00E8(0020) 45 AA BC 00 |                         rdbyte TempVal, TermStatKbdAdr
00EC(0021) 20 AA FC 68 |                         or TempVal, #TRMST_KBDACT
00F0(0022) 45 AA 3C 00 |                         wrbyte TempVal, TermStatKbdAdr
00F4(0023) 4E EC BF 68 |                         or dira, BitsData               ' set D0-D7 to output
00F8(0024) 4D 00 3C 5C |                         jmp LoopRet
00FC(0025)             | TermWrite               ' accept byte from host into screen buf
00FC(0025) F2 AB BC A0 |                         mov TempVal, ina                ' input byte from port
0100(0026) 48 AA 3C 00 |                         wrbyte TempVal,TermDspBufAdr    ' put the byte into the buffer
0104(0027) 46 AA BC 00 |                         rdbyte TempVal, TermStatDspAdr  ' get current display status
0108(0028) 10 AA FC 68 |                         or TempVal, #TRMST_DSPACT       ' set the active bit
010C(0029) 46 AA 3C 00 |                         wrbyte TempVal, TermStatDspAdr  ' store the updated status
0110(002A) 4D 00 3C 5C |                         jmp LoopRet
0114(002B)             | DiskCommand             ' receive disk command byte from host
0114(002B) 00 98 FC A0 |                         mov DiskBufIdx, #0              ' reset buf index on any incoming command
0118(002C) F2 AB BC A0 |                         mov TempVal, ina                ' input command byte from port
011C(002D) FF AA FC 62 |                         and TempVal, #$FF wz            ' isolate relevant bits
0120(002E) 4D 00 28 5C |         if_z            jmp LoopRet                     ' handle NOP here (fast)
0124(002F) 4A AA 3C 00 |                         wrbyte TempVal, DiskCmdAdr      ' store command byte to global memory
0128(0030) 49 AA BC 00 |                         rdbyte TempVal, DiskStatAdr     ' get current disk status
012C(0031) 80 AA FC 68 |                         or TempVal, #DSKST_ACT          ' set the active bit
0130(0032) 49 AA 3C 00 |                         wrbyte TempVal, DiskStatAdr     ' store updated disk status
0134(0033) 4D 00 3C 5C |                         jmp LoopRet
0138(0034)             | DiskStatus              ' send disk status byte to host
0138(0034) 49 AA BC 00 |                         rdbyte TempVal, DiskStatAdr     ' get status byte from global memory
013C(0035) 55 E8 BF A0 |                         mov outa, TempVal               ' output byte to port
0140(0036) 4E EC BF 68 |                         or  dira, BitsData              ' set D0-D7 to output
0144(0037) 4D 00 3C 5C |                         jmp LoopRet
0148(0038)             | DiskRead               ' send bytes from sector buffer to host
0148(0038) 4B AC BC A0 |                         mov TempAdr,DiskBufAdr          ' get pointer to sector buffer
014C(0039) 4C AC BC 80 |                         add TempAdr,DiskBufIdx          ' increment pointer by current index value
0150(003A) 56 AA BC 00 |                         rdbyte TempVal,TempAdr          ' get the byte from the buffer
0154(003B) 55 E8 BF A0 |                         mov outa,TempVal                ' output byte to port
0158(003C) 01 98 FC 80 |                         add DiskBufIdx,#1               ' increment index for the next read
015C(003D) 4E EC BF 68 |                         or dira, BitsData               ' set D0-D7 to output
0160(003E) 4D 00 3C 5C |                         jmp LoopRet
0164(003F)             | DiskWrite               ' fill bytes of sector buffer from host
0164(003F) 4B AC BC A0 |                         mov TempAdr,DiskBufAdr          ' get pointer to sector buffer
0168(0040) 4C AC BC 80 |                         add TempAdr,DiskBufIdx          ' increment pointer by current index value
016C(0041) F2 AB BC A0 |                         mov TempVal, ina                ' input byte from port
0170(0042) 56 AA 3C 00 |                         wrbyte TempVal,TempAdr          ' put the byte into the buffer
0174(0043) 01 98 FC 80 |                         add DiskBufIdx,#1               ' increment the index for the next write
0178(0044) 4D 00 3C 5C |                         jmp LoopRet
017C(0045) 00 00 00 00 | TermStatKbdAdr          long    0
0180(0046) 00 00 00 00 | TermStatDspAdr          long    0
0184(0047) 00 00 00 00 | TermKbdBufAdr           long    0
0188(0048) 00 00 00 00 | TermDspBufAdr           long    0
018C(0049) 00 00 00 00 | DiskStatAdr             long    0
0190(004A) 00 00 00 00 | DiskCmdAdr              long    0
0194(004B) 00 00 00 00 | DiskBufAdr              long    0
0198(004C) 00 00 00 00 | DiskBufIdx              long    0
019C(004D) 00 00 00 00 | LoopRet                 long    PortIO
01A0(004E) FF 00 00 00 | BitsData                long    $00FF
01A4(004F) 00 00 00 00 | Zero                    long    $0000
01A8(0050) 00 01 00 00 | MaskCS                  long    $0100
01AC(0051) 00 01 00 00 | BitCS                   long    $0100
01B0(0052) 00 10 00 00 | BitWait                 long    $1000
01B4(0053) 00 10 00 00 | DirMask                 long    $1000
01B8(0054) 00 11 00 00 | WaitMask                long    $1100
01BC(0055)             | TempVal                 res     1
01BC(0056)             | TempAdr                 res     1
01BC(0057)             |                         fit
01BC(0057)             | There are 409 ($199) Longs left in the cog
|===========================================================================|
|===========================================================================|
Spin Block main with 0 Parameters and 0 Extra Stack Longs. Method 1
PUB main

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 01BC:             01  : Drop Anchor   
Addr : 01BD:    3A 01 C2 00  : Constant 3 Bytes - 01 C2 00 
Addr : 01C1:       06 0F 01  : Call Obj.Sub 15 1
Addr : 01C4:             01  : Drop Anchor   
Addr : 01C5: PBASE Constant Address of Label0002
Addr : 01C5:       87 83 91  : Memory Op Byte PBASE + ADDRESS Address = 0391
Addr : 01C8:          05 07  : Call Sub 7    
Addr : 01CA:             01  : Drop Anchor   
Addr : 01CB:          05 06  : Call Sub 6    
Addr : 01CD:             01  : Drop Anchor   
Addr : 01CE: PBASE Constant Address of Label0003
Addr : 01CE:       87 83 A4  : Memory Op Byte PBASE + ADDRESS Address = 03A4
Addr : 01D1:          05 07  : Call Sub 7    
Addr : 01D3:             00  : Drop Anchor Push 
Addr : 01D4:          37 03  : Constant Mask Y=3 00000010
Addr : 01D6:       06 0C 01  : Call Obj.Sub 12 1
Addr : 01D9:             61  : Variable Operation Local Offset - 0 Write
Addr : 01DA:             60  : Variable Operation Local Offset - 0 Read
Addr : 01DB:             35  : Constant 1 $00000000
Addr : 01DC:             F9  : Math Op <     
Addr : 01DD: JZ Label0004
Addr : 01DD:          0A 0C  : jz Address = 01EB 12
Addr : 01DF:             01  : Drop Anchor   
Addr : 01E0: PBASE Constant Address of Label0006
Addr : 01E0:       87 83 BA  : Memory Op Byte PBASE + ADDRESS Address = 03BA
Addr : 01E3:          05 07  : Call Sub 7    
Addr : 01E5:             01  : Drop Anchor   
Addr : 01E6:             60  : Variable Operation Local Offset - 0 Read
Addr : 01E7:          05 08  : Call Sub 8    
Addr : 01E9: JMP Label0005
Addr : 01E9:          04 0A  : Jmp 01F5 10   
Addr : 01EB: Label0004
Addr : 01EB:             01  : Drop Anchor   
Addr : 01EC: PBASE Constant Address of Label0008
Addr : 01EC:       87 83 CD  : Memory Op Byte PBASE + ADDRESS Address = 03CD
Addr : 01EF:          05 07  : Call Sub 7    
Addr : 01F1:             01  : Drop Anchor   
Addr : 01F2:       06 0C 07  : Call Obj.Sub 12 7
Addr : 01F5: Label0007
Addr : 01F5: Label0005
Addr : 01F5:             01  : Drop Anchor   
Addr : 01F6:          05 06  : Call Sub 6    
Addr : 01F8:             01  : Drop Anchor   
Addr : 01F9:       06 0C 02  : Call Obj.Sub 12 2
Addr : 01FC:             00  : Drop Anchor Push 
Addr : 01FD:       06 0C 0C  : Call Obj.Sub 12 12
Addr : 0200:          37 02  : Constant Mask Y=2 00000008
Addr : 0202:             E2  : Math Op >>    
Addr : 0203:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 0205:             E8  : Math Op &     
Addr : 0206:       89 82 56  : Memory Op Byte VBASE + WRITE Address = 0256
Addr : 0209:             00  : Drop Anchor Push 
Addr : 020A:       06 0C 0C  : Call Obj.Sub 12 12
Addr : 020D:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 020F:             E8  : Math Op &     
Addr : 0210:       89 82 57  : Memory Op Byte VBASE + WRITE Address = 0257
Addr : 0213:             01  : Drop Anchor   
Addr : 0214:             35  : Constant 1 $00000000
Addr : 0215:             35  : Constant 1 $00000000
Addr : 0216:       39 70 00  : Constant 2 Bytes - 70 00 
Addr : 0219:          37 04  : Constant Mask Y=4 00000020
Addr : 021B:       88 82 56  : Memory Op Byte VBASE + READ Address = 0256
Addr : 021E:       88 82 57  : Memory Op Byte VBASE + READ Address = 0257
Addr : 0221:             F4  : Math Op *     
Addr : 0222:       06 0C 0E  : Call Obj.Sub 12 14
Addr : 0225:             01  : Drop Anchor   
Addr : 0226:             35  : Constant 1 $00000000
Addr : 0227:             35  : Constant 1 $00000000
Addr : 0228:       39 30 00  : Constant 2 Bytes - 30 00 
Addr : 022B:          37 04  : Constant Mask Y=4 00000020
Addr : 022D:       88 82 57  : Memory Op Byte VBASE + READ Address = 0257
Addr : 0230:       06 0C 0E  : Call Obj.Sub 12 14
Addr : 0233:             01  : Drop Anchor   
Addr : 0234:             35  : Constant 1 $00000000
Addr : 0235:             36  : Constant 2 $00000001
Addr : 0236:       39 30 00  : Constant 2 Bytes - 30 00 
Addr : 0239:          87 51  : Memory Op Byte PBASE + ADDRESS Address = 0051
Addr : 023B:       06 0C 0D  : Call Obj.Sub 12 13
Addr : 023E:             01  : Drop Anchor   
Addr : 023F:             35  : Constant 1 $00000000
Addr : 0240:       88 82 57  : Memory Op Byte VBASE + READ Address = 0257
Addr : 0243:          87 4A  : Memory Op Byte PBASE + ADDRESS Address = 004A
Addr : 0245:             16  : StrSize(String)
Addr : 0246:             ED  : Math Op -     
Addr : 0247:          37 00  : Constant Mask Y=0 00000002
Addr : 0249:             F6  : Math Op /     
Addr : 024A:       39 30 00  : Constant 2 Bytes - 30 00 
Addr : 024D:          87 4A  : Memory Op Byte PBASE + ADDRESS Address = 004A
Addr : 024F:       06 0C 0D  : Call Obj.Sub 12 13
Addr : 0252:             01  : Drop Anchor   
Addr : 0253:             35  : Constant 1 $00000000
Addr : 0254:       88 82 57  : Memory Op Byte VBASE + READ Address = 0257
Addr : 0257:          87 40  : Memory Op Byte PBASE + ADDRESS Address = 0040
Addr : 0259:             16  : StrSize(String)
Addr : 025A:             ED  : Math Op -     
Addr : 025B:             36  : Constant 2 $00000001
Addr : 025C:             ED  : Math Op -     
Addr : 025D:       39 30 00  : Constant 2 Bytes - 30 00 
Addr : 0260:          87 40  : Memory Op Byte PBASE + ADDRESS Address = 0040
Addr : 0262:       06 0C 0D  : Call Obj.Sub 12 13
Addr : 0265:             01  : Drop Anchor   
Addr : 0266: PBASE Constant Address of Label0009
Addr : 0266:       87 83 D1  : Memory Op Byte PBASE + ADDRESS Address = 03D1
Addr : 0269:          05 07  : Call Sub 7    
Addr : 026B:       8B 82 50  : Memory Op Byte VBASE + ADDRESS Address = 0250
Addr : 026E:       C5 81 6C  : Memory Op Long PBASE + WRITE Address = 016C
Addr : 0271:       8B 82 51  : Memory Op Byte VBASE + ADDRESS Address = 0251
Addr : 0274:       C5 81 70  : Memory Op Long PBASE + WRITE Address = 0170
Addr : 0277:       8B 82 52  : Memory Op Byte VBASE + ADDRESS Address = 0252
Addr : 027A:       C5 81 74  : Memory Op Long PBASE + WRITE Address = 0174
Addr : 027D:       8B 82 53  : Memory Op Byte VBASE + ADDRESS Address = 0253
Addr : 0280:       C5 81 78  : Memory Op Long PBASE + WRITE Address = 0178
Addr : 0283:       8B 82 54  : Memory Op Byte VBASE + ADDRESS Address = 0254
Addr : 0286:       C5 81 7C  : Memory Op Long PBASE + WRITE Address = 017C
Addr : 0289:       8B 82 55  : Memory Op Byte VBASE + ADDRESS Address = 0255
Addr : 028C:       C5 81 80  : Memory Op Long PBASE + WRITE Address = 0180
Addr : 028F:             47  : Variable Operation Global Offset - 1 Address
Addr : 0290:       C5 81 84  : Memory Op Long PBASE + WRITE Address = 0184
Addr : 0293:             35  : Constant 1 $00000000
Addr : 0294:       C5 81 88  : Memory Op Long PBASE + WRITE Address = 0188
Addr : 0297:          37 04  : Constant Mask Y=4 00000020
Addr : 0299:       89 82 50  : Memory Op Byte VBASE + WRITE Address = 0250
Addr : 029C:             35  : Constant 1 $00000000
Addr : 029D:       89 82 51  : Memory Op Byte VBASE + WRITE Address = 0251
Addr : 02A0:             35  : Constant 1 $00000000
Addr : 02A1:       89 82 54  : Memory Op Byte VBASE + WRITE Address = 0254
Addr : 02A4:             35  : Constant 1 $00000000
Addr : 02A5:       C9 82 48  : Memory Op Long VBASE + WRITE Address = 0248
Addr : 02A8:             35  : Constant 1 $00000000
Addr : 02A9:       C9 82 4C  : Memory Op Long VBASE + WRITE Address = 024C
Addr : 02AC:             47  : Variable Operation Global Offset - 1 Address
Addr : 02AD:             35  : Constant 1 $00000000
Addr : 02AE:          37 08  : Constant Mask Y=8 00000200
Addr : 02B0:             18  : ByteFill(Start, Value, Count)
Addr : 02B1:             01  : Drop Anchor   
Addr : 02B2: PBASE Constant Address of Label000A
Addr : 02B2:       87 83 E8  : Memory Op Byte PBASE + ADDRESS Address = 03E8
Addr : 02B5:          05 07  : Call Sub 7    
Addr : 02B7:             01  : Drop Anchor   
Addr : 02B8:          05 06  : Call Sub 6    
Addr : 02BA:             01  : Drop Anchor   
Addr : 02BB: PBASE Constant Address of Label000B
Addr : 02BB:       87 83 EC  : Memory Op Byte PBASE + ADDRESS Address = 03EC
Addr : 02BE:          05 07  : Call Sub 7    
Addr : 02C0:             00  : Drop Anchor Push 
Addr : 02C1:          38 0E  : Constant 1 Bytes - 0E 
Addr : 02C3:          38 0E  : Constant 1 Bytes - 0E 
Addr : 02C5:             36  : Constant 2 $00000001
Addr : 02C6:             EC  : Math Op +     
Addr : 02C7:       06 0D 01  : Call Obj.Sub 13 1
Addr : 02CA:             61  : Variable Operation Local Offset - 0 Write
Addr : 02CB:             60  : Variable Operation Local Offset - 0 Read
Addr : 02CC:             35  : Constant 1 $00000000
Addr : 02CD:             F9  : Math Op <     
Addr : 02CE: JZ Label000C
Addr : 02CE:          0A 0C  : jz Address = 02DC 12
Addr : 02D0:             01  : Drop Anchor   
Addr : 02D1: PBASE Constant Address of Label000E
Addr : 02D1:       87 84 05  : Memory Op Byte PBASE + ADDRESS Address = 0405
Addr : 02D4:          05 07  : Call Sub 7    
Addr : 02D6:             01  : Drop Anchor   
Addr : 02D7:             60  : Variable Operation Local Offset - 0 Read
Addr : 02D8:          05 08  : Call Sub 8    
Addr : 02DA: JMP Label000D
Addr : 02DA:          04 06  : Jmp 02E2 6    
Addr : 02DC: Label000C
Addr : 02DC:             01  : Drop Anchor   
Addr : 02DD: PBASE Constant Address of Label0010
Addr : 02DD:       87 84 18  : Memory Op Byte PBASE + ADDRESS Address = 0418
Addr : 02E0:          05 07  : Call Sub 7    
Addr : 02E2: Label000F
Addr : 02E2: Label000D
Addr : 02E2:             01  : Drop Anchor   
Addr : 02E3:          05 06  : Call Sub 6    
Addr : 02E5:             35  : Constant 1 $00000000
Addr : 02E6:             35  : Constant 1 $00000000
Addr : 02E7:             FA  : Math Op >     
Addr : 02E8: JZ Label0011
Addr : 02E8:          0A 28  : jz Address = 0312 40
Addr : 02EA:             01  : Drop Anchor   
Addr : 02EB: PBASE Constant Address of Label0013
Addr : 02EB:       87 84 1C  : Memory Op Byte PBASE + ADDRESS Address = 041C
Addr : 02EE:          05 07  : Call Sub 7    
Addr : 02F0:          38 0A  : Constant 1 Bytes - 0A 
Addr : 02F2:       CB 82 04  : Memory Op Long VBASE + ADDRESS Address = 0204
Addr : 02F5:             15  : Run           
Addr : 02F6:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 02F7:             61  : Variable Operation Local Offset - 0 Write
Addr : 02F8:             60  : Variable Operation Local Offset - 0 Read
Addr : 02F9:             35  : Constant 1 $00000000
Addr : 02FA:             F9  : Math Op <     
Addr : 02FB: JZ Label0014
Addr : 02FB:          0A 0C  : jz Address = 0309 12
Addr : 02FD:             01  : Drop Anchor   
Addr : 02FE: PBASE Constant Address of Label0016
Addr : 02FE:       87 84 2E  : Memory Op Byte PBASE + ADDRESS Address = 042E
Addr : 0301:          05 07  : Call Sub 7    
Addr : 0303:             01  : Drop Anchor   
Addr : 0304:             60  : Variable Operation Local Offset - 0 Read
Addr : 0305:          05 08  : Call Sub 8    
Addr : 0307: JMP Label0015
Addr : 0307:          04 06  : Jmp 030F 6    
Addr : 0309: Label0014
Addr : 0309:             01  : Drop Anchor   
Addr : 030A: PBASE Constant Address of Label0018
Addr : 030A:       87 84 41  : Memory Op Byte PBASE + ADDRESS Address = 0441
Addr : 030D:          05 07  : Call Sub 7    
Addr : 030F: Label0017
Addr : 030F: Label0015
Addr : 030F:             01  : Drop Anchor   
Addr : 0310:          05 06  : Call Sub 6    
Addr : 0312: Label0011
Addr : 0312: Label0012
Addr : 0312:             01  : Drop Anchor   
Addr : 0313: PBASE Constant Address of Label0019
Addr : 0313:       87 84 45  : Memory Op Byte PBASE + ADDRESS Address = 0445
Addr : 0316:          05 07  : Call Sub 7    
Addr : 0318:             34  : Constant 0 $FFFFFFFF
Addr : 0319:          C7 58  : Memory Op Long PBASE + ADDRESS Address = 0058
Addr : 031B:             35  : Constant 1 $00000000
Addr : 031C:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 031D:             36  : Constant 2 $00000001
Addr : 031E:             EC  : Math Op +     
Addr : 031F:             61  : Variable Operation Local Offset - 0 Write
Addr : 0320:             60  : Variable Operation Local Offset - 0 Read
Addr : 0321:             35  : Constant 1 $00000000
Addr : 0322:             F9  : Math Op <     
Addr : 0323: JZ Label001A
Addr : 0323:          0A 0C  : jz Address = 0331 12
Addr : 0325:             01  : Drop Anchor   
Addr : 0326: PBASE Constant Address of Label001C
Addr : 0326:       87 84 5C  : Memory Op Byte PBASE + ADDRESS Address = 045C
Addr : 0329:          05 07  : Call Sub 7    
Addr : 032B:             01  : Drop Anchor   
Addr : 032C:             60  : Variable Operation Local Offset - 0 Read
Addr : 032D:          05 08  : Call Sub 8    
Addr : 032F: JMP Label001B
Addr : 032F:          04 06  : Jmp 0337 6    
Addr : 0331: Label001A
Addr : 0331:             01  : Drop Anchor   
Addr : 0332: PBASE Constant Address of Label001E
Addr : 0332:       87 84 6F  : Memory Op Byte PBASE + ADDRESS Address = 046F
Addr : 0335:          05 07  : Call Sub 7    
Addr : 0337: Label001D
Addr : 0337: Label001B
Addr : 0337:             01  : Drop Anchor   
Addr : 0338:          05 06  : Call Sub 6    
Addr : 033A:             01  : Drop Anchor   
Addr : 033B: PBASE Constant Address of Label001F
Addr : 033B:       87 84 73  : Memory Op Byte PBASE + ADDRESS Address = 0473
Addr : 033E:          05 07  : Call Sub 7    
Addr : 0340:             01  : Drop Anchor   
Addr : 0341:          05 06  : Call Sub 6    
Addr : 0343: Label0020
Addr : 0343:       88 82 54  : Memory Op Byte VBASE + READ Address = 0254
Addr : 0346:          37 06  : Constant Mask Y=6 00000080
Addr : 0348:             E8  : Math Op &     
Addr : 0349: JZ Label0023
Addr : 0349:          0A 0E  : jz Address = 0359 14
Addr : 034B:             01  : Drop Anchor   
Addr : 034C:          05 02  : Call Sub 2    
Addr : 034E:             35  : Constant 1 $00000000
Addr : 034F:       89 82 55  : Memory Op Byte VBASE + WRITE Address = 0255
Addr : 0352:          37 06  : Constant Mask Y=6 00000080
Addr : 0354:             E7  : Math Op !     
Addr : 0355:    8A 82 54 48  : Memory Op Byte VBASE + ASSIGN Address = 0254 BitMathop &
Addr : 0359: Label0023
Addr : 0359: Label0024
Addr : 0359:       88 82 51  : Memory Op Byte VBASE + READ Address = 0251
Addr : 035C:          37 03  : Constant Mask Y=3 00000010
Addr : 035E:             E8  : Math Op &     
Addr : 035F: JZ Label0025
Addr : 035F:          0A 11  : jz Address = 0372 17
Addr : 0361:             01  : Drop Anchor   
Addr : 0362:       88 82 53  : Memory Op Byte VBASE + READ Address = 0253
Addr : 0365:       06 0C 0F  : Call Obj.Sub 12 15
Addr : 0368:             01  : Drop Anchor   
Addr : 0369:          05 0B  : Call Sub 11   
Addr : 036B:          37 03  : Constant Mask Y=3 00000010
Addr : 036D:             E7  : Math Op !     
Addr : 036E:    8A 82 51 48  : Memory Op Byte VBASE + ASSIGN Address = 0251 BitMathop &
Addr : 0372: Label0025
Addr : 0372: Label0026
Addr : 0372:       88 82 50  : Memory Op Byte VBASE + READ Address = 0250
Addr : 0375:          37 04  : Constant Mask Y=4 00000020
Addr : 0377:             E8  : Math Op &     
Addr : 0378: JZ Label0027
Addr : 0378:          0A 17  : jz Address = 0391 23
Addr : 037A:             00  : Drop Anchor Push 
Addr : 037B:       06 0D 08  : Call Obj.Sub 13 8
Addr : 037E: JZ Label0029
Addr : 037E:          0A 11  : jz Address = 0391 17
Addr : 0380:             00  : Drop Anchor Push 
Addr : 0381:       06 0D 06  : Call Obj.Sub 13 6
Addr : 0384:       89 82 52  : Memory Op Byte VBASE + WRITE Address = 0252
Addr : 0387:             01  : Drop Anchor   
Addr : 0388:          05 0B  : Call Sub 11   
Addr : 038A:          37 04  : Constant Mask Y=4 00000020
Addr : 038C:             E7  : Math Op !     
Addr : 038D:    8A 82 50 48  : Memory Op Byte VBASE + ASSIGN Address = 0250 BitMathop &
Addr : 0391: Label0029
Addr : 0391: Label002A
Addr : 0391: Label0027
Addr : 0391: Label0028
Addr : 0391: Label0021
Addr : 0391: JMP Label0020
Addr : 0391:       04 FF AF  : Jmp 0343 -81  
Addr : 0394: Label0022
Addr : 0394:             01  : Drop Anchor   
Addr : 0395:          05 06  : Call Sub 6    
Addr : 0397:             01  : Drop Anchor   
Addr : 0398: PBASE Constant Address of Label002B
Addr : 0398:       87 84 81  : Memory Op Byte PBASE + ADDRESS Address = 0481
Addr : 039B:          05 07  : Call Sub 7    
Addr : 039D:             01  : Drop Anchor   
Addr : 039E:          05 06  : Call Sub 6    
Addr : 03A0:             32  : Return        
Addr : 03A1: Label0002
Addr : 03A1: Data : 53 74 61 72 74 69 6E 67  Starting
Addr : 03A9: Data : 20 50 72 6F 70 49 4F 2E   PropIO.
Addr : 03B1: Data : 2E 2E 00                 ...
Addr : 03B4: Label0003
Addr : 03B4: Data : 49 6E 69 74 69 61 6C 69  Initiali
Addr : 03BC: Data : 7A 69 6E 67 20 56 69 64  zing Vid
Addr : 03C4: Data : 65 6F 2E 2E 2E 00        eo....
Addr : 03CA: Label0006
Addr : 03CA: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 03D2: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 03DA: Data : 3A 20 00                 : .
Addr : 03DD: Label0008
Addr : 03DD: Data : 20 4F 4B 00               OK.
Addr : 03E1: Label0009
Addr : 03E1: Data : 49 6E 69 74 69 61 6C 69  Initiali
Addr : 03E9: Data : 7A 69 6E 67 20 50 72 6F  zing Pro
Addr : 03F1: Data : 70 49 4F 2E 2E 2E 00     pIO....
Addr : 03F8: Label000A
Addr : 03F8: Data : 20 4F 4B 00               OK.
Addr : 03FC: Label000B
Addr : 03FC: Data : 49 6E 69 74 69 61 6C 69  Initiali
Addr : 0404: Data : 7A 69 6E 67 20 4B 65 79  zing Key
Addr : 040C: Data : 62 6F 61 72 64 2E 2E 2E  board...
Addr : 0414: Data : 00                       .
Addr : 0415: Label000E
Addr : 0415: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 041D: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 0425: Data : 3A 20 00                 : .
Addr : 0428: Label0010
Addr : 0428: Data : 20 4F 4B 00               OK.
Addr : 042C: Label0013
Addr : 042C: Data : 53 74 61 72 74 69 6E 67  Starting
Addr : 0434: Data : 20 54 69 6D 65 72 2E 2E   Timer..
Addr : 043C: Data : 2E 00                    ..
Addr : 043E: Label0016
Addr : 043E: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 0446: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 044E: Data : 3A 20 00                 : .
Addr : 0451: Label0018
Addr : 0451: Data : 20 4F 4B 00               OK.
Addr : 0455: Label0019
Addr : 0455: Data : 53 74 61 72 74 69 6E 67  Starting
Addr : 045D: Data : 20 50 6F 72 74 49 4F 20   PortIO 
Addr : 0465: Data : 63 6F 67 2E 2E 2E 00     cog....
Addr : 046C: Label001C
Addr : 046C: Data : 20 46 61 69 6C 65 64 21   Failed!
Addr : 0474: Data : 20 20 20 45 72 72 6F 72     Error
Addr : 047C: Data : 3A 20 00                 : .
Addr : 047F: Label001E
Addr : 047F: Data : 20 4F 4B 00               OK.
Addr : 0483: Label001F
Addr : 0483: Data : 50 72 6F 70 49 4F 20 52  PropIO R
Addr : 048B: Data : 65 61 64 79 21 00        eady!.
Addr : 0491: Label002B
Addr : 0491: Data : 50 72 6F 70 49 4F 20 53  PropIO S
Addr : 0499: Data : 68 75 74 64 6F 77 6E 21  hutdown!
Addr : 04A1: Data : 00                       .
|===========================================================================|
Spin Block ProcessDiskCmd with 0 Parameters and 0 Extra Stack Longs. Method 2
PRI ProcessDiskCmd

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 04A2:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 04A5:          37 03  : Constant Mask Y=3 00000010
Addr : 04A7:             FC  : Math Op ==    
Addr : 04A8: JZ Label0002
Addr : 04A8:          0A 0E  : jz Address = 04B8 14
Addr : 04AA:             34  : Constant 0 $FFFFFFFF
Addr : 04AB:             41  : Variable Operation Global Offset - 0 Write
Addr : 04AC:          37 06  : Constant Mask Y=6 00000080
Addr : 04AE:       89 82 54  : Memory Op Byte VBASE + WRITE Address = 0254
Addr : 04B1:             35  : Constant 1 $00000000
Addr : 04B2:       C9 82 48  : Memory Op Long VBASE + WRITE Address = 0248
Addr : 04B5: JMP Label0003
Addr : 04B5:       04 80 E3  : Jmp 059B 227  
Addr : 04B8: Label0002
Addr : 04B8:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 04BB:          37 04  : Constant Mask Y=4 00000020
Addr : 04BD:             FC  : Math Op ==    
Addr : 04BE: JZ Label0004
Addr : 04BE:          0A 1F  : jz Address = 04DF 31
Addr : 04C0:             00  : Drop Anchor Push 
Addr : 04C1:          05 03  : Call Sub 3    
Addr : 04C3:       C9 82 48  : Memory Op Long VBASE + WRITE Address = 0248
Addr : 04C6:       C8 82 48  : Memory Op Long VBASE + READ Address = 0248
Addr : 04C9:             35  : Constant 1 $00000000
Addr : 04CA:             F9  : Math Op <     
Addr : 04CB: JZ Label0005
Addr : 04CB:          0A 0F  : jz Address = 04DC 15
Addr : 04CD:       88 82 54  : Memory Op Byte VBASE + READ Address = 0254
Addr : 04D0:          37 05  : Constant Mask Y=5 00000040
Addr : 04D2:             EA  : Math Op |     
Addr : 04D3:       89 82 54  : Memory Op Byte VBASE + WRITE Address = 0254
Addr : 04D6:       C8 82 48  : Memory Op Long VBASE + READ Address = 0248
Addr : 04D9:             35  : Constant 1 $00000000
Addr : 04DA:          D9 04  : Memory Op Long VBASE + POP Index WRITE Address = 0004
Addr : 04DC: Label0005
Addr : 04DC: Label0006
Addr : 04DC: JMP Label0003
Addr : 04DC:       04 80 BC  : Jmp 059B 188  
Addr : 04DF: Label0004
Addr : 04DF:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 04E2:          38 30  : Constant 1 Bytes - 30 
Addr : 04E4:             FC  : Math Op ==    
Addr : 04E5: JZ Label0007
Addr : 04E5:          0A 25  : jz Address = 050C 37
Addr : 04E7:             35  : Constant 1 $00000000
Addr : 04E8:          D8 04  : Memory Op Long VBASE + POP Index READ Address = 0004
Addr : 04EA:             41  : Variable Operation Global Offset - 0 Write
Addr : 04EB:             00  : Drop Anchor Push 
Addr : 04EC:             40  : Variable Operation Global Offset - 0 Read
Addr : 04ED:             47  : Variable Operation Global Offset - 1 Address
Addr : 04EE:          05 04  : Call Sub 4    
Addr : 04F0:       C9 82 48  : Memory Op Long VBASE + WRITE Address = 0248
Addr : 04F3:       C8 82 48  : Memory Op Long VBASE + READ Address = 0248
Addr : 04F6:             35  : Constant 1 $00000000
Addr : 04F7:             F9  : Math Op <     
Addr : 04F8: JZ Label0008
Addr : 04F8:          0A 0F  : jz Address = 0509 15
Addr : 04FA:       88 82 54  : Memory Op Byte VBASE + READ Address = 0254
Addr : 04FD:          37 05  : Constant Mask Y=5 00000040
Addr : 04FF:             EA  : Math Op |     
Addr : 0500:       89 82 54  : Memory Op Byte VBASE + WRITE Address = 0254
Addr : 0503:       C8 82 48  : Memory Op Long VBASE + READ Address = 0248
Addr : 0506:             35  : Constant 1 $00000000
Addr : 0507:          D9 04  : Memory Op Long VBASE + POP Index WRITE Address = 0004
Addr : 0509: Label0008
Addr : 0509: Label0009
Addr : 0509: JMP Label0003
Addr : 0509:       04 80 8F  : Jmp 059B 143  
Addr : 050C: Label0007
Addr : 050C:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 050F:          37 05  : Constant Mask Y=5 00000040
Addr : 0511:             FC  : Math Op ==    
Addr : 0512: JZ Label000A
Addr : 0512:          0A 0C  : jz Address = 0520 12
Addr : 0514:             35  : Constant 1 $00000000
Addr : 0515:          D8 04  : Memory Op Long VBASE + POP Index READ Address = 0004
Addr : 0517:             41  : Variable Operation Global Offset - 0 Write
Addr : 0518:             47  : Variable Operation Global Offset - 1 Address
Addr : 0519:             35  : Constant 1 $00000000
Addr : 051A:          37 08  : Constant Mask Y=8 00000200
Addr : 051C:             18  : ByteFill(Start, Value, Count)
Addr : 051D: JMP Label0003
Addr : 051D:       04 80 7B  : Jmp 059B 123  
Addr : 0520: Label000A
Addr : 0520:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 0523:          38 50  : Constant 1 Bytes - 50 
Addr : 0525:             FC  : Math Op ==    
Addr : 0526: JZ Label000B
Addr : 0526:          0A 21  : jz Address = 0549 33
Addr : 0528:             00  : Drop Anchor Push 
Addr : 0529:             40  : Variable Operation Global Offset - 0 Read
Addr : 052A:             47  : Variable Operation Global Offset - 1 Address
Addr : 052B:          05 05  : Call Sub 5    
Addr : 052D:       C9 82 48  : Memory Op Long VBASE + WRITE Address = 0248
Addr : 0530:       C8 82 48  : Memory Op Long VBASE + READ Address = 0248
Addr : 0533:             35  : Constant 1 $00000000
Addr : 0534:             F9  : Math Op <     
Addr : 0535: JZ Label000C
Addr : 0535:          0A 0F  : jz Address = 0546 15
Addr : 0537:       88 82 54  : Memory Op Byte VBASE + READ Address = 0254
Addr : 053A:          37 05  : Constant Mask Y=5 00000040
Addr : 053C:             EA  : Math Op |     
Addr : 053D:       89 82 54  : Memory Op Byte VBASE + WRITE Address = 0254
Addr : 0540:       C8 82 48  : Memory Op Long VBASE + READ Address = 0248
Addr : 0543:             35  : Constant 1 $00000000
Addr : 0544:          D9 04  : Memory Op Long VBASE + POP Index WRITE Address = 0004
Addr : 0546: Label000C
Addr : 0546: Label000D
Addr : 0546: JMP Label0003
Addr : 0546:       04 80 52  : Jmp 059B 82   
Addr : 0549: Label000B
Addr : 0549:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 054C:             36  : Constant 2 $00000001
Addr : 054D:             FC  : Math Op ==    
Addr : 054E: JZ Label000E
Addr : 054E:          0A 09  : jz Address = 0559 9
Addr : 0550:       C8 82 48  : Memory Op Long VBASE + READ Address = 0248
Addr : 0553:             35  : Constant 1 $00000000
Addr : 0554:          D9 04  : Memory Op Long VBASE + POP Index WRITE Address = 0004
Addr : 0556: JMP Label0003
Addr : 0556:       04 80 42  : Jmp 059B 66   
Addr : 0559: Label000E
Addr : 0559:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 055C:          37 00  : Constant Mask Y=0 00000002
Addr : 055E:             FC  : Math Op ==    
Addr : 055F: JZ Label000F
Addr : 055F:          0A 08  : jz Address = 0569 8
Addr : 0561:       C8 82 4C  : Memory Op Long VBASE + READ Address = 024C
Addr : 0564:             35  : Constant 1 $00000000
Addr : 0565:          D9 04  : Memory Op Long VBASE + POP Index WRITE Address = 0004
Addr : 0567: JMP Label0003
Addr : 0567:          04 32  : Jmp 059B 50   
Addr : 0569: Label000F
Addr : 0569:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 056C:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 056E:             FC  : Math Op ==    
Addr : 056F: JZ Label0010
Addr : 056F:          0A 09  : jz Address = 057A 9
Addr : 0571:             02  : Drop Anchor Push Try
Addr : 0572:       06 0E 04  : Call Obj.Sub 14 4
Addr : 0575:             35  : Constant 1 $00000000
Addr : 0576:          D9 04  : Memory Op Long VBASE + POP Index WRITE Address = 0004
Addr : 0578: JMP Label0003
Addr : 0578:          04 21  : Jmp 059B 33   
Addr : 057A: Label0010
Addr : 057A:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 057D:          37 01  : Constant Mask Y=1 00000004
Addr : 057F:             FC  : Math Op ==    
Addr : 0580: JZ Label0011
Addr : 0580:          0A 0A  : jz Address = 058C 10
Addr : 0582:             02  : Drop Anchor Push Try
Addr : 0583:             47  : Variable Operation Global Offset - 1 Address
Addr : 0584:       06 0E 05  : Call Obj.Sub 14 5
Addr : 0587:       C9 82 48  : Memory Op Long VBASE + WRITE Address = 0248
Addr : 058A: JMP Label0003
Addr : 058A:          04 0F  : Jmp 059B 15   
Addr : 058C: Label0011
Addr : 058C:       88 82 55  : Memory Op Byte VBASE + READ Address = 0255
Addr : 058F:          38 F0  : Constant 1 Bytes - F0 
Addr : 0591:             FC  : Math Op ==    
Addr : 0592: JZ Label0012
Addr : 0592:          0A 07  : jz Address = 059B 7
Addr : 0594:    3A 60 00 00  : Constant 3 Bytes - 60 00 00 
Addr : 0598:             35  : Constant 1 $00000000
Addr : 0599:          D9 04  : Memory Op Long VBASE + POP Index WRITE Address = 0004
Addr : 059B: Label0012
Addr : 059B: Label0003
Addr : 059B:             32  : Return        
|===========================================================================|
Spin Block InitCard with 0 Parameters and 0 Extra Stack Longs. Method 3
PRI InitCard

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 059C:             35  : Constant 1 $00000000
Addr : 059D:       C9 82 4C  : Memory Op Long VBASE + WRITE Address = 024C
Addr : 05A0:             02  : Drop Anchor Push Try
Addr : 05A1:          38 18  : Constant 1 Bytes - 18 
Addr : 05A3:       06 0E 01  : Call Obj.Sub 14 1
Addr : 05A6:             61  : Variable Operation Local Offset - 0 Write
Addr : 05A7:             60  : Variable Operation Local Offset - 0 Read
Addr : 05A8:             35  : Constant 1 $00000000
Addr : 05A9:             FA  : Math Op >     
Addr : 05AA: JZ Label0002
Addr : 05AA:          0A 04  : jz Address = 05B0 4
Addr : 05AC:             60  : Variable Operation Local Offset - 0 Read
Addr : 05AD:       C9 82 4C  : Memory Op Long VBASE + WRITE Address = 024C
Addr : 05B0: Label0002
Addr : 05B0: Label0003
Addr : 05B0:             32  : Return        
|===========================================================================|
Spin Block ReadSector with 2 Parameters and 0 Extra Stack Longs. Method 4
PRI ReadSector(Sector, Buffer)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Sector
Local Parameter DBASE:0008 - Buffer
|===========================================================================|
Addr : 05B1:             02  : Drop Anchor Push Try
Addr : 05B2:             64  : Variable Operation Local Offset - 1 Read
Addr : 05B3:             68  : Variable Operation Local Offset - 2 Read
Addr : 05B4:       06 0E 02  : Call Obj.Sub 14 2
Addr : 05B7:             61  : Variable Operation Local Offset - 0 Write
Addr : 05B8:             32  : Return        
|===========================================================================|
Spin Block WriteSector with 2 Parameters and 0 Extra Stack Longs. Method 5
PRI WriteSector(Sector, Buffer)    

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Sector
Local Parameter DBASE:0008 - Buffer
|===========================================================================|
Addr : 05B9:             02  : Drop Anchor Push Try
Addr : 05BA:             64  : Variable Operation Local Offset - 1 Read
Addr : 05BB:             68  : Variable Operation Local Offset - 2 Read
Addr : 05BC:       06 0E 03  : Call Obj.Sub 14 3
Addr : 05BF:             61  : Variable Operation Local Offset - 0 Write
Addr : 05C0:             32  : Return        
|===========================================================================|
Spin Block MsgNewLine with 0 Parameters and 0 Extra Stack Longs. Method 6
PRI MsgNewLine

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 05C1:             01  : Drop Anchor   
Addr : 05C2:       06 0F 17  : Call Obj.Sub 15 23
Addr : 05C5:             01  : Drop Anchor   
Addr : 05C6:          38 0D  : Constant 1 Bytes - 0D 
Addr : 05C8:       06 0C 0F  : Call Obj.Sub 12 15
Addr : 05CB:             01  : Drop Anchor   
Addr : 05CC:          38 0A  : Constant 1 Bytes - 0A 
Addr : 05CE:       06 0C 0F  : Call Obj.Sub 12 15
Addr : 05D1:             32  : Return        
|===========================================================================|
Spin Block MsgStr with 1 Parameters and 0 Extra Stack Longs. Method 7
PRI MsgStr(StrPtr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - StrPtr
|===========================================================================|
Addr : 05D2:             01  : Drop Anchor   
Addr : 05D3:             64  : Variable Operation Local Offset - 1 Read
Addr : 05D4:       06 0F 07  : Call Obj.Sub 15 7
Addr : 05D7:             01  : Drop Anchor   
Addr : 05D8:             64  : Variable Operation Local Offset - 1 Read
Addr : 05D9:       06 0C 0B  : Call Obj.Sub 12 11
Addr : 05DC:             32  : Return        
|===========================================================================|
Spin Block MsgDec with 1 Parameters and 0 Extra Stack Longs. Method 8
PRI MsgDec(Val)                  

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Val
|===========================================================================|
Addr : 05DD:             01  : Drop Anchor   
Addr : 05DE:             64  : Variable Operation Local Offset - 1 Read
Addr : 05DF:       06 0F 0A  : Call Obj.Sub 15 10
Addr : 05E2:             01  : Drop Anchor   
Addr : 05E3:             64  : Variable Operation Local Offset - 1 Read
Addr : 05E4:       06 0C 08  : Call Obj.Sub 12 8
Addr : 05E7:             32  : Return        
|===========================================================================|
Spin Block MsgHex with 2 Parameters and 0 Extra Stack Longs. Method 9
PRI MsgHex(Val, Digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - Val
Local Parameter DBASE:0008 - Digits
|===========================================================================|
Addr : 05E8:             01  : Drop Anchor   
Addr : 05E9:             64  : Variable Operation Local Offset - 1 Read
Addr : 05EA:             68  : Variable Operation Local Offset - 2 Read
Addr : 05EB:       06 0F 0E  : Call Obj.Sub 15 14
Addr : 05EE:             01  : Drop Anchor   
Addr : 05EF:             64  : Variable Operation Local Offset - 1 Read
Addr : 05F0:             68  : Variable Operation Local Offset - 2 Read
Addr : 05F1:       06 0C 0A  : Call Obj.Sub 12 10
Addr : 05F4:             32  : Return        
|===========================================================================|
Spin Block Timer with 0 Parameters and 0 Extra Stack Longs. Method 10
PRI Timer

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 05F5:             35  : Constant 1 $00000000
Addr : 05F6:       C9 82 44  : Memory Op Long VBASE + WRITE Address = 0244
Addr : 05F9: Label0002
Addr : 05F9:             35  : Constant 1 $00000000
Addr : 05FA:             C0  : Memory Op Long POP Address READ 
Addr : 05FB:             36  : Constant 2 $00000001
Addr : 05FC:             F4  : Math Op *     
Addr : 05FD:          3F 91  : Register op CNT Read
Addr : 05FF:             EC  : Math Op +     
Addr : 0600:             23  : WaitCnt(count)
Addr : 0601:       C8 82 44  : Memory Op Long VBASE + READ Address = 0244
Addr : 0604:             35  : Constant 1 $00000000
Addr : 0605:             FA  : Math Op >     
Addr : 0606: JZ Label0005
Addr : 0606:          0A 0F  : jz Address = 0617 15
Addr : 0608:       C8 82 44  : Memory Op Long VBASE + READ Address = 0244
Addr : 060B:             36  : Constant 2 $00000001
Addr : 060C:             FC  : Math Op ==    
Addr : 060D: JZ Label0007
Addr : 060D:          0A 04  : jz Address = 0613 4
Addr : 060F:             01  : Drop Anchor   
Addr : 0610:       06 0C 03  : Call Obj.Sub 12 3
Addr : 0613: Label0007
Addr : 0613: Label0008
Addr : 0613:    CA 82 44 3E  : Memory Op Long VBASE + ASSIGN Address = 0244 VAR-- post-dec Long
Addr : 0617: Label0005
Addr : 0617: Label0006
Addr : 0617: Label0003
Addr : 0617: JMP Label0002
Addr : 0617:          04 60  : Jmp 05F9 -32  
Addr : 0619: Label0004
Addr : 0619:             32  : Return        
|===========================================================================|
Spin Block Activity with 0 Parameters and 0 Extra Stack Longs. Method 11
PRI Activity

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 061A:             35  : Constant 1 $00000000
Addr : 061B:             35  : Constant 1 $00000000
Addr : 061C:             FA  : Math Op >     
Addr : 061D: JZ Label0002
Addr : 061D:          0A 0F  : jz Address = 062E 15
Addr : 061F:       C8 82 44  : Memory Op Long VBASE + READ Address = 0244
Addr : 0622:             35  : Constant 1 $00000000
Addr : 0623:             FC  : Math Op ==    
Addr : 0624: JZ Label0004
Addr : 0624:          0A 04  : jz Address = 062A 4
Addr : 0626:             01  : Drop Anchor   
Addr : 0627:       06 0C 02  : Call Obj.Sub 12 2
Addr : 062A: Label0004
Addr : 062A: Label0005
Addr : 062A:             35  : Constant 1 $00000000
Addr : 062B:       C9 82 44  : Memory Op Long VBASE + WRITE Address = 0244
Addr : 062E: Label0002
Addr : 062E: Label0003
Addr : 062E:             32  : Return        
|===========================================================================|
Object AnsiTerm
Object Base is 0630
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0004 Variable sync
VBASE : 0004 LONG Size 0004 Variable loc
VBASE : 0008 LONG Size 0004 Variable xloc
VBASE : 000C LONG Size 0004 Variable yloc
VBASE : 0010 LONG Size 0004 Variable arg0
VBASE : 0014 LONG Size 0004 Variable arg1
VBASE : 0018 LONG Size 0004 Variable vgaBasePin
VBASE : 001C WORD Size 12C0 Variable screen
VBASE : 12DC WORD Size 00A0 Variable tmpl
VBASE : 137C WORD Size 0002 Variable pos
VBASE : 137E WORD Size 0002 Variable regionTop
VBASE : 1380 WORD Size 0002 Variable regionBot
VBASE : 1382 WORD Size 0002 Variable curAttr
VBASE : 1384 WORD Size 0002 Variable bold
VBASE : 1386 WORD Size 0002 Variable underscore
VBASE : 1388 WORD Size 0002 Variable blink
VBASE : 138A WORD Size 0002 Variable reverse
VBASE : 138C WORD Size 0002 Variable fg
VBASE : 138E WORD Size 0002 Variable bg
VBASE : 1390 BYTE Size 0006 Variable cursor
VBASE : 1396 BYTE Size 0001 Variable state
VBASE : 1397 BYTE Size 0001 Variable lastc
|===========================================================================|
Object DAT Blocks
|===========================================================================|
06B4(0000) 00 00       |   cmap        WORD        0,4,2,6,1,5,3,7                ' Map ANSI color codes to VGA driver RGB
06B6(0000) 04 00       | 
06B8(0001) 02 00       | 
06BA(0001) 06 00       | 
06BC(0002) 01 00       | 
06BE(0002) 05 00       | 
06C0(0003) 03 00       | 
06C2(0003) 07 00       | 
|===========================================================================|
|===========================================================================|
Spin Block start with 1 Parameters and 2 Extra Stack Longs. Method 1
PUB start(BasePin) | i, char

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - BasePin
Local Variable  DBASE:0008 - i
Local Variable  DBASE:000C - char
|===========================================================================|
Addr : 06C4:             64  : Variable Operation Local Offset - 1 Read
Addr : 06C5:             59  : Variable Operation Global Offset - 6 Write
Addr : 06C6:          38 06  : Constant 1 Bytes - 06 
Addr : 06C8:          37 00  : Constant Mask Y=0 00000002
Addr : 06CA:       99 93 90  : Memory Op Byte VBASE + POP Index WRITE Address = 1390
Addr : 06CD:             35  : Constant 1 $00000000
Addr : 06CE:             35  : Constant 1 $00000000
Addr : 06CF:    9A 93 90 80  : Memory Op Byte VBASE + POP Index ASSIGN Address = 1390 Write Push
Addr : 06D3:             49  : Variable Operation Global Offset - 2 Write
Addr : 06D4:             35  : Constant 1 $00000000
Addr : 06D5:             36  : Constant 2 $00000001
Addr : 06D6:    9A 93 90 80  : Memory Op Byte VBASE + POP Index ASSIGN Address = 1390 Write Push
Addr : 06DA:             4D  : Variable Operation Global Offset - 3 Write
Addr : 06DB:             48  : Variable Operation Global Offset - 2 Read
Addr : 06DC:             4C  : Variable Operation Global Offset - 3 Read
Addr : 06DD:          38 50  : Constant 1 Bytes - 50 
Addr : 06DF:             F4  : Math Op *     
Addr : 06E0:             EC  : Math Op +     
Addr : 06E1:             45  : Variable Operation Global Offset - 1 Write
Addr : 06E2:             35  : Constant 1 $00000000
Addr : 06E3:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 06E6:             35  : Constant 1 $00000000
Addr : 06E7:       A9 93 7E  : Memory Op Word VBASE + WRITE Address = 137E
Addr : 06EA:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 06ED:       A9 93 80  : Memory Op Word VBASE + WRITE Address = 1380
Addr : 06F0:             35  : Constant 1 $00000000
Addr : 06F1:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 06F4:             35  : Constant 1 $00000000
Addr : 06F5:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 06F8:             35  : Constant 1 $00000000
Addr : 06F9:       A9 93 86  : Memory Op Word VBASE + WRITE Address = 1386
Addr : 06FC:             35  : Constant 1 $00000000
Addr : 06FD:       A9 93 88  : Memory Op Word VBASE + WRITE Address = 1388
Addr : 0700:             35  : Constant 1 $00000000
Addr : 0701:       A9 93 8A  : Memory Op Word VBASE + WRITE Address = 138A
Addr : 0704:             35  : Constant 1 $00000000
Addr : 0705:       A9 93 8C  : Memory Op Word VBASE + WRITE Address = 138C
Addr : 0708:             35  : Constant 1 $00000000
Addr : 0709:       A9 93 8E  : Memory Op Word VBASE + WRITE Address = 138E
Addr : 070C:             01  : Drop Anchor   
Addr : 070D:             35  : Constant 1 $00000000
Addr : 070E:          05 12  : Call Sub 18   
Addr : 0710:             32  : Return        
|===========================================================================|
Spin Block vidOn with 0 Parameters and 0 Extra Stack Longs. Method 2
PUB vidOn

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0711:             00  : Drop Anchor Push 
Addr : 0712:             58  : Variable Operation Global Offset - 6 Read
Addr : 0713:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0715:       8B 93 90  : Memory Op Byte VBASE + ADDRESS Address = 1390
Addr : 0718:             43  : Variable Operation Global Offset - 0 Address
Addr : 0719:       06 1F 01  : Call Obj.Sub 31 1
Addr : 071C:             E7  : Math Op !     
Addr : 071D: JZ Label0002
Addr : 071D:          0A 02  : jz Address = 0721 2
Addr : 071F:             35  : Constant 1 $00000000
Addr : 0720:             33  : Return value  
Addr : 0721: Label0002
Addr : 0721: Label0003
Addr : 0721:             32  : Return        
|===========================================================================|
Spin Block vidOff with 0 Parameters and 0 Extra Stack Longs. Method 3
PUB vidOff

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0722:             01  : Drop Anchor   
Addr : 0723:       06 1F 02  : Call Obj.Sub 31 2
Addr : 0726:             32  : Return        
|===========================================================================|
Spin Block speakerFrequency with 1 Parameters and 0 Extra Stack Longs. Method 4
PUB speakerFrequency(newFrequency)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - newFrequency
|===========================================================================|
Addr : 0727:             00  : Drop Anchor Push 
Addr : 0728:             64  : Variable Operation Local Offset - 1 Read
Addr : 0729:          38 0D  : Constant 1 Bytes - 0D 
Addr : 072B:       06 20 01  : Call Obj.Sub 32 1
Addr : 072E:             61  : Variable Operation Local Offset - 0 Write
Addr : 072F:             32  : Return        
|===========================================================================|
Spin Block speakerVolume with 1 Parameters and 0 Extra Stack Longs. Method 5
PUB speakerVolume(newVolume)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - newVolume
|===========================================================================|
Addr : 0730:             00  : Drop Anchor Push 
Addr : 0731:             64  : Variable Operation Local Offset - 1 Read
Addr : 0732:          38 0D  : Constant 1 Bytes - 0D 
Addr : 0734:       06 20 02  : Call Obj.Sub 32 2
Addr : 0737:             61  : Variable Operation Local Offset - 0 Write
Addr : 0738:             32  : Return        
|===========================================================================|
Spin Block beep with 0 Parameters and 0 Extra Stack Longs. Method 6
PUB beep

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0739:             01  : Drop Anchor   
Addr : 073A:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 073D:          38 0D  : Constant 1 Bytes - 0D 
Addr : 073F:       06 20 01  : Call Obj.Sub 32 1
Addr : 0742:             35  : Constant 1 $00000000
Addr : 0743:             C0  : Memory Op Long POP Address READ 
Addr : 0744:          37 01  : Constant Mask Y=1 00000004
Addr : 0746:             E2  : Math Op >>    
Addr : 0747:          3F 91  : Register op CNT Read
Addr : 0749:             EC  : Math Op +     
Addr : 074A:             23  : WaitCnt(count)
Addr : 074B:             01  : Drop Anchor   
Addr : 074C:             34  : Constant 0 $FFFFFFFF
Addr : 074D:          38 0D  : Constant 1 Bytes - 0D 
Addr : 074F:       06 20 01  : Call Obj.Sub 32 1
Addr : 0752:             32  : Return        
|===========================================================================|
Spin Block cls with 0 Parameters and 0 Extra Stack Longs. Method 7
PUB cls

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0753:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0755:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0758:          37 04  : Constant Mask Y=4 00000020
Addr : 075A:             EA  : Math Op |     
Addr : 075B:       39 09 60  : Constant 2 Bytes - 09 60 
Addr : 075E:             19  : WordFill(Start, Value, Count)
Addr : 075F:             32  : Return        
|===========================================================================|
Spin Block dec with 1 Parameters and 1 Extra Stack Longs. Method 8
PUB dec(value) | i

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Variable  DBASE:0008 - i
|===========================================================================|
Addr : 0760:             64  : Variable Operation Local Offset - 1 Read
Addr : 0761:             35  : Constant 1 $00000000
Addr : 0762:             F9  : Math Op <     
Addr : 0763: JZ Label0002
Addr : 0763:          0A 07  : jz Address = 076C 7
Addr : 0765:          66 46  : Variable Operation Local Offset - 1 Assign LongMathop -
Addr : 0767:             01  : Drop Anchor   
Addr : 0768:          38 2D  : Constant 1 Bytes - 2D 
Addr : 076A:          05 11  : Call Sub 17   
Addr : 076C: Label0002
Addr : 076C: Label0003
Addr : 076C: 3B 3B 9A CA 00  : Constant 4 Bytes - 3B 9A CA 00 
Addr : 0771:             69  : Variable Operation Local Offset - 2 Write
Addr : 0772:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0774: TJZ Label0006
Addr : 0774:          08 27  : tjz Address = 079D 39
Addr : 0776: Label0004
Addr : 0776:             64  : Variable Operation Local Offset - 1 Read
Addr : 0777:             68  : Variable Operation Local Offset - 2 Read
Addr : 0778:             FE  : Math Op =>    
Addr : 0779: JZ Label0007
Addr : 0779:          0A 10  : jz Address = 078B 16
Addr : 077B:             01  : Drop Anchor   
Addr : 077C:             64  : Variable Operation Local Offset - 1 Read
Addr : 077D:             68  : Variable Operation Local Offset - 2 Read
Addr : 077E:             F6  : Math Op /     
Addr : 077F:          38 30  : Constant 1 Bytes - 30 
Addr : 0781:             EC  : Math Op +     
Addr : 0782:          05 11  : Call Sub 17   
Addr : 0784:             68  : Variable Operation Local Offset - 2 Read
Addr : 0785:          66 57  : Variable Operation Local Offset - 1 Assign LongMathop //
Addr : 0787:          62 1C  : Variable Operation Local Offset - 0 Assign VAR~~ Post-set
Addr : 0789: JMP Label0008
Addr : 0789:          04 0C  : Jmp 0797 12   
Addr : 078B: Label0007
Addr : 078B:             60  : Variable Operation Local Offset - 0 Read
Addr : 078C:             68  : Variable Operation Local Offset - 2 Read
Addr : 078D:             36  : Constant 2 $00000001
Addr : 078E:             FC  : Math Op ==    
Addr : 078F:             F2  : Math Op OR    
Addr : 0790: JZ Label0009
Addr : 0790:          0A 05  : jz Address = 0797 5
Addr : 0792:             01  : Drop Anchor   
Addr : 0793:          38 30  : Constant 1 Bytes - 30 
Addr : 0795:          05 11  : Call Sub 17   
Addr : 0797: Label0009
Addr : 0797: Label0008
Addr : 0797:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0799:          6A 56  : Variable Operation Local Offset - 2 Assign LongMathop /
Addr : 079B: Label0005
Addr : 079B: DJNZ Label0004
Addr : 079B:          09 59  : djnz Address = 0776 -39
Addr : 079D: Label0006
Addr : 079D:             32  : Return        
|===========================================================================|
Spin Block bin with 2 Parameters and 0 Extra Stack Longs. Method 9
PUB bin(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 079E: Label0002
Addr : 079E:             68  : Variable Operation Local Offset - 2 Read
Addr : 079F:          37 04  : Constant Mask Y=4 00000020
Addr : 07A1:             FA  : Math Op >     
Addr : 07A2: JZ Label0004
Addr : 07A2:          0A 09  : jz Address = 07AD 9
Addr : 07A4:             01  : Drop Anchor   
Addr : 07A5:          38 30  : Constant 1 Bytes - 30 
Addr : 07A7:          05 11  : Call Sub 17   
Addr : 07A9:          6A 3E  : Variable Operation Local Offset - 2 Assign VAR-- post-dec Long
Addr : 07AB: Label0003
Addr : 07AB: JMP Label0002
Addr : 07AB:          04 71  : Jmp 079E -15  
Addr : 07AD: Label0004
Addr : 07AD:          37 04  : Constant Mask Y=4 00000020
Addr : 07AF:             68  : Variable Operation Local Offset - 2 Read
Addr : 07B0:             ED  : Math Op -     
Addr : 07B1:          66 43  : Variable Operation Local Offset - 1 Assign ByteMathop <<
Addr : 07B3:             68  : Variable Operation Local Offset - 2 Read
Addr : 07B4: TJZ Label0007
Addr : 07B4:          08 0D  : tjz Address = 07C3 13
Addr : 07B6: Label0005
Addr : 07B6:             01  : Drop Anchor   
Addr : 07B7:             36  : Constant 2 $00000001
Addr : 07B8:          66 C1  : Variable Operation Local Offset - 1 Assign BitMathop -< Push
Addr : 07BA:             36  : Constant 2 $00000001
Addr : 07BB:             E8  : Math Op &     
Addr : 07BC:          38 30  : Constant 1 Bytes - 30 
Addr : 07BE:             EC  : Math Op +     
Addr : 07BF:          05 11  : Call Sub 17   
Addr : 07C1: Label0006
Addr : 07C1: DJNZ Label0005
Addr : 07C1:          09 73  : djnz Address = 07B6 -13
Addr : 07C3: Label0007
Addr : 07C3:             32  : Return        
|===========================================================================|
Spin Block hex with 2 Parameters and 0 Extra Stack Longs. Method 10
PUB hex(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 07C4: Label0002
Addr : 07C4:             68  : Variable Operation Local Offset - 2 Read
Addr : 07C5:          37 02  : Constant Mask Y=2 00000008
Addr : 07C7:             FA  : Math Op >     
Addr : 07C8: JZ Label0004
Addr : 07C8:          0A 09  : jz Address = 07D3 9
Addr : 07CA:             01  : Drop Anchor   
Addr : 07CB:          38 30  : Constant 1 Bytes - 30 
Addr : 07CD:          05 11  : Call Sub 17   
Addr : 07CF:          6A 3E  : Variable Operation Local Offset - 2 Assign VAR-- post-dec Long
Addr : 07D1: Label0003
Addr : 07D1: JMP Label0002
Addr : 07D1:          04 71  : Jmp 07C4 -15  
Addr : 07D3: Label0004
Addr : 07D3:          37 02  : Constant Mask Y=2 00000008
Addr : 07D5:             68  : Variable Operation Local Offset - 2 Read
Addr : 07D6:             ED  : Math Op -     
Addr : 07D7:          37 00  : Constant Mask Y=0 00000002
Addr : 07D9:             E3  : Math Op <<    
Addr : 07DA:          66 43  : Variable Operation Local Offset - 1 Assign ByteMathop <<
Addr : 07DC:             68  : Variable Operation Local Offset - 2 Read
Addr : 07DD: TJZ Label0007
Addr : 07DD:          08 1B  : tjz Address = 07FA 27
Addr : 07DF: Label0005
Addr : 07DF:             01  : Drop Anchor   
Addr : 07E0:             35  : Constant 1 $00000000
Addr : 07E1: Constant Address of Label0008
Addr : 07E1:       39 01 C6  : Constant 2 Bytes - 01 C6 
Addr : 07E4:          37 01  : Constant Mask Y=1 00000004
Addr : 07E6:          66 C1  : Variable Operation Local Offset - 1 Assign BitMathop -< Push
Addr : 07E8:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 07EA:             E8  : Math Op &     
Addr : 07EB:          38 30  : Constant 1 Bytes - 30 
Addr : 07ED:          38 39  : Constant 1 Bytes - 39 
Addr : 07EF:             12  : Range LookUp  
Addr : 07F0:          38 41  : Constant 1 Bytes - 41 
Addr : 07F2:          38 46  : Constant 1 Bytes - 46 
Addr : 07F4:             12  : Range LookUp  
Addr : 07F5:             0F  : Lookdone      
Addr : 07F6: Label0008
Addr : 07F6:          05 11  : Call Sub 17   
Addr : 07F8: Label0006
Addr : 07F8: DJNZ Label0005
Addr : 07F8:          09 65  : djnz Address = 07DF -27
Addr : 07FA: Label0007
Addr : 07FA:             32  : Return        
|===========================================================================|
Spin Block str with 1 Parameters and 0 Extra Stack Longs. Method 11
PUB str(string_ptr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - string_ptr
|===========================================================================|
Addr : 07FB:             64  : Variable Operation Local Offset - 1 Read
Addr : 07FC:             16  : StrSize(String)
Addr : 07FD: TJZ Label0004
Addr : 07FD:          08 08  : tjz Address = 0807 8
Addr : 07FF: Label0002
Addr : 07FF:             01  : Drop Anchor   
Addr : 0800:          66 AE  : Variable Operation Local Offset - 1 Assign VAR++ post inc Long Push
Addr : 0802:             80  : Memory Op Byte POP Address READ 
Addr : 0803:          05 11  : Call Sub 17   
Addr : 0805: Label0003
Addr : 0805: DJNZ Label0002
Addr : 0805:          09 78  : djnz Address = 07FF -8
Addr : 0807: Label0004
Addr : 0807:             32  : Return        
|===========================================================================|
Spin Block statInfo with 0 Parameters and 0 Extra Stack Longs. Method 12
PUB statInfo

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0808:          38 05  : Constant 1 Bytes - 05 
Addr : 080A:          37 02  : Constant Mask Y=2 00000008
Addr : 080C:             E3  : Math Op <<    
Addr : 080D:          38 50  : Constant 1 Bytes - 50 
Addr : 080F:             EA  : Math Op |     
Addr : 0810:             61  : Variable Operation Local Offset - 0 Write
Addr : 0811:             32  : Return        
|===========================================================================|
Spin Block statStr with 4 Parameters and 1 Extra Stack Longs. Method 13
PUB statStr(row, col, attr, strVal) | nxtPos

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - row
Local Parameter DBASE:0008 - col
Local Parameter DBASE:000C - attr
Local Parameter DBASE:0010 - strVal
Local Variable  DBASE:0014 - nxtPos
|===========================================================================|
Addr : 0812:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0815:             64  : Variable Operation Local Offset - 1 Read
Addr : 0816:          38 50  : Constant 1 Bytes - 50 
Addr : 0818:             F4  : Math Op *     
Addr : 0819:             EC  : Math Op +     
Addr : 081A:             68  : Variable Operation Local Offset - 2 Read
Addr : 081B:             EC  : Math Op +     
Addr : 081C:             75  : Variable Operation Local Offset - 5 Write
Addr : 081D:             70  : Variable Operation Local Offset - 4 Read
Addr : 081E:             16  : StrSize(String)
Addr : 081F: TJZ Label0004
Addr : 081F:          08 0B  : tjz Address = 082C 11
Addr : 0821: Label0002
Addr : 0821:             6C  : Variable Operation Local Offset - 3 Read
Addr : 0822:          72 AE  : Variable Operation Local Offset - 4 Assign VAR++ post inc Long Push
Addr : 0824:             80  : Memory Op Byte POP Address READ 
Addr : 0825:             EA  : Math Op |     
Addr : 0826:          76 AE  : Variable Operation Local Offset - 5 Assign VAR++ post inc Long Push
Addr : 0828:          B9 1C  : Memory Op Word VBASE + POP Index WRITE Address = 001C
Addr : 082A: Label0003
Addr : 082A: DJNZ Label0002
Addr : 082A:          09 75  : djnz Address = 0821 -11
Addr : 082C: Label0004
Addr : 082C:             32  : Return        
|===========================================================================|
Spin Block statFill with 5 Parameters and 0 Extra Stack Longs. Method 14
PUB statFill(row, col, attr, charVal, count)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - row
Local Parameter DBASE:0008 - col
Local Parameter DBASE:000C - attr
Local Parameter DBASE:0010 - charVal
Local Parameter DBASE:0014 - count
|===========================================================================|
Addr : 082D:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 082F:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0832:             64  : Variable Operation Local Offset - 1 Read
Addr : 0833:          38 50  : Constant 1 Bytes - 50 
Addr : 0835:             F4  : Math Op *     
Addr : 0836:             EC  : Math Op +     
Addr : 0837:             68  : Variable Operation Local Offset - 2 Read
Addr : 0838:             EC  : Math Op +     
Addr : 0839:          37 00  : Constant Mask Y=0 00000002
Addr : 083B:             F4  : Math Op *     
Addr : 083C:             EC  : Math Op +     
Addr : 083D:             6C  : Variable Operation Local Offset - 3 Read
Addr : 083E:             70  : Variable Operation Local Offset - 4 Read
Addr : 083F:             EA  : Math Op |     
Addr : 0840:             74  : Variable Operation Local Offset - 5 Read
Addr : 0841:             19  : WordFill(Start, Value, Count)
Addr : 0842:             32  : Return        
|===========================================================================|
Spin Block processChar with 1 Parameters and 0 Extra Stack Longs. Method 15
PUB processChar(c)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - c
|===========================================================================|
Addr : 0843: Constant Address of Label0002
Addr : 0843:       39 04 2F  : Constant 2 Bytes - 04 2F 
Addr : 0846:       88 93 96  : Memory Op Byte VBASE + READ Address = 1396
Addr : 0849:             35  : Constant 1 $00000000
Addr : 084A: Case_Value Label0003
Addr : 084A:          0D 19  : Value Case Address = 0865 25
Addr : 084C:             36  : Constant 2 $00000001
Addr : 084D: Case_Value Label001F
Addr : 084D:       0D 80 E6  : Value Case Address = 0936 230
Addr : 0850:          37 00  : Constant Mask Y=0 00000002
Addr : 0852: Case_Value Label0033
Addr : 0852:       0D 81 71  : Value Case Address = 09C6 369
Addr : 0855:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 0857: Case_Value Label003B
Addr : 0857:       0D 81 A6  : Value Case Address = 0A00 422
Addr : 085A:          37 01  : Constant Mask Y=1 00000004
Addr : 085C: Case_Value Label0043
Addr : 085C:       0D 81 DB  : Value Case Address = 0A3A 475
Addr : 085F:          38 05  : Constant 1 Bytes - 05 
Addr : 0861: Case_Value Label0048
Addr : 0861:       0D 81 F5  : Value Case Address = 0A59 501
Addr : 0864: CaseDone Label0048
Addr : 0864:             0C  : Casedone      
Addr : 0865: Label0003
Addr : 0865:             64  : Variable Operation Local Offset - 1 Read
Addr : 0866:          37 26  : Constant Mask Y=38 Decrement 0000007F
Addr : 0868:             FA  : Math Op >     
Addr : 0869: JZ Label0004
Addr : 0869:          0A 03  : jz Address = 086E 3
Addr : 086B:          37 04  : Constant Mask Y=4 00000020
Addr : 086D:             65  : Variable Operation Local Offset - 1 Write
Addr : 086E: Label0004
Addr : 086E: Label0005
Addr : 086E:             64  : Variable Operation Local Offset - 1 Read
Addr : 086F:          37 04  : Constant Mask Y=4 00000020
Addr : 0871:             FE  : Math Op =>    
Addr : 0872: JZ Label0006
Addr : 0872:          0A 0B  : jz Address = 087F 11
Addr : 0874:             01  : Drop Anchor   
Addr : 0875:             64  : Variable Operation Local Offset - 1 Read
Addr : 0876:          05 11  : Call Sub 17   
Addr : 0878:             01  : Drop Anchor   
Addr : 0879:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 087C:          05 17  : Call Sub 23   
Addr : 087E:             32  : Return        
Addr : 087F: Label0006
Addr : 087F: Label0007
Addr : 087F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0880:          38 1B  : Constant 1 Bytes - 1B 
Addr : 0882:             FC  : Math Op ==    
Addr : 0883: JZ Label0008
Addr : 0883:          0A 05  : jz Address = 088A 5
Addr : 0885:             36  : Constant 2 $00000001
Addr : 0886:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0889:             32  : Return        
Addr : 088A: Label0008
Addr : 088A: Label0009
Addr : 088A:             64  : Variable Operation Local Offset - 1 Read
Addr : 088B:          38 0D  : Constant 1 Bytes - 0D 
Addr : 088D:             FC  : Math Op ==    
Addr : 088E: JZ Label000A
Addr : 088E:          0A 14  : jz Address = 08A4 20
Addr : 0890:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0893:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0896:          38 50  : Constant 1 Bytes - 50 
Addr : 0898:             F7  : Math Op //    
Addr : 0899:             ED  : Math Op -     
Addr : 089A:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 089D:             01  : Drop Anchor   
Addr : 089E:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 08A1:          05 17  : Call Sub 23   
Addr : 08A3:             32  : Return        
Addr : 08A4: Label000A
Addr : 08A4: Label000B
Addr : 08A4:             64  : Variable Operation Local Offset - 1 Read
Addr : 08A5:          38 0A  : Constant 1 Bytes - 0A 
Addr : 08A7:             FC  : Math Op ==    
Addr : 08A8: JZ Label000C
Addr : 08A8:          0A 3B  : jz Address = 08E5 59
Addr : 08AA:             00  : Drop Anchor Push 
Addr : 08AB:          05 1B  : Call Sub 27   
Addr : 08AD: JZ Label000E
Addr : 08AD:          0A 1A  : jz Address = 08C9 26
Addr : 08AF:          38 50  : Constant 1 Bytes - 50 
Addr : 08B1:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 08B5:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 08B8:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 08BB:             FE  : Math Op =>    
Addr : 08BC: JZ Label0010
Addr : 08BC:          0A 09  : jz Address = 08C7 9
Addr : 08BE:             01  : Drop Anchor   
Addr : 08BF:          05 1C  : Call Sub 28   
Addr : 08C1:          38 50  : Constant 1 Bytes - 50 
Addr : 08C3:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 08C7: Label0010
Addr : 08C7: Label0011
Addr : 08C7: JMP Label000F
Addr : 08C7:          04 15  : Jmp 08DE 21   
Addr : 08C9: Label000E
Addr : 08C9:          38 50  : Constant 1 Bytes - 50 
Addr : 08CB:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 08CF:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 08D2:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 08D5:             FE  : Math Op =>    
Addr : 08D6: JZ Label0013
Addr : 08D6:          0A 06  : jz Address = 08DE 6
Addr : 08D8:          38 50  : Constant 1 Bytes - 50 
Addr : 08DA:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 08DE: Label0013
Addr : 08DE: Label0014
Addr : 08DE: Label0012
Addr : 08DE: Label000F
Addr : 08DE:             01  : Drop Anchor   
Addr : 08DF:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 08E2:          05 17  : Call Sub 23   
Addr : 08E4:             32  : Return        
Addr : 08E5: Label000C
Addr : 08E5: Label000D
Addr : 08E5:             64  : Variable Operation Local Offset - 1 Read
Addr : 08E6:          38 09  : Constant 1 Bytes - 09 
Addr : 08E8:             FC  : Math Op ==    
Addr : 08E9: JZ Label0015
Addr : 08E9:          0A 27  : jz Address = 0912 39
Addr : 08EB:          37 02  : Constant Mask Y=2 00000008
Addr : 08ED:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 08F0:          37 02  : Constant Mask Y=2 00000008
Addr : 08F2:             F7  : Math Op //    
Addr : 08F3:             ED  : Math Op -     
Addr : 08F4:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 08F8:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 08FB:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 08FE:             FE  : Math Op =>    
Addr : 08FF: JZ Label0017
Addr : 08FF:          0A 0A  : jz Address = 090B 10
Addr : 0901:       39 07 80  : Constant 2 Bytes - 07 80 
Addr : 0904:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0907:             01  : Drop Anchor   
Addr : 0908:             35  : Constant 1 $00000000
Addr : 0909:          05 15  : Call Sub 21   
Addr : 090B: Label0017
Addr : 090B: Label0018
Addr : 090B:             01  : Drop Anchor   
Addr : 090C:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 090F:          05 17  : Call Sub 23   
Addr : 0911:             32  : Return        
Addr : 0912: Label0015
Addr : 0912: Label0016
Addr : 0912:             64  : Variable Operation Local Offset - 1 Read
Addr : 0913:          37 02  : Constant Mask Y=2 00000008
Addr : 0915:             FC  : Math Op ==    
Addr : 0916: JZ Label0019
Addr : 0916:          0A 13  : jz Address = 092B 19
Addr : 0918:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 091B:             35  : Constant 1 $00000000
Addr : 091C:             FA  : Math Op >     
Addr : 091D: JZ Label001B
Addr : 091D:          0A 05  : jz Address = 0924 5
Addr : 091F:             36  : Constant 2 $00000001
Addr : 0920:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0924: Label001B
Addr : 0924: Label001C
Addr : 0924:             01  : Drop Anchor   
Addr : 0925:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0928:          05 17  : Call Sub 23   
Addr : 092A:             32  : Return        
Addr : 092B: Label0019
Addr : 092B: Label001A
Addr : 092B:             64  : Variable Operation Local Offset - 1 Read
Addr : 092C:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 092E:             FC  : Math Op ==    
Addr : 092F: JZ Label001D
Addr : 092F:          0A 04  : jz Address = 0935 4
Addr : 0931:             01  : Drop Anchor   
Addr : 0932:          05 06  : Call Sub 6    
Addr : 0934:             32  : Return        
Addr : 0935: Label001D
Addr : 0935: Label001E
Addr : 0935: CaseDone Label0003
Addr : 0935:             0C  : Casedone      
Addr : 0936: Label001F
Addr : 0936: Constant Address of Label0020
Addr : 0936:       39 03 90  : Constant 2 Bytes - 03 90 
Addr : 0939:             64  : Variable Operation Local Offset - 1 Read
Addr : 093A:          38 5B  : Constant 1 Bytes - 5B 
Addr : 093C: Case_Value Label0021
Addr : 093C:          0D 22  : Value Case Address = 0960 34
Addr : 093E:          38 50  : Constant 1 Bytes - 50 
Addr : 0940: Case_Value Label0022
Addr : 0940:          0D 29  : Value Case Address = 096B 41
Addr : 0942:          38 4B  : Constant 1 Bytes - 4B 
Addr : 0944: Case_Value Label0025
Addr : 0944:          0D 3B  : Value Case Address = 0981 59
Addr : 0946:          38 48  : Constant 1 Bytes - 48 
Addr : 0948: Case_Value Label0028
Addr : 0948:       0D 80 43  : Value Case Address = 098E 67
Addr : 094B:          38 44  : Constant 1 Bytes - 44 
Addr : 094D: Case_Value Label002B
Addr : 094D:       0D 80 52  : Value Case Address = 09A2 82
Addr : 0950:          38 4D  : Constant 1 Bytes - 4D 
Addr : 0952: Case_Value Label002E
Addr : 0952:       0D 80 56  : Value Case Address = 09AB 86
Addr : 0955:          38 47  : Constant 1 Bytes - 47 
Addr : 0957: Case_Value Label0031
Addr : 0957:       0D 80 5A  : Value Case Address = 09B4 90
Addr : 095A:          38 28  : Constant 1 Bytes - 28 
Addr : 095C: Case_Value Label0032
Addr : 095C:       0D 80 5A  : Value Case Address = 09B9 90
Addr : 095F: CaseDone Label0032
Addr : 095F:             0C  : Casedone      
Addr : 0960: Label0021
Addr : 0960:             34  : Constant 0 $FFFFFFFF
Addr : 0961:          56 80  : Variable Operation Global Offset - 5 Assign Write Push
Addr : 0963:             51  : Variable Operation Global Offset - 4 Write
Addr : 0964:          37 00  : Constant Mask Y=0 00000002
Addr : 0966:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0969:             32  : Return        
Addr : 096A: CaseDone Label0021
Addr : 096A:             0C  : Casedone      
Addr : 096B: Label0022
Addr : 096B:          38 50  : Constant 1 Bytes - 50 
Addr : 096D:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0971:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0974:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0977:             FE  : Math Op =>    
Addr : 0978: JZ Label0023
Addr : 0978:          0A 06  : jz Address = 0980 6
Addr : 097A:          38 50  : Constant 1 Bytes - 50 
Addr : 097C:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0980: Label0023
Addr : 0980: Label0024
Addr : 0980: CaseDone Label0022
Addr : 0980:             0C  : Casedone      
Addr : 0981: Label0025
Addr : 0981:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0984:             35  : Constant 1 $00000000
Addr : 0985:             FA  : Math Op >     
Addr : 0986: JZ Label0026
Addr : 0986:          0A 05  : jz Address = 098D 5
Addr : 0988:             36  : Constant 2 $00000001
Addr : 0989:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 098D: Label0026
Addr : 098D: Label0027
Addr : 098D: CaseDone Label0025
Addr : 098D:             0C  : Casedone      
Addr : 098E: Label0028
Addr : 098E:          38 50  : Constant 1 Bytes - 50 
Addr : 0990:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0994:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0997:             35  : Constant 1 $00000000
Addr : 0998:             F9  : Math Op <     
Addr : 0999: JZ Label0029
Addr : 0999:          0A 06  : jz Address = 09A1 6
Addr : 099B:          38 50  : Constant 1 Bytes - 50 
Addr : 099D:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 09A1: Label0029
Addr : 09A1: Label002A
Addr : 09A1: CaseDone Label0028
Addr : 09A1:             0C  : Casedone      
Addr : 09A2: Label002B
Addr : 09A2:             00  : Drop Anchor Push 
Addr : 09A3:          05 1B  : Call Sub 27   
Addr : 09A5: JZ Label002C
Addr : 09A5:          0A 03  : jz Address = 09AA 3
Addr : 09A7:             01  : Drop Anchor   
Addr : 09A8:          05 1C  : Call Sub 28   
Addr : 09AA: Label002C
Addr : 09AA: Label002D
Addr : 09AA: CaseDone Label002B
Addr : 09AA:             0C  : Casedone      
Addr : 09AB: Label002E
Addr : 09AB:             00  : Drop Anchor Push 
Addr : 09AC:          05 1B  : Call Sub 27   
Addr : 09AE: JZ Label002F
Addr : 09AE:          0A 03  : jz Address = 09B3 3
Addr : 09B0:             01  : Drop Anchor   
Addr : 09B1:          05 1D  : Call Sub 29   
Addr : 09B3: Label002F
Addr : 09B3: Label0030
Addr : 09B3: CaseDone Label002E
Addr : 09B3:             0C  : Casedone      
Addr : 09B4: Label0031
Addr : 09B4:             35  : Constant 1 $00000000
Addr : 09B5:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 09B8: CaseDone Label0031
Addr : 09B8:             0C  : Casedone      
Addr : 09B9: Label0032
Addr : 09B9:          38 05  : Constant 1 Bytes - 05 
Addr : 09BB:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 09BE:             32  : Return        
Addr : 09BF: CaseDone Label0032
Addr : 09BF:             0C  : Casedone      
Addr : 09C0: Label0020
Addr : 09C0:             35  : Constant 1 $00000000
Addr : 09C1:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 09C4:             32  : Return        
Addr : 09C5: CaseDone Label001F
Addr : 09C5:             0C  : Casedone      
Addr : 09C6: Label0033
Addr : 09C6:             64  : Variable Operation Local Offset - 1 Read
Addr : 09C7:          38 30  : Constant 1 Bytes - 30 
Addr : 09C9:             FE  : Math Op =>    
Addr : 09CA:             64  : Variable Operation Local Offset - 1 Read
Addr : 09CB:          38 39  : Constant 1 Bytes - 39 
Addr : 09CD:             FD  : Math Op =<    
Addr : 09CE:             F0  : Math Op AND   
Addr : 09CF: JZ Label0034
Addr : 09CF:          0A 17  : jz Address = 09E8 23
Addr : 09D1:             50  : Variable Operation Global Offset - 4 Read
Addr : 09D2:             34  : Constant 0 $FFFFFFFF
Addr : 09D3:             FC  : Math Op ==    
Addr : 09D4: JZ Label0036
Addr : 09D4:          0A 07  : jz Address = 09DD 7
Addr : 09D6:             64  : Variable Operation Local Offset - 1 Read
Addr : 09D7:          38 30  : Constant 1 Bytes - 30 
Addr : 09D9:             ED  : Math Op -     
Addr : 09DA:             51  : Variable Operation Global Offset - 4 Write
Addr : 09DB: JMP Label0037
Addr : 09DB:          04 0A  : Jmp 09E7 10   
Addr : 09DD: Label0036
Addr : 09DD:             50  : Variable Operation Global Offset - 4 Read
Addr : 09DE:          38 0A  : Constant 1 Bytes - 0A 
Addr : 09E0:             F4  : Math Op *     
Addr : 09E1:             64  : Variable Operation Local Offset - 1 Read
Addr : 09E2:          38 30  : Constant 1 Bytes - 30 
Addr : 09E4:             ED  : Math Op -     
Addr : 09E5:             EC  : Math Op +     
Addr : 09E6:             51  : Variable Operation Global Offset - 4 Write
Addr : 09E7: Label0038
Addr : 09E7: Label0037
Addr : 09E7:             32  : Return        
Addr : 09E8: Label0034
Addr : 09E8: Label0035
Addr : 09E8:             64  : Variable Operation Local Offset - 1 Read
Addr : 09E9:          38 3B  : Constant 1 Bytes - 3B 
Addr : 09EB:             FC  : Math Op ==    
Addr : 09EC: JZ Label0039
Addr : 09EC:          0A 06  : jz Address = 09F4 6
Addr : 09EE:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 09F0:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 09F3:             32  : Return        
Addr : 09F4: Label0039
Addr : 09F4: Label003A
Addr : 09F4:             01  : Drop Anchor   
Addr : 09F5:             64  : Variable Operation Local Offset - 1 Read
Addr : 09F6:          05 1E  : Call Sub 30   
Addr : 09F8:             01  : Drop Anchor   
Addr : 09F9:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 09FC:          05 17  : Call Sub 23   
Addr : 09FE:             32  : Return        
Addr : 09FF: CaseDone Label0033
Addr : 09FF:             0C  : Casedone      
Addr : 0A00: Label003B
Addr : 0A00:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A01:          38 30  : Constant 1 Bytes - 30 
Addr : 0A03:             FE  : Math Op =>    
Addr : 0A04:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A05:          38 39  : Constant 1 Bytes - 39 
Addr : 0A07:             FD  : Math Op =<    
Addr : 0A08:             F0  : Math Op AND   
Addr : 0A09: JZ Label003C
Addr : 0A09:          0A 17  : jz Address = 0A22 23
Addr : 0A0B:             54  : Variable Operation Global Offset - 5 Read
Addr : 0A0C:             34  : Constant 0 $FFFFFFFF
Addr : 0A0D:             FC  : Math Op ==    
Addr : 0A0E: JZ Label003E
Addr : 0A0E:          0A 07  : jz Address = 0A17 7
Addr : 0A10:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A11:          38 30  : Constant 1 Bytes - 30 
Addr : 0A13:             ED  : Math Op -     
Addr : 0A14:             55  : Variable Operation Global Offset - 5 Write
Addr : 0A15: JMP Label003F
Addr : 0A15:          04 0A  : Jmp 0A21 10   
Addr : 0A17: Label003E
Addr : 0A17:             54  : Variable Operation Global Offset - 5 Read
Addr : 0A18:          38 0A  : Constant 1 Bytes - 0A 
Addr : 0A1A:             F4  : Math Op *     
Addr : 0A1B:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A1C:          38 30  : Constant 1 Bytes - 30 
Addr : 0A1E:             ED  : Math Op -     
Addr : 0A1F:             EC  : Math Op +     
Addr : 0A20:             55  : Variable Operation Global Offset - 5 Write
Addr : 0A21: Label0040
Addr : 0A21: Label003F
Addr : 0A21:             32  : Return        
Addr : 0A22: Label003C
Addr : 0A22: Label003D
Addr : 0A22:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A23:          38 3B  : Constant 1 Bytes - 3B 
Addr : 0A25:             FC  : Math Op ==    
Addr : 0A26: JZ Label0041
Addr : 0A26:          0A 06  : jz Address = 0A2E 6
Addr : 0A28:          37 01  : Constant Mask Y=1 00000004
Addr : 0A2A:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0A2D:             32  : Return        
Addr : 0A2E: Label0041
Addr : 0A2E: Label0042
Addr : 0A2E:             01  : Drop Anchor   
Addr : 0A2F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A30:          05 1E  : Call Sub 30   
Addr : 0A32:             01  : Drop Anchor   
Addr : 0A33:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0A36:          05 17  : Call Sub 23   
Addr : 0A38:             32  : Return        
Addr : 0A39: CaseDone Label003B
Addr : 0A39:             0C  : Casedone      
Addr : 0A3A: Label0043
Addr : 0A3A:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A3B:          38 30  : Constant 1 Bytes - 30 
Addr : 0A3D:             FE  : Math Op =>    
Addr : 0A3E:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A3F:          38 39  : Constant 1 Bytes - 39 
Addr : 0A41:             FD  : Math Op =<    
Addr : 0A42:             F0  : Math Op AND   
Addr : 0A43: JZ Label0044
Addr : 0A43:          0A 01  : jz Address = 0A46 1
Addr : 0A45:             32  : Return        
Addr : 0A46: Label0044
Addr : 0A46: Label0045
Addr : 0A46:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A47:          38 3B  : Constant 1 Bytes - 3B 
Addr : 0A49:             FC  : Math Op ==    
Addr : 0A4A: JZ Label0046
Addr : 0A4A:          0A 01  : jz Address = 0A4D 1
Addr : 0A4C:             32  : Return        
Addr : 0A4D: Label0046
Addr : 0A4D: Label0047
Addr : 0A4D:             01  : Drop Anchor   
Addr : 0A4E:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A4F:          05 1E  : Call Sub 30   
Addr : 0A51:             01  : Drop Anchor   
Addr : 0A52:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0A55:          05 17  : Call Sub 23   
Addr : 0A57:             32  : Return        
Addr : 0A58: CaseDone Label0043
Addr : 0A58:             0C  : Casedone      
Addr : 0A59: Label0048
Addr : 0A59:             35  : Constant 1 $00000000
Addr : 0A5A:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0A5D:             32  : Return        
Addr : 0A5E: CaseDone Label0048
Addr : 0A5E: Data : 0C                       .
Addr : 0A5F: Label0002
Addr : 0A5F: Data : 32                       2
Addr : 0A60: Data : 32                       2
|===========================================================================|
Spin Block clsTerm with 0 Parameters and 0 Extra Stack Longs. Method 16
PRI clsTerm

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0A61:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0A63:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0A66:          37 04  : Constant Mask Y=4 00000020
Addr : 0A68:             EA  : Math Op |     
Addr : 0A69:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0A6C:             19  : WordFill(Start, Value, Count)
Addr : 0A6D:             32  : Return        
|===========================================================================|
Spin Block outc with 1 Parameters and 0 Extra Stack Longs. Method 17
PRI outc(c)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - c
|===========================================================================|
Addr : 0A6E:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0A71:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A72:             EA  : Math Op |     
Addr : 0A73:    AA 93 7C AC  : Memory Op Word VBASE + ASSIGN Address = 137C VAR++ post inc Word Push
Addr : 0A77:          B9 1C  : Memory Op Word VBASE + POP Index WRITE Address = 001C
Addr : 0A79:             64  : Variable Operation Local Offset - 1 Read
Addr : 0A7A:       89 93 97  : Memory Op Byte VBASE + WRITE Address = 1397
Addr : 0A7D:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0A80:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0A83:             FC  : Math Op ==    
Addr : 0A84: JZ Label0002
Addr : 0A84:          0A 0B  : jz Address = 0A91 11
Addr : 0A86:             01  : Drop Anchor   
Addr : 0A87:          05 1C  : Call Sub 28   
Addr : 0A89:          38 50  : Constant 1 Bytes - 50 
Addr : 0A8B:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0A8F: JMP Label0003
Addr : 0A8F:          04 0F  : Jmp 0AA0 15   
Addr : 0A91: Label0002
Addr : 0A91:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0A94:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0A97:             FC  : Math Op ==    
Addr : 0A98: JZ Label0004
Addr : 0A98:          0A 06  : jz Address = 0AA0 6
Addr : 0A9A:       39 07 80  : Constant 2 Bytes - 07 80 
Addr : 0A9D:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0AA0: Label0004
Addr : 0AA0: Label0003
Addr : 0AA0:             32  : Return        
|===========================================================================|
Spin Block setMode with 1 Parameters and 0 Extra Stack Longs. Method 18
PRI setMode(n)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - n
|===========================================================================|
Addr : 0AA1:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AA2:             35  : Constant 1 $00000000
Addr : 0AA3:             FC  : Math Op ==    
Addr : 0AA4: JZ Label0002
Addr : 0AA4:          0A 1C  : jz Address = 0AC2 28
Addr : 0AA6:             35  : Constant 1 $00000000
Addr : 0AA7:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 0AAA:             35  : Constant 1 $00000000
Addr : 0AAB:       A9 93 86  : Memory Op Word VBASE + WRITE Address = 1386
Addr : 0AAE:             35  : Constant 1 $00000000
Addr : 0AAF:       A9 93 88  : Memory Op Word VBASE + WRITE Address = 1388
Addr : 0AB2:             35  : Constant 1 $00000000
Addr : 0AB3:       A9 93 8A  : Memory Op Word VBASE + WRITE Address = 138A
Addr : 0AB6:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 0AB8:       A9 93 8C  : Memory Op Word VBASE + WRITE Address = 138C
Addr : 0ABB:             35  : Constant 1 $00000000
Addr : 0ABC:       A9 93 8E  : Memory Op Word VBASE + WRITE Address = 138E
Addr : 0ABF: JMP Label0003
Addr : 0ABF:       04 80 9E  : Jmp 0B60 158  
Addr : 0AC2: Label0002
Addr : 0AC2:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AC3:             36  : Constant 2 $00000001
Addr : 0AC4:             FC  : Math Op ==    
Addr : 0AC5: JZ Label0004
Addr : 0AC5:          0A 07  : jz Address = 0ACE 7
Addr : 0AC7:             36  : Constant 2 $00000001
Addr : 0AC8:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 0ACB: JMP Label0003
Addr : 0ACB:       04 80 92  : Jmp 0B60 146  
Addr : 0ACE: Label0004
Addr : 0ACE:             64  : Variable Operation Local Offset - 1 Read
Addr : 0ACF:          37 01  : Constant Mask Y=1 00000004
Addr : 0AD1:             FC  : Math Op ==    
Addr : 0AD2: JZ Label0005
Addr : 0AD2:          0A 07  : jz Address = 0ADB 7
Addr : 0AD4:             36  : Constant 2 $00000001
Addr : 0AD5:       A9 93 86  : Memory Op Word VBASE + WRITE Address = 1386
Addr : 0AD8: JMP Label0003
Addr : 0AD8:       04 80 85  : Jmp 0B60 133  
Addr : 0ADB: Label0005
Addr : 0ADB:             64  : Variable Operation Local Offset - 1 Read
Addr : 0ADC:          38 05  : Constant 1 Bytes - 05 
Addr : 0ADE:             FC  : Math Op ==    
Addr : 0ADF: JZ Label0006
Addr : 0ADF:          0A 07  : jz Address = 0AE8 7
Addr : 0AE1:             36  : Constant 2 $00000001
Addr : 0AE2:       A9 93 88  : Memory Op Word VBASE + WRITE Address = 1388
Addr : 0AE5: JMP Label0003
Addr : 0AE5:       04 80 78  : Jmp 0B60 120  
Addr : 0AE8: Label0006
Addr : 0AE8:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AE9:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 0AEB:             FC  : Math Op ==    
Addr : 0AEC: JZ Label0007
Addr : 0AEC:          0A 07  : jz Address = 0AF5 7
Addr : 0AEE:             36  : Constant 2 $00000001
Addr : 0AEF:       A9 93 8A  : Memory Op Word VBASE + WRITE Address = 138A
Addr : 0AF2: JMP Label0003
Addr : 0AF2:       04 80 6B  : Jmp 0B60 107  
Addr : 0AF5: Label0007
Addr : 0AF5:             64  : Variable Operation Local Offset - 1 Read
Addr : 0AF6:          38 15  : Constant 1 Bytes - 15 
Addr : 0AF8:             FC  : Math Op ==    
Addr : 0AF9: JZ Label0008
Addr : 0AF9:          0A 07  : jz Address = 0B02 7
Addr : 0AFB:             35  : Constant 1 $00000000
Addr : 0AFC:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 0AFF: JMP Label0003
Addr : 0AFF:       04 80 5E  : Jmp 0B60 94   
Addr : 0B02: Label0008
Addr : 0B02:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B03:          38 16  : Constant 1 Bytes - 16 
Addr : 0B05:             FC  : Math Op ==    
Addr : 0B06: JZ Label0009
Addr : 0B06:          0A 07  : jz Address = 0B0F 7
Addr : 0B08:             35  : Constant 1 $00000000
Addr : 0B09:       A9 93 84  : Memory Op Word VBASE + WRITE Address = 1384
Addr : 0B0C: JMP Label0003
Addr : 0B0C:       04 80 51  : Jmp 0B60 81   
Addr : 0B0F: Label0009
Addr : 0B0F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B10:          38 18  : Constant 1 Bytes - 18 
Addr : 0B12:             FC  : Math Op ==    
Addr : 0B13: JZ Label000A
Addr : 0B13:          0A 07  : jz Address = 0B1C 7
Addr : 0B15:             35  : Constant 1 $00000000
Addr : 0B16:       A9 93 86  : Memory Op Word VBASE + WRITE Address = 1386
Addr : 0B19: JMP Label0003
Addr : 0B19:       04 80 44  : Jmp 0B60 68   
Addr : 0B1C: Label000A
Addr : 0B1C:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B1D:          38 19  : Constant 1 Bytes - 19 
Addr : 0B1F:             FC  : Math Op ==    
Addr : 0B20: JZ Label000B
Addr : 0B20:          0A 06  : jz Address = 0B28 6
Addr : 0B22:             35  : Constant 1 $00000000
Addr : 0B23:       A9 93 88  : Memory Op Word VBASE + WRITE Address = 1388
Addr : 0B26: JMP Label0003
Addr : 0B26:          04 38  : Jmp 0B60 56   
Addr : 0B28: Label000B
Addr : 0B28:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B29:          38 1B  : Constant 1 Bytes - 1B 
Addr : 0B2B:             FC  : Math Op ==    
Addr : 0B2C: JZ Label000C
Addr : 0B2C:          0A 06  : jz Address = 0B34 6
Addr : 0B2E:             35  : Constant 1 $00000000
Addr : 0B2F:       A9 93 8A  : Memory Op Word VBASE + WRITE Address = 138A
Addr : 0B32: JMP Label0003
Addr : 0B32:          04 2C  : Jmp 0B60 44   
Addr : 0B34: Label000C
Addr : 0B34:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B35:          38 1E  : Constant 1 Bytes - 1E 
Addr : 0B37:             FE  : Math Op =>    
Addr : 0B38:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B39:          38 25  : Constant 1 Bytes - 25 
Addr : 0B3B:             FD  : Math Op =<    
Addr : 0B3C:             E8  : Math Op &     
Addr : 0B3D: JZ Label000D
Addr : 0B3D:          0A 0C  : jz Address = 0B4B 12
Addr : 0B3F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B40:          38 1E  : Constant 1 Bytes - 1E 
Addr : 0B42:             ED  : Math Op -     
Addr : 0B43:       B4 80 84  : Memory Op Word PBASE + POP Index READ Address = 0084
Addr : 0B46:       A9 93 8C  : Memory Op Word VBASE + WRITE Address = 138C
Addr : 0B49: JMP Label0003
Addr : 0B49:          04 15  : Jmp 0B60 21   
Addr : 0B4B: Label000D
Addr : 0B4B:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B4C:          38 28  : Constant 1 Bytes - 28 
Addr : 0B4E:             FE  : Math Op =>    
Addr : 0B4F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B50:          38 2F  : Constant 1 Bytes - 2F 
Addr : 0B52:             FD  : Math Op =<    
Addr : 0B53:             E8  : Math Op &     
Addr : 0B54: JZ Label000E
Addr : 0B54:          0A 0A  : jz Address = 0B60 10
Addr : 0B56:             64  : Variable Operation Local Offset - 1 Read
Addr : 0B57:          38 28  : Constant 1 Bytes - 28 
Addr : 0B59:             ED  : Math Op -     
Addr : 0B5A:       B4 80 84  : Memory Op Word PBASE + POP Index READ Address = 0084
Addr : 0B5D:       A9 93 8E  : Memory Op Word VBASE + WRITE Address = 138E
Addr : 0B60: Label000E
Addr : 0B60: Label0003
Addr : 0B60:       A8 93 8A  : Memory Op Word VBASE + READ Address = 138A
Addr : 0B63:             35  : Constant 1 $00000000
Addr : 0B64:             FC  : Math Op ==    
Addr : 0B65: JZ Label000F
Addr : 0B65:          0A 12  : jz Address = 0B79 18
Addr : 0B67:       A8 93 8C  : Memory Op Word VBASE + READ Address = 138C
Addr : 0B6A:          37 02  : Constant Mask Y=2 00000008
Addr : 0B6C:             E3  : Math Op <<    
Addr : 0B6D:       A8 93 8E  : Memory Op Word VBASE + READ Address = 138E
Addr : 0B70:          38 0C  : Constant 1 Bytes - 0C 
Addr : 0B72:             E3  : Math Op <<    
Addr : 0B73:             EA  : Math Op |     
Addr : 0B74:       A9 93 82  : Memory Op Word VBASE + WRITE Address = 1382
Addr : 0B77: JMP Label0010
Addr : 0B77:          04 10  : Jmp 0B89 16   
Addr : 0B79: Label000F
Addr : 0B79:       A8 93 8C  : Memory Op Word VBASE + READ Address = 138C
Addr : 0B7C:          38 0C  : Constant 1 Bytes - 0C 
Addr : 0B7E:             E3  : Math Op <<    
Addr : 0B7F:       A8 93 8E  : Memory Op Word VBASE + READ Address = 138E
Addr : 0B82:          37 02  : Constant Mask Y=2 00000008
Addr : 0B84:             E3  : Math Op <<    
Addr : 0B85:             EA  : Math Op |     
Addr : 0B86:       A9 93 82  : Memory Op Word VBASE + WRITE Address = 1382
Addr : 0B89: Label0011
Addr : 0B89: Label0010
Addr : 0B89:       A8 93 84  : Memory Op Word VBASE + READ Address = 1384
Addr : 0B8C:          38 0B  : Constant 1 Bytes - 0B 
Addr : 0B8E:             E3  : Math Op <<    
Addr : 0B8F:       A8 93 86  : Memory Op Word VBASE + READ Address = 1386
Addr : 0B92:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 0B94:             E3  : Math Op <<    
Addr : 0B95:             EA  : Math Op |     
Addr : 0B96:       A8 93 88  : Memory Op Word VBASE + READ Address = 1388
Addr : 0B99:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 0B9B:             E3  : Math Op <<    
Addr : 0B9C:             EA  : Math Op |     
Addr : 0B9D:    AA 93 82 4A  : Memory Op Word VBASE + ASSIGN Address = 1382 ByteMathop |
Addr : 0BA1:             32  : Return        
|===========================================================================|
Spin Block clEOL with 1 Parameters and 1 Extra Stack Longs. Method 19
PRI clEOL(position) | count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - count
|===========================================================================|
Addr : 0BA2:          38 50  : Constant 1 Bytes - 50 
Addr : 0BA4:             64  : Variable Operation Local Offset - 1 Read
Addr : 0BA5:          38 50  : Constant 1 Bytes - 50 
Addr : 0BA7:             F7  : Math Op //    
Addr : 0BA8:             ED  : Math Op -     
Addr : 0BA9:             69  : Variable Operation Local Offset - 2 Write
Addr : 0BAA:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0BAC:             64  : Variable Operation Local Offset - 1 Read
Addr : 0BAD:          37 00  : Constant Mask Y=0 00000002
Addr : 0BAF:             F4  : Math Op *     
Addr : 0BB0:             EC  : Math Op +     
Addr : 0BB1:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0BB4:          37 04  : Constant Mask Y=4 00000020
Addr : 0BB6:             EA  : Math Op |     
Addr : 0BB7:             68  : Variable Operation Local Offset - 2 Read
Addr : 0BB8:             19  : WordFill(Start, Value, Count)
Addr : 0BB9:             32  : Return        
|===========================================================================|
Spin Block clBOL with 1 Parameters and 1 Extra Stack Longs. Method 20
PRI clBOL(position) | count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - count
|===========================================================================|
Addr : 0BBA:             64  : Variable Operation Local Offset - 1 Read
Addr : 0BBB:          38 50  : Constant 1 Bytes - 50 
Addr : 0BBD:             F7  : Math Op //    
Addr : 0BBE:             69  : Variable Operation Local Offset - 2 Write
Addr : 0BBF:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0BC1:             64  : Variable Operation Local Offset - 1 Read
Addr : 0BC2:             68  : Variable Operation Local Offset - 2 Read
Addr : 0BC3:             ED  : Math Op -     
Addr : 0BC4:          37 00  : Constant Mask Y=0 00000002
Addr : 0BC6:             F4  : Math Op *     
Addr : 0BC7:             EC  : Math Op +     
Addr : 0BC8:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0BCB:          37 04  : Constant Mask Y=4 00000020
Addr : 0BCD:             EA  : Math Op |     
Addr : 0BCE:             68  : Variable Operation Local Offset - 2 Read
Addr : 0BCF:             19  : WordFill(Start, Value, Count)
Addr : 0BD0:             32  : Return        
|===========================================================================|
Spin Block delLine with 1 Parameters and 2 Extra Stack Longs. Method 21
PRI delLine(position) | src, count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - src
Local Variable  DBASE:000C - count
|===========================================================================|
Addr : 0BD1:             64  : Variable Operation Local Offset - 1 Read
Addr : 0BD2:          38 50  : Constant 1 Bytes - 50 
Addr : 0BD4:             F7  : Math Op //    
Addr : 0BD5:          66 4D  : Variable Operation Local Offset - 1 Assign WordMathop -
Addr : 0BD7:             64  : Variable Operation Local Offset - 1 Read
Addr : 0BD8:          38 50  : Constant 1 Bytes - 50 
Addr : 0BDA:             EC  : Math Op +     
Addr : 0BDB:             69  : Variable Operation Local Offset - 2 Write
Addr : 0BDC:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0BDF:             68  : Variable Operation Local Offset - 2 Read
Addr : 0BE0:             ED  : Math Op -     
Addr : 0BE1:             6D  : Variable Operation Local Offset - 3 Write
Addr : 0BE2:             6C  : Variable Operation Local Offset - 3 Read
Addr : 0BE3:             35  : Constant 1 $00000000
Addr : 0BE4:             FA  : Math Op >     
Addr : 0BE5: JZ Label0002
Addr : 0BE5:          0A 10  : jz Address = 0BF7 16
Addr : 0BE7:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0BE9:             64  : Variable Operation Local Offset - 1 Read
Addr : 0BEA:          37 00  : Constant Mask Y=0 00000002
Addr : 0BEC:             F4  : Math Op *     
Addr : 0BED:             EC  : Math Op +     
Addr : 0BEE:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0BF0:             68  : Variable Operation Local Offset - 2 Read
Addr : 0BF1:          37 00  : Constant Mask Y=0 00000002
Addr : 0BF3:             F4  : Math Op *     
Addr : 0BF4:             EC  : Math Op +     
Addr : 0BF5:             6C  : Variable Operation Local Offset - 3 Read
Addr : 0BF6:             1D  : WordMove(To, From, Count)
Addr : 0BF7: Label0002
Addr : 0BF7: Label0003
Addr : 0BF7:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0BF9:       39 07 80  : Constant 2 Bytes - 07 80 
Addr : 0BFC:          37 00  : Constant Mask Y=0 00000002
Addr : 0BFE:             F4  : Math Op *     
Addr : 0BFF:             EC  : Math Op +     
Addr : 0C00:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0C03:          37 04  : Constant Mask Y=4 00000020
Addr : 0C05:             EA  : Math Op |     
Addr : 0C06:          38 50  : Constant 1 Bytes - 50 
Addr : 0C08:             19  : WordFill(Start, Value, Count)
Addr : 0C09:             32  : Return        
|===========================================================================|
Spin Block clEOS with 1 Parameters and 0 Extra Stack Longs. Method 22
PRI clEOS(position)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
|===========================================================================|
Addr : 0C0A:             01  : Drop Anchor   
Addr : 0C0B:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C0C:          05 13  : Call Sub 19   
Addr : 0C0E:          38 50  : Constant 1 Bytes - 50 
Addr : 0C10:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C11:          38 50  : Constant 1 Bytes - 50 
Addr : 0C13:             F7  : Math Op //    
Addr : 0C14:             ED  : Math Op -     
Addr : 0C15:          66 4C  : Variable Operation Local Offset - 1 Assign WordMathop +
Addr : 0C17: Label0002
Addr : 0C17:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C18:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0C1B:             F9  : Math Op <     
Addr : 0C1C: JZ Label0004
Addr : 0C1C:          0A 18  : jz Address = 0C36 24
Addr : 0C1E:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0C20:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C21:          37 00  : Constant Mask Y=0 00000002
Addr : 0C23:             F4  : Math Op *     
Addr : 0C24:             EC  : Math Op +     
Addr : 0C25:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0C28:          37 04  : Constant Mask Y=4 00000020
Addr : 0C2A:             EA  : Math Op |     
Addr : 0C2B:          38 50  : Constant 1 Bytes - 50 
Addr : 0C2D:             19  : WordFill(Start, Value, Count)
Addr : 0C2E:          38 50  : Constant 1 Bytes - 50 
Addr : 0C30:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0C34: Label0003
Addr : 0C34: JMP Label0002
Addr : 0C34:          04 61  : Jmp 0C17 -31  
Addr : 0C36: Label0004
Addr : 0C36:             32  : Return        
|===========================================================================|
Spin Block setCursorPos with 1 Parameters and 0 Extra Stack Longs. Method 23
PRI setCursorPos(position)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
|===========================================================================|
Addr : 0C37:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C38:          38 50  : Constant 1 Bytes - 50 
Addr : 0C3A:             F7  : Math Op //    
Addr : 0C3B:             35  : Constant 1 $00000000
Addr : 0C3C:       99 93 90  : Memory Op Byte VBASE + POP Index WRITE Address = 1390
Addr : 0C3F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C40:          38 50  : Constant 1 Bytes - 50 
Addr : 0C42:             F6  : Math Op /     
Addr : 0C43:             36  : Constant 2 $00000001
Addr : 0C44:       99 93 90  : Memory Op Byte VBASE + POP Index WRITE Address = 1390
Addr : 0C47:             32  : Return        
|===========================================================================|
Spin Block insLine with 1 Parameters and 2 Extra Stack Longs. Method 24
PRI insLine(position) | base, nxt

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - base
Local Variable  DBASE:000C - nxt
|===========================================================================|
Addr : 0C48:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C49:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C4A:          38 50  : Constant 1 Bytes - 50 
Addr : 0C4C:             F7  : Math Op //    
Addr : 0C4D:             ED  : Math Op -     
Addr : 0C4E:             69  : Variable Operation Local Offset - 2 Write
Addr : 0C4F:       39 07 80  : Constant 2 Bytes - 07 80 
Addr : 0C52:             65  : Variable Operation Local Offset - 1 Write
Addr : 0C53: Label0002
Addr : 0C53:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C54:             68  : Variable Operation Local Offset - 2 Read
Addr : 0C55:             FA  : Math Op >     
Addr : 0C56: JZ Label0004
Addr : 0C56:          0A 1A  : jz Address = 0C72 26
Addr : 0C58:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C59:          38 50  : Constant 1 Bytes - 50 
Addr : 0C5B:             ED  : Math Op -     
Addr : 0C5C:             6D  : Variable Operation Local Offset - 3 Write
Addr : 0C5D:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0C5F:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C60:          37 00  : Constant Mask Y=0 00000002
Addr : 0C62:             F4  : Math Op *     
Addr : 0C63:             EC  : Math Op +     
Addr : 0C64:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0C66:             6C  : Variable Operation Local Offset - 3 Read
Addr : 0C67:          37 00  : Constant Mask Y=0 00000002
Addr : 0C69:             F4  : Math Op *     
Addr : 0C6A:             EC  : Math Op +     
Addr : 0C6B:          38 50  : Constant 1 Bytes - 50 
Addr : 0C6D:             1D  : WordMove(To, From, Count)
Addr : 0C6E:             6C  : Variable Operation Local Offset - 3 Read
Addr : 0C6F:             65  : Variable Operation Local Offset - 1 Write
Addr : 0C70: Label0003
Addr : 0C70: JMP Label0002
Addr : 0C70:          04 61  : Jmp 0C53 -31  
Addr : 0C72: Label0004
Addr : 0C72:             01  : Drop Anchor   
Addr : 0C73:             68  : Variable Operation Local Offset - 2 Read
Addr : 0C74:          05 13  : Call Sub 19   
Addr : 0C76:             32  : Return        
|===========================================================================|
Spin Block insChar with 1 Parameters and 1 Extra Stack Longs. Method 25
PRI insChar(position) | count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - count
|===========================================================================|
Addr : 0C77:          38 50  : Constant 1 Bytes - 50 
Addr : 0C79:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C7A:          38 50  : Constant 1 Bytes - 50 
Addr : 0C7C:             F7  : Math Op //    
Addr : 0C7D:             ED  : Math Op -     
Addr : 0C7E:             36  : Constant 2 $00000001
Addr : 0C7F:             ED  : Math Op -     
Addr : 0C80:             69  : Variable Operation Local Offset - 2 Write
Addr : 0C81:       AB 92 DC  : Memory Op Word VBASE + ADDRESS Address = 12DC
Addr : 0C84:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0C86:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C87:          37 00  : Constant Mask Y=0 00000002
Addr : 0C89:             F4  : Math Op *     
Addr : 0C8A:             EC  : Math Op +     
Addr : 0C8B:             68  : Variable Operation Local Offset - 2 Read
Addr : 0C8C:             1D  : WordMove(To, From, Count)
Addr : 0C8D:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0C90:          37 04  : Constant Mask Y=4 00000020
Addr : 0C92:             EA  : Math Op |     
Addr : 0C93:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C94:          B9 1C  : Memory Op Word VBASE + POP Index WRITE Address = 001C
Addr : 0C96:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0C98:             64  : Variable Operation Local Offset - 1 Read
Addr : 0C99:             36  : Constant 2 $00000001
Addr : 0C9A:             EC  : Math Op +     
Addr : 0C9B:          37 00  : Constant Mask Y=0 00000002
Addr : 0C9D:             F4  : Math Op *     
Addr : 0C9E:             EC  : Math Op +     
Addr : 0C9F:       AB 92 DC  : Memory Op Word VBASE + ADDRESS Address = 12DC
Addr : 0CA2:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CA3:             1D  : WordMove(To, From, Count)
Addr : 0CA4:             32  : Return        
|===========================================================================|
Spin Block delChar with 1 Parameters and 1 Extra Stack Longs. Method 26
PRI delChar(position) | count

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - position
Local Variable  DBASE:0008 - count
|===========================================================================|
Addr : 0CA5:          38 50  : Constant 1 Bytes - 50 
Addr : 0CA7:             64  : Variable Operation Local Offset - 1 Read
Addr : 0CA8:          38 50  : Constant 1 Bytes - 50 
Addr : 0CAA:             F7  : Math Op //    
Addr : 0CAB:             ED  : Math Op -     
Addr : 0CAC:             36  : Constant 2 $00000001
Addr : 0CAD:             ED  : Math Op -     
Addr : 0CAE:             69  : Variable Operation Local Offset - 2 Write
Addr : 0CAF:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0CB1:             64  : Variable Operation Local Offset - 1 Read
Addr : 0CB2:          37 00  : Constant Mask Y=0 00000002
Addr : 0CB4:             F4  : Math Op *     
Addr : 0CB5:             EC  : Math Op +     
Addr : 0CB6:          AB 1C  : Memory Op Word VBASE + ADDRESS Address = 001C
Addr : 0CB8:             64  : Variable Operation Local Offset - 1 Read
Addr : 0CB9:             36  : Constant 2 $00000001
Addr : 0CBA:             EC  : Math Op +     
Addr : 0CBB:          37 00  : Constant Mask Y=0 00000002
Addr : 0CBD:             F4  : Math Op *     
Addr : 0CBE:             EC  : Math Op +     
Addr : 0CBF:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CC0:             1D  : WordMove(To, From, Count)
Addr : 0CC1:       A8 93 82  : Memory Op Word VBASE + READ Address = 1382
Addr : 0CC4:          37 04  : Constant Mask Y=4 00000020
Addr : 0CC6:             EA  : Math Op |     
Addr : 0CC7:             64  : Variable Operation Local Offset - 1 Read
Addr : 0CC8:             68  : Variable Operation Local Offset - 2 Read
Addr : 0CC9:             EC  : Math Op +     
Addr : 0CCA:          B9 1C  : Memory Op Word VBASE + POP Index WRITE Address = 001C
Addr : 0CCC:             32  : Return        
|===========================================================================|
Spin Block inRegion with 0 Parameters and 0 Extra Stack Longs. Method 27
PRI inRegion : answer

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0CCD:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0CD0:       A8 93 7E  : Memory Op Word VBASE + READ Address = 137E
Addr : 0CD3:             FE  : Math Op =>    
Addr : 0CD4:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0CD7:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0CDA:             F9  : Math Op <     
Addr : 0CDB:             F0  : Math Op AND   
Addr : 0CDC:             61  : Variable Operation Local Offset - 0 Write
Addr : 0CDD:             32  : Return        
|===========================================================================|
Spin Block scrollUp with 0 Parameters and 0 Extra Stack Longs. Method 28
PRI scrollUp

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0CDE:             01  : Drop Anchor   
Addr : 0CDF:       A8 93 7E  : Memory Op Word VBASE + READ Address = 137E
Addr : 0CE2:          05 15  : Call Sub 21   
Addr : 0CE4:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0CE7:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0CEA:             F9  : Math Op <     
Addr : 0CEB: JZ Label0002
Addr : 0CEB:          0A 06  : jz Address = 0CF3 6
Addr : 0CED:             01  : Drop Anchor   
Addr : 0CEE:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0CF1:          05 18  : Call Sub 24   
Addr : 0CF3: Label0002
Addr : 0CF3: Label0003
Addr : 0CF3:             32  : Return        
|===========================================================================|
Spin Block scrollDown with 0 Parameters and 0 Extra Stack Longs. Method 29
PRI scrollDown

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 0CF4:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0CF7:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0CFA:             F9  : Math Op <     
Addr : 0CFB: JZ Label0002
Addr : 0CFB:          0A 06  : jz Address = 0D03 6
Addr : 0CFD:             01  : Drop Anchor   
Addr : 0CFE:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0D01:          05 15  : Call Sub 21   
Addr : 0D03: Label0002
Addr : 0D03: Label0003
Addr : 0D03:             01  : Drop Anchor   
Addr : 0D04:       A8 93 7E  : Memory Op Word VBASE + READ Address = 137E
Addr : 0D07:          05 18  : Call Sub 24   
Addr : 0D09:             32  : Return        
|===========================================================================|
Spin Block ansi with 1 Parameters and 2 Extra Stack Longs. Method 30
PRI ansi(c) | x, defVal

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - c
Local Variable  DBASE:0008 - x
Local Variable  DBASE:000C - defVal
|===========================================================================|
Addr : 0D0A:             35  : Constant 1 $00000000
Addr : 0D0B:       89 93 96  : Memory Op Byte VBASE + WRITE Address = 1396
Addr : 0D0E:             64  : Variable Operation Local Offset - 1 Read
Addr : 0D0F:          38 72  : Constant 1 Bytes - 72 
Addr : 0D11:             FB  : Math Op <>    
Addr : 0D12:             64  : Variable Operation Local Offset - 1 Read
Addr : 0D13:          38 4A  : Constant 1 Bytes - 4A 
Addr : 0D15:             FB  : Math Op <>    
Addr : 0D16:             F0  : Math Op AND   
Addr : 0D17:             64  : Variable Operation Local Offset - 1 Read
Addr : 0D18:          38 6D  : Constant 1 Bytes - 6D 
Addr : 0D1A:             FB  : Math Op <>    
Addr : 0D1B:             F0  : Math Op AND   
Addr : 0D1C:             64  : Variable Operation Local Offset - 1 Read
Addr : 0D1D:          38 4B  : Constant 1 Bytes - 4B 
Addr : 0D1F:             FB  : Math Op <>    
Addr : 0D20:             F0  : Math Op AND   
Addr : 0D21: JZ Label0002
Addr : 0D21:          0A 0E  : jz Address = 0D31 14
Addr : 0D23:             50  : Variable Operation Global Offset - 4 Read
Addr : 0D24:             34  : Constant 0 $FFFFFFFF
Addr : 0D25:             FC  : Math Op ==    
Addr : 0D26: JZ Label0004
Addr : 0D26:          0A 02  : jz Address = 0D2A 2
Addr : 0D28:             36  : Constant 2 $00000001
Addr : 0D29:             51  : Variable Operation Global Offset - 4 Write
Addr : 0D2A: Label0004
Addr : 0D2A: Label0005
Addr : 0D2A:             54  : Variable Operation Global Offset - 5 Read
Addr : 0D2B:             34  : Constant 0 $FFFFFFFF
Addr : 0D2C:             FC  : Math Op ==    
Addr : 0D2D: JZ Label0006
Addr : 0D2D:          0A 02  : jz Address = 0D31 2
Addr : 0D2F:             36  : Constant 2 $00000001
Addr : 0D30:             55  : Variable Operation Global Offset - 5 Write
Addr : 0D31: Label0006
Addr : 0D31: Label0007
Addr : 0D31: Label0002
Addr : 0D31: Label0003
Addr : 0D31: Constant Address of Label0008
Addr : 0D31:       39 09 8C  : Constant 2 Bytes - 09 8C 
Addr : 0D34:             64  : Variable Operation Local Offset - 1 Read
Addr : 0D35:          37 05  : Constant Mask Y=5 00000040
Addr : 0D37: Case_Value Label0009
Addr : 0D37:       0D 80 51  : Value Case Address = 0D8B 81
Addr : 0D3A:          38 62  : Constant 1 Bytes - 62 
Addr : 0D3C: Case_Value Label000D
Addr : 0D3C:       0D 80 5B  : Value Case Address = 0D9A 91
Addr : 0D3F:          38 64  : Constant 1 Bytes - 64 
Addr : 0D41: Case_Value Label0011
Addr : 0D41:       0D 80 65  : Value Case Address = 0DA9 101
Addr : 0D44:          38 6D  : Constant 1 Bytes - 6D 
Addr : 0D46: Case_Value Label0014
Addr : 0D46:       0D 80 7E  : Value Case Address = 0DC7 126
Addr : 0D49:          38 72  : Constant 1 Bytes - 72 
Addr : 0D4B: Case_Value Label001A
Addr : 0D4B:       0D 80 92  : Value Case Address = 0DE0 146
Addr : 0D4E:          38 41  : Constant 1 Bytes - 41 
Addr : 0D50: Case_Value Label0023
Addr : 0D50:       0D 80 CD  : Value Case Address = 0E20 205
Addr : 0D53:          38 42  : Constant 1 Bytes - 42 
Addr : 0D55: Case_Value Label0029
Addr : 0D55:       0D 80 E5  : Value Case Address = 0E3D 229
Addr : 0D58:          38 43  : Constant 1 Bytes - 43 
Addr : 0D5A: Case_Value Label002F
Addr : 0D5A:       0D 80 FF  : Value Case Address = 0E5C 255
Addr : 0D5D:          38 44  : Constant 1 Bytes - 44 
Addr : 0D5F: Case_Value Label0035
Addr : 0D5F:       0D 81 17  : Value Case Address = 0E79 279
Addr : 0D62:          38 47  : Constant 1 Bytes - 47 
Addr : 0D64: Case_Value Label003B
Addr : 0D64:       0D 81 2C  : Value Case Address = 0E93 300
Addr : 0D67:          38 48  : Constant 1 Bytes - 48 
Addr : 0D69: Case_Value Label003E
Addr : 0D69:       0D 81 46  : Value Case Address = 0EB2 326
Addr : 0D6C:          38 66  : Constant 1 Bytes - 66 
Addr : 0D6E: Case_Value Label003E
Addr : 0D6E:       0D 81 41  : Value Case Address = 0EB2 321
Addr : 0D71:          38 4A  : Constant 1 Bytes - 4A 
Addr : 0D73: Case_Value Label0047
Addr : 0D73:       0D 81 74  : Value Case Address = 0EEA 372
Addr : 0D76:          38 4B  : Constant 1 Bytes - 4B 
Addr : 0D78: Case_Value Label0052
Addr : 0D78:       0D 81 C6  : Value Case Address = 0F41 454
Addr : 0D7B:          38 4C  : Constant 1 Bytes - 4C 
Addr : 0D7D: Case_Value Label0057
Addr : 0D7D:       0D 81 E9  : Value Case Address = 0F69 489
Addr : 0D80:          38 4D  : Constant 1 Bytes - 4D 
Addr : 0D82: Case_Value Label005F
Addr : 0D82:       0D 82 07  : Value Case Address = 0F8C 519
Addr : 0D85:          38 50  : Constant 1 Bytes - 50 
Addr : 0D87: Case_Value Label0067
Addr : 0D87:       0D 82 25  : Value Case Address = 0FAF 549
Addr : 0D8A: CaseDone Label0067
Addr : 0D8A:             0C  : Casedone      
Addr : 0D8B: Label0009
Addr : 0D8B: Label000A
Addr : 0D8B:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0D8D:             35  : Constant 1 $00000000
Addr : 0D8E:             FA  : Math Op >     
Addr : 0D8F: JZ Label000C
Addr : 0D8F:          0A 08  : jz Address = 0D99 8
Addr : 0D91:             01  : Drop Anchor   
Addr : 0D92:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0D95:          05 19  : Call Sub 25   
Addr : 0D97: Label000B
Addr : 0D97: JMP Label000A
Addr : 0D97:          04 72  : Jmp 0D8B -14  
Addr : 0D99: Label000C
Addr : 0D99: CaseDone Label0009
Addr : 0D99:             0C  : Casedone      
Addr : 0D9A: Label000D
Addr : 0D9A: Label000E
Addr : 0D9A:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0D9C:             35  : Constant 1 $00000000
Addr : 0D9D:             FA  : Math Op >     
Addr : 0D9E: JZ Label0010
Addr : 0D9E:          0A 08  : jz Address = 0DA8 8
Addr : 0DA0:             01  : Drop Anchor   
Addr : 0DA1:       88 93 97  : Memory Op Byte VBASE + READ Address = 1397
Addr : 0DA4:          05 11  : Call Sub 17   
Addr : 0DA6: Label000F
Addr : 0DA6: JMP Label000E
Addr : 0DA6:          04 72  : Jmp 0D9A -14  
Addr : 0DA8: Label0010
Addr : 0DA8: CaseDone Label000D
Addr : 0DA8:             0C  : Casedone      
Addr : 0DA9: Label0011
Addr : 0DA9:             50  : Variable Operation Global Offset - 4 Read
Addr : 0DAA:             36  : Constant 2 $00000001
Addr : 0DAB:             F9  : Math Op <     
Addr : 0DAC:             50  : Variable Operation Global Offset - 4 Read
Addr : 0DAD:          38 1E  : Constant 1 Bytes - 1E 
Addr : 0DAF:             FA  : Math Op >     
Addr : 0DB0:             F2  : Math Op OR    
Addr : 0DB1: JZ Label0012
Addr : 0DB1:          0A 03  : jz Address = 0DB6 3
Addr : 0DB3:          38 1E  : Constant 1 Bytes - 1E 
Addr : 0DB5:             51  : Variable Operation Global Offset - 4 Write
Addr : 0DB6: Label0012
Addr : 0DB6: Label0013
Addr : 0DB6:             50  : Variable Operation Global Offset - 4 Read
Addr : 0DB7:             36  : Constant 2 $00000001
Addr : 0DB8:             ED  : Math Op -     
Addr : 0DB9:          38 50  : Constant 1 Bytes - 50 
Addr : 0DBB:             F4  : Math Op *     
Addr : 0DBC:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0DBF:          38 50  : Constant 1 Bytes - 50 
Addr : 0DC1:             F7  : Math Op //    
Addr : 0DC2:             EC  : Math Op +     
Addr : 0DC3:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0DC6: CaseDone Label0011
Addr : 0DC6:             0C  : Casedone      
Addr : 0DC7: Label0014
Addr : 0DC7:             50  : Variable Operation Global Offset - 4 Read
Addr : 0DC8:             34  : Constant 0 $FFFFFFFF
Addr : 0DC9:             FC  : Math Op ==    
Addr : 0DCA: JZ Label0015
Addr : 0DCA:          0A 06  : jz Address = 0DD2 6
Addr : 0DCC:             01  : Drop Anchor   
Addr : 0DCD:             35  : Constant 1 $00000000
Addr : 0DCE:          05 12  : Call Sub 18   
Addr : 0DD0: JMP Label0016
Addr : 0DD0:          04 0D  : Jmp 0DDF 13   
Addr : 0DD2: Label0015
Addr : 0DD2:             01  : Drop Anchor   
Addr : 0DD3:             50  : Variable Operation Global Offset - 4 Read
Addr : 0DD4:          05 12  : Call Sub 18   
Addr : 0DD6:             54  : Variable Operation Global Offset - 5 Read
Addr : 0DD7:             34  : Constant 0 $FFFFFFFF
Addr : 0DD8:             FB  : Math Op <>    
Addr : 0DD9: JZ Label0018
Addr : 0DD9:          0A 04  : jz Address = 0DDF 4
Addr : 0DDB:             01  : Drop Anchor   
Addr : 0DDC:             54  : Variable Operation Global Offset - 5 Read
Addr : 0DDD:          05 12  : Call Sub 18   
Addr : 0DDF: Label0018
Addr : 0DDF: Label0019
Addr : 0DDF: Label0017
Addr : 0DDF: Label0016
Addr : 0DDF: CaseDone Label0014
Addr : 0DDF:             0C  : Casedone      
Addr : 0DE0: Label001A
Addr : 0DE0:             50  : Variable Operation Global Offset - 4 Read
Addr : 0DE1:             36  : Constant 2 $00000001
Addr : 0DE2:             F9  : Math Op <     
Addr : 0DE3: JZ Label001B
Addr : 0DE3:          0A 04  : jz Address = 0DE9 4
Addr : 0DE5:             36  : Constant 2 $00000001
Addr : 0DE6:             51  : Variable Operation Global Offset - 4 Write
Addr : 0DE7: JMP Label001C
Addr : 0DE7:          04 09  : Jmp 0DF2 9    
Addr : 0DE9: Label001B
Addr : 0DE9:             50  : Variable Operation Global Offset - 4 Read
Addr : 0DEA:          38 50  : Constant 1 Bytes - 50 
Addr : 0DEC:             FA  : Math Op >     
Addr : 0DED: JZ Label001D
Addr : 0DED:          0A 03  : jz Address = 0DF2 3
Addr : 0DEF:          38 50  : Constant 1 Bytes - 50 
Addr : 0DF1:             51  : Variable Operation Global Offset - 4 Write
Addr : 0DF2: Label001D
Addr : 0DF2: Label001C
Addr : 0DF2:             54  : Variable Operation Global Offset - 5 Read
Addr : 0DF3:             36  : Constant 2 $00000001
Addr : 0DF4:             F9  : Math Op <     
Addr : 0DF5: JZ Label001E
Addr : 0DF5:          0A 04  : jz Address = 0DFB 4
Addr : 0DF7:             36  : Constant 2 $00000001
Addr : 0DF8:             55  : Variable Operation Global Offset - 5 Write
Addr : 0DF9: JMP Label001F
Addr : 0DF9:          04 09  : Jmp 0E04 9    
Addr : 0DFB: Label001E
Addr : 0DFB:             54  : Variable Operation Global Offset - 5 Read
Addr : 0DFC:          38 50  : Constant 1 Bytes - 50 
Addr : 0DFE:             FA  : Math Op >     
Addr : 0DFF: JZ Label0020
Addr : 0DFF:          0A 03  : jz Address = 0E04 3
Addr : 0E01:          38 50  : Constant 1 Bytes - 50 
Addr : 0E03:             55  : Variable Operation Global Offset - 5 Write
Addr : 0E04: Label0020
Addr : 0E04: Label001F
Addr : 0E04:             54  : Variable Operation Global Offset - 5 Read
Addr : 0E05:             50  : Variable Operation Global Offset - 4 Read
Addr : 0E06:             F9  : Math Op <     
Addr : 0E07: JZ Label0021
Addr : 0E07:          0A 02  : jz Address = 0E0B 2
Addr : 0E09:             50  : Variable Operation Global Offset - 4 Read
Addr : 0E0A:             55  : Variable Operation Global Offset - 5 Write
Addr : 0E0B: Label0021
Addr : 0E0B: Label0022
Addr : 0E0B:             50  : Variable Operation Global Offset - 4 Read
Addr : 0E0C:             36  : Constant 2 $00000001
Addr : 0E0D:             ED  : Math Op -     
Addr : 0E0E:          38 50  : Constant 1 Bytes - 50 
Addr : 0E10:             F4  : Math Op *     
Addr : 0E11:       A9 93 7E  : Memory Op Word VBASE + WRITE Address = 137E
Addr : 0E14:             54  : Variable Operation Global Offset - 5 Read
Addr : 0E15:          38 50  : Constant 1 Bytes - 50 
Addr : 0E17:             F4  : Math Op *     
Addr : 0E18:       A9 93 80  : Memory Op Word VBASE + WRITE Address = 1380
Addr : 0E1B:             35  : Constant 1 $00000000
Addr : 0E1C:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0E1F: CaseDone Label001A
Addr : 0E1F:             0C  : Casedone      
Addr : 0E20: Label0023
Addr : 0E20: Label0024
Addr : 0E20:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0E22:             35  : Constant 1 $00000000
Addr : 0E23:             FA  : Math Op >     
Addr : 0E24: JZ Label0026
Addr : 0E24:          0A 16  : jz Address = 0E3C 22
Addr : 0E26:          38 50  : Constant 1 Bytes - 50 
Addr : 0E28:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0E2C:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E2F:             35  : Constant 1 $00000000
Addr : 0E30:             F9  : Math Op <     
Addr : 0E31: JZ Label0027
Addr : 0E31:          0A 07  : jz Address = 0E3A 7
Addr : 0E33:          38 50  : Constant 1 Bytes - 50 
Addr : 0E35:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0E39:             32  : Return        
Addr : 0E3A: Label0027
Addr : 0E3A: Label0028
Addr : 0E3A: Label0025
Addr : 0E3A: JMP Label0024
Addr : 0E3A:          04 64  : Jmp 0E20 -28  
Addr : 0E3C: Label0026
Addr : 0E3C: CaseDone Label0023
Addr : 0E3C:             0C  : Casedone      
Addr : 0E3D: Label0029
Addr : 0E3D: Label002A
Addr : 0E3D:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0E3F:             35  : Constant 1 $00000000
Addr : 0E40:             FA  : Math Op >     
Addr : 0E41: JZ Label002C
Addr : 0E41:          0A 18  : jz Address = 0E5B 24
Addr : 0E43:          38 50  : Constant 1 Bytes - 50 
Addr : 0E45:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0E49:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E4C:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0E4F:             FE  : Math Op =>    
Addr : 0E50: JZ Label002D
Addr : 0E50:          0A 07  : jz Address = 0E59 7
Addr : 0E52:          38 50  : Constant 1 Bytes - 50 
Addr : 0E54:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0E58:             32  : Return        
Addr : 0E59: Label002D
Addr : 0E59: Label002E
Addr : 0E59: Label002B
Addr : 0E59: JMP Label002A
Addr : 0E59:          04 62  : Jmp 0E3D -30  
Addr : 0E5B: Label002C
Addr : 0E5B: CaseDone Label0029
Addr : 0E5B:             0C  : Casedone      
Addr : 0E5C: Label002F
Addr : 0E5C: Label0030
Addr : 0E5C:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0E5E:             35  : Constant 1 $00000000
Addr : 0E5F:             FA  : Math Op >     
Addr : 0E60: JZ Label0032
Addr : 0E60:          0A 16  : jz Address = 0E78 22
Addr : 0E62:             36  : Constant 2 $00000001
Addr : 0E63:    AA 93 7C 4C  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop +
Addr : 0E67:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E6A:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0E6D:             FE  : Math Op =>    
Addr : 0E6E: JZ Label0033
Addr : 0E6E:          0A 06  : jz Address = 0E76 6
Addr : 0E70:             36  : Constant 2 $00000001
Addr : 0E71:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0E75:             32  : Return        
Addr : 0E76: Label0033
Addr : 0E76: Label0034
Addr : 0E76: Label0031
Addr : 0E76: JMP Label0030
Addr : 0E76:          04 64  : Jmp 0E5C -28  
Addr : 0E78: Label0032
Addr : 0E78: CaseDone Label002F
Addr : 0E78:             0C  : Casedone      
Addr : 0E79: Label0035
Addr : 0E79: Label0036
Addr : 0E79:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0E7B:             35  : Constant 1 $00000000
Addr : 0E7C:             FA  : Math Op >     
Addr : 0E7D: JZ Label0038
Addr : 0E7D:          0A 13  : jz Address = 0E92 19
Addr : 0E7F:             36  : Constant 2 $00000001
Addr : 0E80:    AA 93 7C 4D  : Memory Op Word VBASE + ASSIGN Address = 137C WordMathop -
Addr : 0E84:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0E87:             35  : Constant 1 $00000000
Addr : 0E88:             F9  : Math Op <     
Addr : 0E89: JZ Label0039
Addr : 0E89:          0A 05  : jz Address = 0E90 5
Addr : 0E8B:             35  : Constant 1 $00000000
Addr : 0E8C:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0E8F:             32  : Return        
Addr : 0E90: Label0039
Addr : 0E90: Label003A
Addr : 0E90: Label0037
Addr : 0E90: JMP Label0036
Addr : 0E90:          04 67  : Jmp 0E79 -25  
Addr : 0E92: Label0038
Addr : 0E92: CaseDone Label0035
Addr : 0E92:             0C  : Casedone      
Addr : 0E93: Label003B
Addr : 0E93:             50  : Variable Operation Global Offset - 4 Read
Addr : 0E94:             36  : Constant 2 $00000001
Addr : 0E95:             F9  : Math Op <     
Addr : 0E96:             50  : Variable Operation Global Offset - 4 Read
Addr : 0E97:          38 50  : Constant 1 Bytes - 50 
Addr : 0E99:             FA  : Math Op >     
Addr : 0E9A:             F2  : Math Op OR    
Addr : 0E9B: JZ Label003C
Addr : 0E9B:          0A 03  : jz Address = 0EA0 3
Addr : 0E9D:          38 50  : Constant 1 Bytes - 50 
Addr : 0E9F:             51  : Variable Operation Global Offset - 4 Write
Addr : 0EA0: Label003C
Addr : 0EA0: Label003D
Addr : 0EA0:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0EA3:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0EA6:          38 50  : Constant 1 Bytes - 50 
Addr : 0EA8:             F7  : Math Op //    
Addr : 0EA9:             ED  : Math Op -     
Addr : 0EAA:             50  : Variable Operation Global Offset - 4 Read
Addr : 0EAB:             36  : Constant 2 $00000001
Addr : 0EAC:             ED  : Math Op -     
Addr : 0EAD:             EC  : Math Op +     
Addr : 0EAE:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0EB1: CaseDone Label003B
Addr : 0EB1:             0C  : Casedone      
Addr : 0EB2: Label003E
Addr : 0EB2:             50  : Variable Operation Global Offset - 4 Read
Addr : 0EB3:             35  : Constant 1 $00000000
Addr : 0EB4:             FD  : Math Op =<    
Addr : 0EB5: JZ Label003F
Addr : 0EB5:          0A 02  : jz Address = 0EB9 2
Addr : 0EB7:             36  : Constant 2 $00000001
Addr : 0EB8:             51  : Variable Operation Global Offset - 4 Write
Addr : 0EB9: Label003F
Addr : 0EB9: Label0040
Addr : 0EB9:             54  : Variable Operation Global Offset - 5 Read
Addr : 0EBA:             35  : Constant 1 $00000000
Addr : 0EBB:             FD  : Math Op =<    
Addr : 0EBC: JZ Label0041
Addr : 0EBC:          0A 02  : jz Address = 0EC0 2
Addr : 0EBE:             36  : Constant 2 $00000001
Addr : 0EBF:             55  : Variable Operation Global Offset - 5 Write
Addr : 0EC0: Label0041
Addr : 0EC0: Label0042
Addr : 0EC0:          38 50  : Constant 1 Bytes - 50 
Addr : 0EC2:             50  : Variable Operation Global Offset - 4 Read
Addr : 0EC3:             36  : Constant 2 $00000001
Addr : 0EC4:             ED  : Math Op -     
Addr : 0EC5:             F4  : Math Op *     
Addr : 0EC6:             54  : Variable Operation Global Offset - 5 Read
Addr : 0EC7:             36  : Constant 2 $00000001
Addr : 0EC8:             ED  : Math Op -     
Addr : 0EC9:             EC  : Math Op +     
Addr : 0ECA:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0ECD:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0ED0:             35  : Constant 1 $00000000
Addr : 0ED1:             F9  : Math Op <     
Addr : 0ED2: JZ Label0043
Addr : 0ED2:          0A 04  : jz Address = 0ED8 4
Addr : 0ED4:             35  : Constant 1 $00000000
Addr : 0ED5:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0ED8: Label0043
Addr : 0ED8: Label0044
Addr : 0ED8:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0EDB:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0EDE:             FE  : Math Op =>    
Addr : 0EDF: JZ Label0045
Addr : 0EDF:          0A 08  : jz Address = 0EE9 8
Addr : 0EE1:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0EE4:             36  : Constant 2 $00000001
Addr : 0EE5:             ED  : Math Op -     
Addr : 0EE6:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0EE9: Label0045
Addr : 0EE9: Label0046
Addr : 0EE9: CaseDone Label003E
Addr : 0EE9:             0C  : Casedone      
Addr : 0EEA: Label0047
Addr : 0EEA:             50  : Variable Operation Global Offset - 4 Read
Addr : 0EEB:             36  : Constant 2 $00000001
Addr : 0EEC:             FC  : Math Op ==    
Addr : 0EED: JZ Label0048
Addr : 0EED:          0A 23  : jz Address = 0F12 35
Addr : 0EEF:             01  : Drop Anchor   
Addr : 0EF0:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0EF3:          05 14  : Call Sub 20   
Addr : 0EF5:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0EF8:          38 50  : Constant 1 Bytes - 50 
Addr : 0EFA:             ED  : Math Op -     
Addr : 0EFB:             69  : Variable Operation Local Offset - 2 Write
Addr : 0EFC:             68  : Variable Operation Local Offset - 2 Read
Addr : 0EFD:          38 50  : Constant 1 Bytes - 50 
Addr : 0EFF:             F7  : Math Op //    
Addr : 0F00:          6A 4D  : Variable Operation Local Offset - 2 Assign WordMathop -
Addr : 0F02: Label004A
Addr : 0F02:             68  : Variable Operation Local Offset - 2 Read
Addr : 0F03:             35  : Constant 1 $00000000
Addr : 0F04:             FE  : Math Op =>    
Addr : 0F05: JZ Label004C
Addr : 0F05:          0A 0A  : jz Address = 0F11 10
Addr : 0F07:             01  : Drop Anchor   
Addr : 0F08:             68  : Variable Operation Local Offset - 2 Read
Addr : 0F09:          05 13  : Call Sub 19   
Addr : 0F0B:          38 50  : Constant 1 Bytes - 50 
Addr : 0F0D:          6A 4D  : Variable Operation Local Offset - 2 Assign WordMathop -
Addr : 0F0F: Label004B
Addr : 0F0F: JMP Label004A
Addr : 0F0F:          04 71  : Jmp 0F02 -15  
Addr : 0F11: Label004C
Addr : 0F11:             32  : Return        
Addr : 0F12: Label0048
Addr : 0F12: Label0049
Addr : 0F12:             50  : Variable Operation Global Offset - 4 Read
Addr : 0F13:          37 00  : Constant Mask Y=0 00000002
Addr : 0F15:             FC  : Math Op ==    
Addr : 0F16: JZ Label004D
Addr : 0F16:          0A 04  : jz Address = 0F1C 4
Addr : 0F18:             35  : Constant 1 $00000000
Addr : 0F19:       A9 93 7C  : Memory Op Word VBASE + WRITE Address = 137C
Addr : 0F1C: Label004D
Addr : 0F1C: Label004E
Addr : 0F1C:             01  : Drop Anchor   
Addr : 0F1D:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F20:          05 13  : Call Sub 19   
Addr : 0F22:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F25:          38 50  : Constant 1 Bytes - 50 
Addr : 0F27:             EC  : Math Op +     
Addr : 0F28:             69  : Variable Operation Local Offset - 2 Write
Addr : 0F29:             68  : Variable Operation Local Offset - 2 Read
Addr : 0F2A:          38 50  : Constant 1 Bytes - 50 
Addr : 0F2C:             F7  : Math Op //    
Addr : 0F2D:          6A 4D  : Variable Operation Local Offset - 2 Assign WordMathop -
Addr : 0F2F: Label004F
Addr : 0F2F:             68  : Variable Operation Local Offset - 2 Read
Addr : 0F30:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0F33:             F9  : Math Op <     
Addr : 0F34: JZ Label0051
Addr : 0F34:          0A 0A  : jz Address = 0F40 10
Addr : 0F36:             01  : Drop Anchor   
Addr : 0F37:             68  : Variable Operation Local Offset - 2 Read
Addr : 0F38:          05 13  : Call Sub 19   
Addr : 0F3A:          38 50  : Constant 1 Bytes - 50 
Addr : 0F3C:          6A 4C  : Variable Operation Local Offset - 2 Assign WordMathop +
Addr : 0F3E: Label0050
Addr : 0F3E: JMP Label004F
Addr : 0F3E:          04 6F  : Jmp 0F2F -17  
Addr : 0F40: Label0051
Addr : 0F40: CaseDone Label0047
Addr : 0F40:             0C  : Casedone      
Addr : 0F41: Label0052
Addr : 0F41:             50  : Variable Operation Global Offset - 4 Read
Addr : 0F42:             34  : Constant 0 $FFFFFFFF
Addr : 0F43:             FC  : Math Op ==    
Addr : 0F44: JZ Label0053
Addr : 0F44:          0A 08  : jz Address = 0F4E 8
Addr : 0F46:             01  : Drop Anchor   
Addr : 0F47:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F4A:          05 13  : Call Sub 19   
Addr : 0F4C: JMP Label0054
Addr : 0F4C:          04 1A  : Jmp 0F68 26   
Addr : 0F4E: Label0053
Addr : 0F4E:             50  : Variable Operation Global Offset - 4 Read
Addr : 0F4F:             36  : Constant 2 $00000001
Addr : 0F50:             FC  : Math Op ==    
Addr : 0F51: JZ Label0055
Addr : 0F51:          0A 08  : jz Address = 0F5B 8
Addr : 0F53:             01  : Drop Anchor   
Addr : 0F54:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F57:          05 14  : Call Sub 20   
Addr : 0F59: JMP Label0054
Addr : 0F59:          04 0D  : Jmp 0F68 13   
Addr : 0F5B: Label0055
Addr : 0F5B:             01  : Drop Anchor   
Addr : 0F5C:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F5F:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F62:          38 50  : Constant 1 Bytes - 50 
Addr : 0F64:             F7  : Math Op //    
Addr : 0F65:             ED  : Math Op -     
Addr : 0F66:          05 13  : Call Sub 19   
Addr : 0F68: Label0056
Addr : 0F68: Label0054
Addr : 0F68: CaseDone Label0052
Addr : 0F68:             0C  : Casedone      
Addr : 0F69: Label0057
Addr : 0F69:             00  : Drop Anchor Push 
Addr : 0F6A:          05 1B  : Call Sub 27   
Addr : 0F6C: JZ Label0058
Addr : 0F6C:          0A 1D  : jz Address = 0F8B 29
Addr : 0F6E: Label005A
Addr : 0F6E:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0F70:             35  : Constant 1 $00000000
Addr : 0F71:             FA  : Math Op >     
Addr : 0F72: JZ Label005C
Addr : 0F72:          0A 17  : jz Address = 0F8B 23
Addr : 0F74:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0F77:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0F7A:             F9  : Math Op <     
Addr : 0F7B: JZ Label005D
Addr : 0F7B:          0A 06  : jz Address = 0F83 6
Addr : 0F7D:             01  : Drop Anchor   
Addr : 0F7E:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0F81:          05 15  : Call Sub 21   
Addr : 0F83: Label005D
Addr : 0F83: Label005E
Addr : 0F83:             01  : Drop Anchor   
Addr : 0F84:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F87:          05 18  : Call Sub 24   
Addr : 0F89: Label005B
Addr : 0F89: JMP Label005A
Addr : 0F89:          04 63  : Jmp 0F6E -29  
Addr : 0F8B: Label005C
Addr : 0F8B: Label0058
Addr : 0F8B: Label0059
Addr : 0F8B: CaseDone Label0057
Addr : 0F8B:             0C  : Casedone      
Addr : 0F8C: Label005F
Addr : 0F8C:             00  : Drop Anchor Push 
Addr : 0F8D:          05 1B  : Call Sub 27   
Addr : 0F8F: JZ Label0060
Addr : 0F8F:          0A 1D  : jz Address = 0FAE 29
Addr : 0F91: Label0062
Addr : 0F91:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0F93:             35  : Constant 1 $00000000
Addr : 0F94:             FA  : Math Op >     
Addr : 0F95: JZ Label0064
Addr : 0F95:          0A 17  : jz Address = 0FAE 23
Addr : 0F97:             01  : Drop Anchor   
Addr : 0F98:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0F9B:          05 15  : Call Sub 21   
Addr : 0F9D:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0FA0:       39 07 D0  : Constant 2 Bytes - 07 D0 
Addr : 0FA3:             F9  : Math Op <     
Addr : 0FA4: JZ Label0065
Addr : 0FA4:          0A 06  : jz Address = 0FAC 6
Addr : 0FA6:             01  : Drop Anchor   
Addr : 0FA7:       A8 93 80  : Memory Op Word VBASE + READ Address = 1380
Addr : 0FAA:          05 18  : Call Sub 24   
Addr : 0FAC: Label0065
Addr : 0FAC: Label0066
Addr : 0FAC: Label0063
Addr : 0FAC: JMP Label0062
Addr : 0FAC:          04 63  : Jmp 0F91 -29  
Addr : 0FAE: Label0064
Addr : 0FAE: Label0060
Addr : 0FAE: Label0061
Addr : 0FAE: CaseDone Label005F
Addr : 0FAE:             0C  : Casedone      
Addr : 0FAF: Label0067
Addr : 0FAF: Label0068
Addr : 0FAF:          52 BE  : Variable Operation Global Offset - 4 Assign VAR-- post-dec Long Push
Addr : 0FB1: JZ Label006A
Addr : 0FB1:          0A 08  : jz Address = 0FBB 8
Addr : 0FB3:             01  : Drop Anchor   
Addr : 0FB4:       A8 93 7C  : Memory Op Word VBASE + READ Address = 137C
Addr : 0FB7:          05 1A  : Call Sub 26   
Addr : 0FB9: Label0069
Addr : 0FB9: JMP Label0068
Addr : 0FB9:          04 74  : Jmp 0FAF -12  
Addr : 0FBB: Label006A
Addr : 0FBB: CaseDone Label0067
Addr : 0FBB:             0C  : Casedone      
Addr : 0FBC: Label0008
Addr : 0FBC:             32  : Return        
|===========================================================================|
Object vgacolour
Object Base is 0FC0
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0008 Variable cog
|===========================================================================|
Object DAT Blocks
|===========================================================================|
0FCC(0000)             |                         org        0                                ' set origin to $000 for start of program
0FCC(0000) 00 02 00 00 | d0                        long        1 << 9                                ' d0 always resides here at $000, executes as NOP
0FD0(0001) D1 DE BF A0 | :move                        mov        $1EF, main_begin + main_size - 1
0FD4(0002) 18 02 BC 84 |                         sub        :move,d0s0                        ' (do reverse move to avoid overwrite)
0FD8(0003) 01 34 FC E4 |                         djnz        main_ctr,#:move
0FDC(0004) 1C 42 BD A0 | :waitvid                mov        scancode+0, i0                        ' org        scancode
0FE0(0005) 1D 44 BD A0 | :shr                        mov        scancode+1, i1                        ' waitvid colorbuff+0, scanbuff+0
0FE4(0006) 19 08 BC 80 |                         add        :waitvid, d1                        ' shr        scanbuff+0,#8
0FE8(0007) 19 0A BC 80 |                         add        :shr, d1                         ' waitvid colorbuff+1, scanbuff+1
0FEC(0008) 18 38 BC 80 |                         add        i0, d0s0                        ' shr        scanbuff+1,#8
0FF0(0009) 00 3A BC 80 |                         add        i1, d0                                ' ...
0FF4(000A) 04 36 FC E4 |                         djnz        scan_ctr, #:waitvid                ' waitvid colorbuff+cols-1, scanbuff+cols-1
0FF8(000B) 1E 80 BE A0 |                         mov        scancode+cols*2-1, i2                ' mov        vscl,#hf
0FFC(000C) 1F 82 BE A0 |                         mov        scancode+cols*2+0, i3                ' waitvid hvsync,#0
1000(000D) 20 84 BE A0 |                         mov        scancode+cols*2+1, i4                ' jmp        #scanret
1004(000E) 21 EC BF A0 |                         mov        dira, reg_dira                        ' set pin directions
1008(000F) 22 EE BF A0 |                         mov        dirb, reg_dirb
100C(0010) 18 F4 FF 58 |                         movi        frqa, #(pr / 5) << 2                ' set pixel rate
1010(0011) 23 FC BF A0 |                         mov        vcfg, reg_vcfg                        ' set video configuration
1014(0012) 01 FE FF A0 |                         mov        vscl, #1                         ' set video to reload on every pixel
1018(0013) A7 49 BC F8 |                         waitcnt sync_cnt, colormask                ' wait for start value in cnt, add ~1ms
101C(0014) 0E F0 FF 58 |                         movi        ctra, #%00001_110                ' COGs in sync! enable PLLs now - NCOs locked!
1020(0015) 00 48 FC F8 |                         waitcnt sync_cnt, #0                        ' wait ~1ms for PLLs to stabilize - PLLs locked!
1024(0016) 64 FE FF A0 |                         mov        vscl, #100                        ' insure initial WAITVIDs lock cleanly
1028(0017) 43 01 7C 5C |                         jmp        #vsync                                ' jump to vsync - WAITVIDs will now be locked!
102C(0018) 01 02 00 00 | d0s0                        long        1 << 9 + 1
1030(0019) 00 04 00 00 | d1                        long        1 << 10
1034(001A) AD 00 00 00 | main_ctr                long        main_size
1038(001B) 50 00 00 00 | scan_ctr                long        cols
103C(001C) 01 A2 3C FC | i0                        waitvid colorbuff+0, scanbuff+0
1040(001D) 08 02 FC 28 | i1                        shr        scanbuff+0, #8
1044(001E) 18 FE FF A0 | i2                        mov        vscl, #hf
1048(001F) 00 5A 7F FC | i3                        waitvid hvsync, #0
104C(0020) 85 01 7C 5C | i4                        jmp        #scanret
1050(0021) 00 00 00 00 | reg_dira                long        0                                ' set at runtime
1054(0022) 00 00 00 00 | reg_dirb                long        0                                ' set at runtime
1058(0023) 00 00 00 00 | reg_vcfg                long        0                                ' set at runtime
105C(0024) 00 00 00 00 | sync_cnt                long        0                                ' set at runtime
1060(0025)             |                         fit        scancode                        ' make sure initialization code and data fit
1060(0025)             | There are 124 ($07C) Longs left in the cog
1060(0025)             | main_begin                org        maincode                        ' main code follows (gets moved into maincode)
1060(0143) 03 A0 FF A0 | vsync                        mov        x, #vs                                ' do vertical sync lines
1064(0144) 94 3D FF 5C |                         call        #blank_vsync
1068(0145) 11 A0 FF A0 | vb_lines                mov        x, #vb                                ' do vertical back porch lines (# set at runtime)
106C(0146) 94 3D FF 5C |                         call        #blank_vsync
1070(0147) 9F 9D BF A0 |                         mov        screen_ptr, screen_base                ' reset screen pointer to upper-left character
1074(0148) 00 AA FF A0 |                         mov        row, #0                                ' reset row counter for cursor insertion
1078(0149) 3C AC FF A0 |                         mov        fours, #rows * 4 / 2                ' set number of 4-line builds for whole screen
107C(014A) A2 9F BF A0 | fourline                mov        font_ptr, font_part                ' get address of appropriate font section
1080(014B) 0A 9E FF 2C |                         shl        font_ptr, #8+2
1084(014C) A1 9F BF 80 |                         add        font_ptr, font_base
1088(014D) 00 B6 FE 54 |                         movd        :pixa, #scanbuff-1                ' reset scanbuff address (pre-decremented)
108C(014E) 50 CA FE 54 |                         movd        :cola, #colorbuff-1                ' reset colorbuff address (pre-decremented)
1090(014F) 50 CC FE 54 |                         movd        :colb, #colorbuff-1
1094(0150) 02 A2 FF A0 |                         mov        y, #2                                ' must build scanbuff in two sections because
1098(0151) A5 FF BF A0 |                         mov        vscl, vscl_line2x                ' ..pixel counter is limited to twelve bits
109C(0152) 00 56 7F FC | :halfrow                waitvid underscore, #0                        ' output lows to let other COG drive VGA pins
10A0(0153) 28 A0 FF A0 |                         mov        x, #cols/2                        ' ..for 2 scan lines, ready for half a row
10A4(0154) CE A5 BF 04 | :column                         rdword        z, screen_ptr                        ' get character and colors from screen memory
10A8(0155) D2 A9 BF A0 |                         mov        bg, z
10AC(0156) FF A4 FF 60 |                         and        z, #$ff                                ' mask character code
10B0(0157) 02 A4 FF 2C |                         shl        z, #2                                ' * 4
10B4(0158) CF A5 BF 80 |                         add        z, font_ptr                        ' add font section address to point to 8*4 pixels
10B8(0159) 00 B6 BE 80 |                         add        :pixa, d0                        ' increment scanbuff destination addresses
10BC(015A) 02 9C FF 80 |                         add        screen_ptr, #2                        ' increment screen memory address
10C0(015B) D2 03 BC 08 | :pixa                        rdlong        scanbuff, z                        ' read pixel long (8*4) into scanbuff
10C4(015C) 0C A8 FF 20 |                         ror        bg, #12                                ' background color in bits 3..0
10C8(015D) D4 A7 BF A0 |                         mov        fg, bg                                ' foreground color in bits 31..28
10CC(015E) 1C A6 FF 28 |                         shr        fg, #28                                ' bits 3..0
10D0(015F) BE A7 FF 80 |                         add        fg, #fg_clut                        ' + offset to foreground CLUT
10D4(0160) D3 CB BE 50 |                         movs        :cola, fg
10D8(0161) 00 CA BE 80 |                         add        :cola, d0
10DC(0162) AE A9 FF 80 |                         add        bg, #bg_clut                        ' + offset to background CLUT
10E0(0163) D4 CD BE 50 |                         movs        :colb, bg
10E4(0164) 00 CC BE 80 |                         add        :colb, d0
10E8(0165) 00 A2 BC A0 | :cola                        mov        colorbuff, 0-0
10EC(0166) 00 A2 BC 68 | :colb                        or        colorbuff, 0-0
10F0(0167) 54 A1 FF E4 |                         djnz        x, #:column                        ' another character in this half-row?
10F4(0168) 52 A3 FF E4 |                         djnz        y, #:halfrow                        ' loop to do 2nd half-row, time for 2nd WAITVID
10F8(0169) A0 9C FF 84 |                         sub        screen_ptr, #2*cols                ' back up to start of same row in screen memory
10FC(016A) 02 A4 FF A0 |                         mov        z, #2                                ' ready for two cursors
1100(016B) A0 A1 BF 00 | :cursor                        rdbyte        x, cursor_base                        ' x in range?
1104(016C) 01 40 FF 80 |                         add        cursor_base, #1
1108(016D) 50 A0 7F 85 |                         cmp        x, #cols        wc
110C(016E) A0 A3 BF 00 |                         rdbyte        y, cursor_base                        ' y match?
1110(016F) 01 40 FF 80 |                         add        cursor_base, #1
1114(0170) D5 A3 3F 86 |                         cmp        y, row                wz
1118(0171) A0 A3 BF 00 |                         rdbyte        y, cursor_base                        ' get cursor mode
111C(0172) 01 40 FF 80 |                         add        cursor_base, #1
1120(0173) 80 01 5C 5C |         if_nc_or_nz        jmp        #:nocursor                        ' if cursor not in scanbuff, no cursor
1124(0174) 01 A0 FF 80 |                         add        x, #scanbuff                        ' cursor in scanbuff, set scanbuff address
1128(0175) D0 FF BE 54 |                         movd        :xor, x
112C(0176) 02 A2 7F 61 |                         test        y, #%010        wc                ' get mode bits into flags
1130(0177) 01 A2 7F 62 |                         test        y, #%001        wz
1134(0178) 80 01 48 5C |         if_nc_and_z        jmp        #:nocursor                        ' if cursor disabled, no cursor
1138(0179) F1 53 23 61 |         if_c_and_z        test        slowbit, cnt        wc                ' if blink mode, get blink state
113C(017A) F1 55 13 61 |         if_c_and_nz        test        fastbit, cnt        wc
1140(017B) 04 A2 7F 62 |                         test        y, #%100        wz                ' get box or underscore cursor piece
1144(017C) A8 A1 AB A0 |         if_z                mov        x, longmask
1148(017D) AB A1 97 A0 |         if_nz                mov        x, underscore
114C(017E) 03 44 57 86 |         if_nz                cmp        font_part, #3        wz                ' if underscore, must be last font section
1150(017F) D0 03 88 6C | :xor        if_nc_and_z        xor        scanbuff, x                        ' conditionally xor cursor into scanbuff
1154(0180) 6B A5 FF E4 | :nocursor                djnz        z, #:cursor                        ' second cursor?
1158(0181) 06 40 FF 84 |                         sub        cursor_base, #3*2                ' restore cursor base
115C(0182) 04 A2 FF A0 |                         mov        y, #4                                ' ready for four scan lines
1160(0183) A6 FF BF A0 | scanline                mov        vscl, vscl_chr                        ' set pixel rate for characters
1164(0184) A1 00 7C 5C |                         jmp        #scancode                        ' jump to scanbuff display routine in scancode
1168(0185) 28 FE FF A0 | scanret                         mov        vscl, #hs                        ' do horizontal sync pixels
116C(0186) 01 5A 7F FC |                         waitvid hvsync, #1                        ' #1 makes hsync active
1170(0187) 80 FE FF A0 |                         mov        vscl, #hb                        ' do horizontal back porch pixels
1174(0188) 00 5A 7F FC |                         waitvid hvsync, #0                        ' #0 makes hsync inactive
1178(0189) 08 A0 FC 28 |                         shr        scanbuff+cols-1, #8                ' shift last column's pixels right by 8
117C(018A) 83 A3 FF E4 |                         djnz        y, #scanline                        ' another scan line?
1180(018B) 02 44 FF 80 |                         add        font_part, #2                        ' if font_part + 2 => 4, subtract 4 (new row)
1184(018C) 04 44 FF E1 |                         cmpsub        font_part, #4                wc        ' c=0 for same row, c=1 for new row
1188(018D) A0 9C F3 80 |         if_c                add        screen_ptr, #2*cols                ' if new row, advance screen pointer
118C(018E) 01 AA F3 80 |         if_c                add        row, #1                                ' if new row, increment row counter
1190(018F) 4A AD FF E4 |                         djnz        fours, #fourline                 ' another 4-line build/display?
1194(0190) F0 51 3F 08 |                         wrlong        longmask,par                        ' write -1 to refresh indicator
1198(0191) 14 A0 FF A0 | vf_lines                mov        x,#vf                                ' do vertical front porch lines (# set at runtime)
119C(0192) 95 3D FF 5C |                         call        #blank
11A0(0193) 43 01 7C 5C |                         jmp        #vsync                                ' new field, loop to vsync
11A4(0194) 01 5B FF 6C | blank_vsync                xor        hvsync,#$101                        ' flip vertical sync bits
11A8(0195) A3 FF BF A0 | blank                        mov        vscl, hx                         ' do blank pixels
11AC(0196) 00 5A 7F FC |                         waitvid hvsync, #0
11B0(0197) 18 FE FF A0 |                         mov        vscl, #hf                        ' do horizontal front porch pixels
11B4(0198) 00 5A 7F FC |                         waitvid hvsync, #0
11B8(0199) 28 FE FF A0 |                         mov        vscl, #hs                        ' do horizontal sync pixels
11BC(019A) 01 5A 7F FC |                         waitvid hvsync, #1
11C0(019B) 80 FE FF A0 |                         mov        vscl, #hb                        ' do horizontal back porch pixels
11C4(019C) 00 5A 7F FC |                         waitvid hvsync, #0
11C8(019D) 95 A1 FF E4 |                         djnz        x,#blank                        ' another line?
11CC(019E)             | blank_ret
11CC(019E)             | blank_vsync_ret
11CC(019E) 00 00 7C 5C |                         ret
11D0(019F) 00 00 00 00 | screen_base                long        0                                ' set at runtime (3 contiguous longs)
11D4(01A0) 00 00 00 00 | cursor_base                long        0                                ' set at runtime
11D8(01A1) 00 00 00 00 | font_base                long        0                                ' set at runtime
11DC(01A2) 00 00 00 00 | font_part                long        0                                ' set at runtime
11E0(01A3) 80 02 00 00 | hx                        long        hp                                ' visible pixels per scan line
11E4(01A4) 40 03 00 00 | vscl_line                long        hp + hf + hs + hb                ' total number of pixels per scan line
11E8(01A5) 80 06 00 00 | vscl_line2x                long        (hp + hf + hs + hb) * 2         ' total number of pixels per 2 scan lines
11EC(01A6) 08 10 00 00 | vscl_chr                long        1 << 12 + 8                        ' 1 clock per pixel and 8 pixels per set
11F0(01A7) FC FC 00 00 | colormask                long        $FCFC                                ' mask to isolate R,G,B bits from H,V
11F4(01A8) FF FF FF FF | longmask                long        $FFFFFFFF                        ' all bits set
11F8(01A9) 00 00 00 02 | slowbit                        long        1 << 25                                ' cnt mask for slow cursor blink
11FC(01AA) 00 00 00 01 | fastbit                        long        1 << 24                                ' cnt mask for fast cursor blink
1200(01AB) 00 00 FF FF | underscore                long        $FFFF0000                        ' underscore cursor pattern
1204(01AC) 03 03 00 00 | hv                        long        hv_inactive                        ' -H,-V states
1208(01AD) 03 01 00 00 | hvsync                        long        hv_inactive ^ $200                ' +/-H,-V states
120C(01AE) 03 03 00 00 | bg_clut                        long        %00000011_00000011                ' black
1210(01AF) 0B 03 00 00 |                         long        %00000011_00001011                ' dark blue
1214(01B0) 23 03 00 00 |                         long        %00000011_00100011                ' dark green
1218(01B1) 2B 03 00 00 |                         long        %00000011_00101011                ' dark cyan
121C(01B2) 83 03 00 00 |                         long        %00000011_10000011                ' dark red
1220(01B3) 8B 03 00 00 |                         long        %00000011_10001011                ' dark magenta
1224(01B4) A3 03 00 00 |                         long        %00000011_10100011                ' brown
1228(01B5) AB 03 00 00 |                         long        %00000011_10101011                ' light gray
122C(01B6) 57 03 00 00 |                         long        %00000011_01010111                ' dark gray
1230(01B7) 0F 03 00 00 |                         long        %00000011_00001111                ' light blue
1234(01B8) 33 03 00 00 |                         long        %00000011_00110011                ' light green
1238(01B9) 3F 03 00 00 |                         long        %00000011_00111111                ' light cyan
123C(01BA) C3 03 00 00 |                         long        %00000011_11000011                ' light red
1240(01BB) CF 03 00 00 |                         long        %00000011_11001111                ' light magenta
1244(01BC) F3 03 00 00 |                         long        %00000011_11110011                ' light yellow
1248(01BD) FF 03 00 00 |                         long        %00000011_11111111                ' white
124C(01BE) 03 03 00 00 | fg_clut                        long        %00000011_00000011                ' black
1250(01BF) 03 07 00 00 |                         long        %00000111_00000011                ' dark blue
1254(01C0) 03 13 00 00 |                         long        %00010011_00000011                ' dark green
1258(01C1) 03 17 00 00 |                         long        %00010111_00000011                ' dark cyan
125C(01C2) 03 43 00 00 |                         long        %01000011_00000011                ' dark red
1260(01C3) 03 47 00 00 |                         long        %01000111_00000011                ' dark magenta
1264(01C4) 03 53 00 00 |                         long        %01010011_00000011                ' brown
1268(01C5) 03 AB 00 00 |                         long        %10101011_00000011                ' light gray
126C(01C6) 03 57 00 00 |                         long        %01010111_00000011                ' dark gray
1270(01C7) 03 0B 00 00 |                         long        %00001011_00000011                ' blue
1274(01C8) 03 23 00 00 |                         long        %00100011_00000011                ' green
1278(01C9) 03 2B 00 00 |                         long        %00101011_00000011                ' cyan
127C(01CA) 03 83 00 00 |                         long        %10000011_00000011                ' red
1280(01CB) 03 8B 00 00 |                         long        %10001011_00000011                ' magenta
1284(01CC) 03 A3 00 00 |                         long        %10100011_00000011                ' yellow
1288(01CD) 03 FF 00 00 |                         long        %11111111_00000011                ' white
128C(01CE)             | screen_ptr                res        1
128C(01CF)             | font_ptr                res        1
128C(01D0)             | x                        res        1
128C(01D1)             | y                        res        1
128C(01D2)             | z                        res        1
128C(01D3)             | fg                        res        1
128C(01D4)             | bg                        res        1
128C(01D5)             | row                        res        1
128C(01D6)             | fours                        res        1
128C(01D7)             |                         fit        $1f0
128C(01D7)             | There are 25 ($019) Longs left in the cog
128C(01D7) 00 00 00 00 | font        long
128C(01D7) 00 BA 82 00 |   long $0082ba00,$00000000,$2a552a00,$36360000,$061e0000,$061c0000,$06060000,$3c000000
1290(01D8) 00 00 00 00 | 
1294(01D9) 00 2A 55 2A | 
1298(01DA) 00 00 36 36 | 
129C(01DB) 00 00 1E 06 | 
12A0(01DC) 00 00 1C 06 | 
12A4(01DD) 00 00 06 06 | 
12A8(01DE) 00 00 00 3C | 
12AC(01DF) 00 00 00 00 |   long $00000000,$6e660000,$66660000,$18181818,$00000000,$00000000,$18181818,$18181818
12B0(01E0) 00 00 66 6E | 
12B4(01E1) 00 00 66 66 | 
12B8(01E2) 18 18 18 18 | 
12BC(01E3) 00 00 00 00 | 
12C0(01E4) 00 00 00 00 | 
12C4(01E5) 18 18 18 18 | 
12C8(01E6) 18 18 18 18 | 
12CC(01E7) FF FF 00 00 |   long $0000ffff,$00000000,$00000000,$00000000,$00000000,$18181818,$18181818,$18181818
12D0(01E8) 00 00 00 00 | 
12D4(01E9) 00 00 00 00 | 
12D8(01EA) 00 00 00 00 | 
12DC(01EB) 00 00 00 00 | 
12E0(01EC) 18 18 18 18 | 
12E4(01ED) 18 18 18 18 | 
12E8(01EE) 18 18 18 18 | 
12EC(01EF) 00 00 00 00 |   long $00000000,$18181818,$60000000,$06000000,$00000000,$00000000,$38000000,$00000000
12F0(01F0) 18 18 18 18 | 
12F4(01F1) 00 00 00 60 | 
12F8(01F2) 00 00 00 06 | 
12FC(01F3) 00 00 00 00 | 
1300(01F4) 00 00 00 00 | 
1304(01F5) 00 00 00 38 | 
1308(01F6) 00 00 00 00 | 
130C(01F7) 00 00 00 00 |   long $00000000,$18000000,$36000000,$24000000,$18000000,$4e000000,$1c000000,$18000000
1310(01F8) 00 00 00 18 | 
1314(01F9) 00 00 00 36 | 
1318(01FA) 00 00 00 24 | 
131C(01FB) 00 00 00 18 | 
1320(01FC) 00 00 00 4E | 
1324(01FD) 00 00 00 1C | 
1328(01FE) 00 00 00 18 | 
132C(01FF) 00 00 00 30 |   long $30000000,$0c000000,$00000000,$00000000,$00000000,$00000000,$00000000,$60000000
1330(0200) 00 00 00 0C | 
1334(0201) 00 00 00 00 | 
1338(0202) 00 00 00 00 | 
133C(0203) 00 00 00 00 | 
1340(0204) 00 00 00 00 | 
1344(0205) 00 00 00 00 | 
1348(0206) 00 00 00 60 | 
134C(0207) 00 00 00 18 |   long $18000000,$18000000,$3c000000,$7e000000,$60000000,$7e000000,$3c000000,$7e000000
1350(0208) 00 00 00 18 | 
1354(0209) 00 00 00 3C | 
1358(020A) 00 00 00 7E | 
135C(020B) 00 00 00 60 | 
1360(020C) 00 00 00 7E | 
1364(020D) 00 00 00 3C | 
1368(020E) 00 00 00 7E | 
136C(020F) 00 00 00 3C |   long $3c000000,$3c000000,$00000000,$00000000,$60000000,$00000000,$06000000,$3c000000
1370(0210) 00 00 00 3C | 
1374(0211) 00 00 00 00 | 
1378(0212) 00 00 00 00 | 
137C(0213) 00 00 00 60 | 
1380(0214) 00 00 00 00 | 
1384(0215) 00 00 00 06 | 
1388(0216) 00 00 00 3C | 
138C(0217) 00 00 00 3C |   long $3c000000,$3c000000,$3e000000,$3c000000,$3e000000,$7e000000,$7e000000,$3c000000
1390(0218) 00 00 00 3C | 
1394(0219) 00 00 00 3E | 
1398(021A) 00 00 00 3C | 
139C(021B) 00 00 00 3E | 
13A0(021C) 00 00 00 7E | 
13A4(021D) 00 00 00 7E | 
13A8(021E) 00 00 00 3C | 
13AC(021F) 00 00 00 66 |   long $66000000,$7e000000,$60000000,$46000000,$06000000,$42000000,$66000000,$3c000000
13B0(0220) 00 00 00 7E | 
13B4(0221) 00 00 00 60 | 
13B8(0222) 00 00 00 46 | 
13BC(0223) 00 00 00 06 | 
13C0(0224) 00 00 00 42 | 
13C4(0225) 00 00 00 66 | 
13C8(0226) 00 00 00 3C | 
13CC(0227) 00 00 00 3E |   long $3e000000,$3c000000,$3e000000,$3c000000,$7e000000,$66000000,$66000000,$66000000
13D0(0228) 00 00 00 3C | 
13D4(0229) 00 00 00 3E | 
13D8(022A) 00 00 00 3C | 
13DC(022B) 00 00 00 7E | 
13E0(022C) 00 00 00 66 | 
13E4(022D) 00 00 00 66 | 
13E8(022E) 00 00 00 66 | 
13EC(022F) 00 00 00 42 |   long $42000000,$66000000,$7e000000,$3c000000,$06000000,$3c000000,$18000000,$00000000
13F0(0230) 00 00 00 66 | 
13F4(0231) 00 00 00 7E | 
13F8(0232) 00 00 00 3C | 
13FC(0233) 00 00 00 06 | 
1400(0234) 00 00 00 3C | 
1404(0235) 00 00 00 18 | 
1408(0236) 00 00 00 00 | 
140C(0237) 00 00 0C 18 |   long $180c0000,$00000000,$06000000,$00000000,$60000000,$00000000,$38000000,$00000000
1410(0238) 00 00 00 00 | 
1414(0239) 00 00 00 06 | 
1418(023A) 00 00 00 00 | 
141C(023B) 00 00 00 60 | 
1420(023C) 00 00 00 00 | 
1424(023D) 00 00 00 38 | 
1428(023E) 00 00 00 00 | 
142C(023F) 00 00 00 06 |   long $06000000,$18000000,$60000000,$06000000,$1c000000,$00000000,$00000000,$00000000
1430(0240) 00 00 00 18 | 
1434(0241) 00 00 00 60 | 
1438(0242) 00 00 00 06 | 
143C(0243) 00 00 00 1C | 
1440(0244) 00 00 00 00 | 
1444(0245) 00 00 00 00 | 
1448(0246) 00 00 00 00 | 
144C(0247) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1450(0248) 00 00 00 00 | 
1454(0249) 00 00 00 00 | 
1458(024A) 00 00 00 00 | 
145C(024B) 00 00 00 00 | 
1460(024C) 00 00 00 00 | 
1464(024D) 00 00 00 00 | 
1468(024E) 00 00 00 00 | 
146C(024F) 00 00 00 00 |   long $00000000,$00000000,$00000000,$38000000,$18000000,$1c000000,$4c000000,$aa55aa55
1470(0250) 00 00 00 00 | 
1474(0251) 00 00 00 00 | 
1478(0252) 00 00 00 38 | 
147C(0253) 00 00 00 18 | 
1480(0254) 00 00 00 1C | 
1484(0255) 00 00 00 4C | 
1488(0256) 55 AA 55 AA | 
148C(0257) 00 00 00 00 |   long $00000000,$00000000,$2a552a00,$36360000,$061e0000,$061c0000,$06060000,$3c000000
1490(0258) 00 00 00 00 | 
1494(0259) 00 2A 55 2A | 
1498(025A) 00 00 36 36 | 
149C(025B) 00 00 1E 06 | 
14A0(025C) 00 00 1C 06 | 
14A4(025D) 00 00 06 06 | 
14A8(025E) 00 00 00 3C | 
14AC(025F) 00 00 00 00 |   long $00000000,$6e660000,$66660000,$24242424,$00000000,$00000000,$24242424,$24242424
14B0(0260) 00 00 66 6E | 
14B4(0261) 00 00 66 66 | 
14B8(0262) 24 24 24 24 | 
14BC(0263) 00 00 00 00 | 
14C0(0264) 00 00 00 00 | 
14C4(0265) 24 24 24 24 | 
14C8(0266) 24 24 24 24 | 
14CC(0267) FF 00 FF 00 |   long $00ff00ff,$ff000000,$00000000,$00000000,$00000000,$24242424,$24242424,$24242424
14D0(0268) 00 00 00 FF | 
14D4(0269) 00 00 00 00 | 
14D8(026A) 00 00 00 00 | 
14DC(026B) 00 00 00 00 | 
14E0(026C) 24 24 24 24 | 
14E4(026D) 24 24 24 24 | 
14E8(026E) 24 24 24 24 | 
14EC(026F) 00 00 00 00 |   long $00000000,$24242424,$60000000,$06000000,$00000000,$00000000,$38000000,$00000000
14F0(0270) 24 24 24 24 | 
14F4(0271) 00 00 00 60 | 
14F8(0272) 00 00 00 06 | 
14FC(0273) 00 00 00 00 | 
1500(0274) 00 00 00 00 | 
1504(0275) 00 00 00 38 | 
1508(0276) 00 00 00 00 | 
150C(0277) 00 00 00 00 |   long $00000000,$18000000,$36000000,$24000000,$18000000,$4e000000,$1c000000,$18000000
1510(0278) 00 00 00 18 | 
1514(0279) 00 00 00 36 | 
1518(027A) 00 00 00 24 | 
151C(027B) 00 00 00 18 | 
1520(027C) 00 00 00 4E | 
1524(027D) 00 00 00 1C | 
1528(027E) 00 00 00 18 | 
152C(027F) 00 00 00 30 |   long $30000000,$0c000000,$00000000,$00000000,$00000000,$00000000,$00000000,$60000000
1530(0280) 00 00 00 0C | 
1534(0281) 00 00 00 00 | 
1538(0282) 00 00 00 00 | 
153C(0283) 00 00 00 00 | 
1540(0284) 00 00 00 00 | 
1544(0285) 00 00 00 00 | 
1548(0286) 00 00 00 60 | 
154C(0287) 00 00 00 18 |   long $18000000,$18000000,$3c000000,$7e000000,$60000000,$7e000000,$3c000000,$7e000000
1550(0288) 00 00 00 18 | 
1554(0289) 00 00 00 3C | 
1558(028A) 00 00 00 7E | 
155C(028B) 00 00 00 60 | 
1560(028C) 00 00 00 7E | 
1564(028D) 00 00 00 3C | 
1568(028E) 00 00 00 7E | 
156C(028F) 00 00 00 3C |   long $3c000000,$3c000000,$00000000,$00000000,$60000000,$00000000,$06000000,$3c000000
1570(0290) 00 00 00 3C | 
1574(0291) 00 00 00 00 | 
1578(0292) 00 00 00 00 | 
157C(0293) 00 00 00 60 | 
1580(0294) 00 00 00 00 | 
1584(0295) 00 00 00 06 | 
1588(0296) 00 00 00 3C | 
158C(0297) 00 00 00 3C |   long $3c000000,$3c000000,$3e000000,$3c000000,$3e000000,$7e000000,$7e000000,$3c000000
1590(0298) 00 00 00 3C | 
1594(0299) 00 00 00 3E | 
1598(029A) 00 00 00 3C | 
159C(029B) 00 00 00 3E | 
15A0(029C) 00 00 00 7E | 
15A4(029D) 00 00 00 7E | 
15A8(029E) 00 00 00 3C | 
15AC(029F) 00 00 00 66 |   long $66000000,$7e000000,$60000000,$46000000,$06000000,$42000000,$66000000,$3c000000
15B0(02A0) 00 00 00 7E | 
15B4(02A1) 00 00 00 60 | 
15B8(02A2) 00 00 00 46 | 
15BC(02A3) 00 00 00 06 | 
15C0(02A4) 00 00 00 42 | 
15C4(02A5) 00 00 00 66 | 
15C8(02A6) 00 00 00 3C | 
15CC(02A7) 00 00 00 3E |   long $3e000000,$3c000000,$3e000000,$3c000000,$7e000000,$66000000,$66000000,$66000000
15D0(02A8) 00 00 00 3C | 
15D4(02A9) 00 00 00 3E | 
15D8(02AA) 00 00 00 3C | 
15DC(02AB) 00 00 00 7E | 
15E0(02AC) 00 00 00 66 | 
15E4(02AD) 00 00 00 66 | 
15E8(02AE) 00 00 00 66 | 
15EC(02AF) 00 00 00 42 |   long $42000000,$66000000,$7e000000,$3c000000,$06000000,$3c000000,$18000000,$00000000
15F0(02B0) 00 00 00 66 | 
15F4(02B1) 00 00 00 7E | 
15F8(02B2) 00 00 00 3C | 
15FC(02B3) 00 00 00 06 | 
1600(02B4) 00 00 00 3C | 
1604(02B5) 00 00 00 18 | 
1608(02B6) 00 00 00 00 | 
160C(02B7) 00 00 0C 18 |   long $180c0000,$00000000,$06000000,$00000000,$60000000,$00000000,$38000000,$00000000
1610(02B8) 00 00 00 00 | 
1614(02B9) 00 00 00 06 | 
1618(02BA) 00 00 00 00 | 
161C(02BB) 00 00 00 60 | 
1620(02BC) 00 00 00 00 | 
1624(02BD) 00 00 00 38 | 
1628(02BE) 00 00 00 00 | 
162C(02BF) 00 00 00 06 |   long $06000000,$18000000,$60000000,$06000000,$1c000000,$00000000,$00000000,$00000000
1630(02C0) 00 00 00 18 | 
1634(02C1) 00 00 00 60 | 
1638(02C2) 00 00 00 06 | 
163C(02C3) 00 00 00 1C | 
1640(02C4) 00 00 00 00 | 
1644(02C5) 00 00 00 00 | 
1648(02C6) 00 00 00 00 | 
164C(02C7) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1650(02C8) 00 00 00 00 | 
1654(02C9) 00 00 00 00 | 
1658(02CA) 00 00 00 00 | 
165C(02CB) 00 00 00 00 | 
1660(02CC) 00 00 00 00 | 
1664(02CD) 00 00 00 00 | 
1668(02CE) 00 00 00 00 | 
166C(02CF) 00 00 00 00 |   long $00000000,$00000000,$00000000,$38000000,$18000000,$1c000000,$4c000000,$aa55aa55
1670(02D0) 00 00 00 00 | 
1674(02D1) 00 00 00 00 | 
1678(02D2) 00 00 00 38 | 
167C(02D3) 00 00 00 18 | 
1680(02D4) 00 00 00 1C | 
1684(02D5) 00 00 00 4C | 
1688(02D6) 55 AA 55 AA | 
168C(02D7) 82 82 00 82 |   long $82008282,$3c180000,$2a552a55,$0036363e,$0006060e,$001c0606,$001e0606,$003c6666
1690(02D8) 00 00 18 3C | 
1694(02D9) 55 2A 55 2A | 
1698(02DA) 3E 36 36 00 | 
169C(02DB) 0E 06 06 00 | 
16A0(02DC) 06 06 1C 00 | 
16A4(02DD) 06 06 1E 00 | 
16A8(02DE) 66 66 3C 00 | 
16AC(02DF) 18 18 7E 18 |   long $187e1818,$0066767e,$00183c24,$1f181818,$1f000000,$f8000000,$f8181818,$ff181818
16B0(02E0) 7E 76 66 00 | 
16B4(02E1) 24 3C 18 00 | 
16B8(02E2) 18 18 18 1F | 
16BC(02E3) 00 00 00 1F | 
16C0(02E4) 00 00 00 F8 | 
16C4(02E5) 18 18 18 F8 | 
16C8(02E6) 18 18 18 FF | 
16CC(02E7) 00 00 00 00 |   long $00000000,$0000ffff,$00000000,$00000000,$00000000,$f8181818,$1f181818,$ff181818
16D0(02E8) FF FF 00 00 | 
16D4(02E9) 00 00 00 00 | 
16D8(02EA) 00 00 00 00 | 
16DC(02EB) 00 00 00 00 | 
16E0(02EC) 18 18 18 F8 | 
16E4(02ED) 18 18 18 1F | 
16E8(02EE) 18 18 18 FF | 
16EC(02EF) 00 00 00 FF |   long $ff000000,$18181818,$0c060c30,$3060300c,$667e0000,$187e3030,$3e0c0c6c,$18180000
16F0(02F0) 18 18 18 18 | 
16F4(02F1) 30 0C 06 0C | 
16F8(02F2) 0C 30 60 30 | 
16FC(02F3) 00 00 7E 66 | 
1700(02F4) 30 30 7E 18 | 
1704(02F5) 6C 0C 0C 3E | 
1708(02F6) 00 00 18 18 | 
170C(02F7) 00 00 00 00 |   long $00000000,$18181818,$00003636,$247e7e24,$3c1a5a3c,$18302e6a,$1c363636,$00181818
1710(02F8) 18 18 18 18 | 
1714(02F9) 36 36 00 00 | 
1718(02FA) 24 7E 7E 24 | 
171C(02FB) 3C 5A 1A 3C | 
1720(02FC) 6A 2E 30 18 | 
1724(02FD) 36 36 36 1C | 
1728(02FE) 18 18 18 00 | 
172C(02FF) 18 18 0C 0C |   long $0c0c1818,$30301818,$7e182400,$7e181800,$00000000,$00000000,$00000000,$18303060
1730(0300) 18 18 30 30 | 
1734(0301) 00 24 18 7E | 
1738(0302) 00 18 18 7E | 
173C(0303) 00 00 00 00 | 
1740(0304) 00 00 00 00 | 
1744(0305) 00 00 00 00 | 
1748(0306) 60 30 30 18 | 
174C(0307) 24 66 66 66 |   long $66666624,$18181a1c,$38606666,$3c183060,$666c7870,$663e0606,$3e060666,$30306060
1750(0308) 1C 1A 18 18 | 
1754(0309) 66 66 60 38 | 
1758(030A) 60 30 18 3C | 
175C(030B) 70 78 6C 66 | 
1760(030C) 06 06 3E 66 | 
1764(030D) 66 06 06 3E | 
1768(030E) 60 60 30 30 | 
176C(030F) 66 66 66 3C |   long $3c666666,$7c666666,$183c1800,$183c1800,$060c1830,$007e0000,$6030180c,$38606666
1770(0310) 66 66 66 7C | 
1774(0311) 00 18 3C 18 | 
1778(0312) 00 18 3C 18 | 
177C(0313) 30 18 0C 06 | 
1780(0314) 00 00 7E 00 | 
1784(0315) 0C 18 30 60 | 
1788(0316) 66 66 60 38 | 
178C(0317) 62 62 7A 6A |   long $6a7a6262,$7e666666,$3e666666,$06060666,$66666666,$3e060606,$3e060606,$76060666
1790(0318) 66 66 66 7E | 
1794(0319) 66 66 66 3E | 
1798(031A) 66 06 06 06 | 
179C(031B) 66 66 66 66 | 
17A0(031C) 06 06 06 3E | 
17A4(031D) 06 06 06 3E | 
17A8(031E) 66 06 06 76 | 
17AC(031F) 66 66 66 7E |   long $7e666666,$18181818,$60606060,$0e1e3666,$06060606,$667e7e66,$7e6e6e66,$66666666
17B0(0320) 18 18 18 18 | 
17B4(0321) 60 60 60 60 | 
17B8(0322) 66 36 1E 0E | 
17BC(0323) 06 06 06 06 | 
17C0(0324) 66 7E 7E 66 | 
17C4(0325) 66 6E 6E 7E | 
17C8(0326) 66 66 66 66 | 
17CC(0327) 66 66 66 3E |   long $3e666666,$66666666,$3e666666,$3c060666,$18181818,$66666666,$24246666,$66666666
17D0(0328) 66 66 66 66 | 
17D4(0329) 66 66 66 3E | 
17D8(032A) 66 06 06 3C | 
17DC(032B) 18 18 18 18 | 
17E0(032C) 66 66 66 66 | 
17E4(032D) 66 66 24 24 | 
17E8(032E) 66 66 66 66 | 
17EC(032F) 66 24 3C 18 |   long $183c2466,$183c3c66,$18306060,$0c0c0c0c,$180c0c06,$30303030,$0042663c,$00000000
17F0(0330) 66 3C 3C 18 | 
17F4(0331) 60 60 30 18 | 
17F8(0332) 0C 0C 0C 0C | 
17FC(0333) 06 0C 0C 18 | 
1800(0334) 30 30 30 30 | 
1804(0335) 3C 66 42 00 | 
1808(0336) 00 00 00 00 | 
180C(0337) 30 00 00 00 |   long $00000030,$603c0000,$663e0606,$663c0000,$667c6060,$663c0000,$1e0c0c6c,$665c0000
1810(0338) 00 00 3C 60 | 
1814(0339) 06 06 3E 66 | 
1818(033A) 00 00 3C 66 | 
181C(033B) 60 60 7C 66 | 
1820(033C) 00 00 3C 66 | 
1824(033D) 6C 0C 0C 1E | 
1828(033E) 00 00 5C 66 | 
182C(033F) 06 06 3E 66 |   long $663e0606,$181c0018,$60600060,$36660606,$18181818,$fe6a0000,$663e0000,$663c0000
1830(0340) 18 00 1C 18 | 
1834(0341) 60 00 60 60 | 
1838(0342) 06 06 66 36 | 
183C(0343) 18 18 18 18 | 
1840(0344) 00 00 6A FE | 
1844(0345) 00 00 3E 66 | 
1848(0346) 00 00 3C 66 | 
184C(0347) 00 00 3E 66 |   long $663e0000,$667c0000,$663e0000,$663c0000,$0c3e0c0c,$66660000,$66660000,$66660000
1850(0348) 00 00 7C 66 | 
1854(0349) 00 00 3E 66 | 
1858(034A) 00 00 3C 66 | 
185C(034B) 0C 0C 3E 0C | 
1860(034C) 00 00 66 66 | 
1864(034D) 00 00 66 66 | 
1868(034E) 00 00 66 66 | 
186C(034F) 00 00 66 66 |   long $66660000,$66660000,$607e0000,$0c180c0c,$18181818,$30183030,$0000327e,$aa55aa55
1870(0350) 00 00 66 66 | 
1874(0351) 00 00 7E 60 | 
1878(0352) 0C 0C 18 0C | 
187C(0353) 18 18 18 18 | 
1880(0354) 30 30 18 30 | 
1884(0355) 7E 32 00 00 | 
1888(0356) 55 AA 55 AA | 
188C(0357) 00 00 00 00 |   long $00000000,$3c180000,$2a552a55,$0036363e,$0006060e,$001c0606,$001e0606,$003c6666
1890(0358) 00 00 18 3C | 
1894(0359) 55 2A 55 2A | 
1898(035A) 3E 36 36 00 | 
189C(035B) 0E 06 06 00 | 
18A0(035C) 06 06 1C 00 | 
18A4(035D) 06 06 1E 00 | 
18A8(035E) 66 66 3C 00 | 
18AC(035F) 18 18 7E 18 |   long $187e1818,$0066767e,$00183c24,$20272424,$203f0000,$04fc0000,$04e42424,$00e72424
18B0(0360) 7E 76 66 00 | 
18B4(0361) 24 3C 18 00 | 
18B8(0362) 24 24 27 20 | 
18BC(0363) 00 00 3F 20 | 
18C0(0364) 00 00 FC 04 | 
18C4(0365) 24 24 E4 04 | 
18C8(0366) 24 24 E7 00 | 
18CC(0367) 00 00 00 00 |   long $00000000,$0000ff00,$ff000000,$00000000,$00000000,$04e42424,$20272424,$00e72424
18D0(0368) 00 FF 00 00 | 
18D4(0369) 00 00 00 FF | 
18D8(036A) 00 00 00 00 | 
18DC(036B) 00 00 00 00 | 
18E0(036C) 24 24 E4 04 | 
18E4(036D) 24 24 27 20 | 
18E8(036E) 24 24 E7 00 | 
18EC(036F) 00 00 FF 00 |   long $00ff0000,$24242424,$0c060c30,$3060300c,$667e0000,$187e3030,$3e0c0c6c,$18180000
18F0(0370) 24 24 24 24 | 
18F4(0371) 30 0C 06 0C | 
18F8(0372) 0C 30 60 30 | 
18FC(0373) 00 00 7E 66 | 
1900(0374) 30 30 7E 18 | 
1904(0375) 6C 0C 0C 3E | 
1908(0376) 00 00 18 18 | 
190C(0377) 00 00 00 00 |   long $00000000,$18181818,$00003636,$247e7e24,$3c1a5a3c,$18302e6a,$1c363636,$00181818
1910(0378) 18 18 18 18 | 
1914(0379) 36 36 00 00 | 
1918(037A) 24 7E 7E 24 | 
191C(037B) 3C 5A 1A 3C | 
1920(037C) 6A 2E 30 18 | 
1924(037D) 36 36 36 1C | 
1928(037E) 18 18 18 00 | 
192C(037F) 18 18 0C 0C |   long $0c0c1818,$30301818,$7e182400,$7e181800,$00000000,$00000000,$00000000,$18303060
1930(0380) 18 18 30 30 | 
1934(0381) 00 24 18 7E | 
1938(0382) 00 18 18 7E | 
193C(0383) 00 00 00 00 | 
1940(0384) 00 00 00 00 | 
1944(0385) 00 00 00 00 | 
1948(0386) 60 30 30 18 | 
194C(0387) 24 66 66 66 |   long $66666624,$18181a1c,$38606666,$3c183060,$666c7870,$663e0606,$3e060666,$30306060
1950(0388) 1C 1A 18 18 | 
1954(0389) 66 66 60 38 | 
1958(038A) 60 30 18 3C | 
195C(038B) 70 78 6C 66 | 
1960(038C) 06 06 3E 66 | 
1964(038D) 66 06 06 3E | 
1968(038E) 60 60 30 30 | 
196C(038F) 66 66 66 3C |   long $3c666666,$7c666666,$183c1800,$183c1800,$060c1830,$007e0000,$6030180c,$38606666
1970(0390) 66 66 66 7C | 
1974(0391) 00 18 3C 18 | 
1978(0392) 00 18 3C 18 | 
197C(0393) 30 18 0C 06 | 
1980(0394) 00 00 7E 00 | 
1984(0395) 0C 18 30 60 | 
1988(0396) 66 66 60 38 | 
198C(0397) 66 66 76 76 |   long $76766666,$7e666666,$3e666666,$06060666,$66666666,$3e060606,$3e060606,$76060666
1990(0398) 66 66 66 7E | 
1994(0399) 66 66 66 3E | 
1998(039A) 66 06 06 06 | 
199C(039B) 66 66 66 66 | 
19A0(039C) 06 06 06 3E | 
19A4(039D) 06 06 06 3E | 
19A8(039E) 66 06 06 76 | 
19AC(039F) 66 66 66 7E |   long $7e666666,$18181818,$60606060,$0e1e3666,$06060606,$667e7e66,$7e6e6e66,$66666666
19B0(03A0) 18 18 18 18 | 
19B4(03A1) 60 60 60 60 | 
19B8(03A2) 66 36 1E 0E | 
19BC(03A3) 06 06 06 06 | 
19C0(03A4) 66 7E 7E 66 | 
19C4(03A5) 66 6E 6E 7E | 
19C8(03A6) 66 66 66 66 | 
19CC(03A7) 66 66 66 3E |   long $3e666666,$66666666,$3e666666,$3c060666,$18181818,$66666666,$24246666,$66666666
19D0(03A8) 66 66 66 66 | 
19D4(03A9) 66 66 66 3E | 
19D8(03AA) 66 06 06 3C | 
19DC(03AB) 18 18 18 18 | 
19E0(03AC) 66 66 66 66 | 
19E4(03AD) 66 66 24 24 | 
19E8(03AE) 66 66 66 66 | 
19EC(03AF) 66 24 3C 18 |   long $183c2466,$183c3c66,$18306060,$0c0c0c0c,$180c0c06,$30303030,$0042663c,$00000000
19F0(03B0) 66 3C 3C 18 | 
19F4(03B1) 60 60 30 18 | 
19F8(03B2) 0C 0C 0C 0C | 
19FC(03B3) 06 0C 0C 18 | 
1A00(03B4) 30 30 30 30 | 
1A04(03B5) 3C 66 42 00 | 
1A08(03B6) 00 00 00 00 | 
1A0C(03B7) 30 00 00 00 |   long $00000030,$603c0000,$663e0606,$663c0000,$667c6060,$663c0000,$1e0c0c6c,$665c0000
1A10(03B8) 00 00 3C 60 | 
1A14(03B9) 06 06 3E 66 | 
1A18(03BA) 00 00 3C 66 | 
1A1C(03BB) 60 60 7C 66 | 
1A20(03BC) 00 00 3C 66 | 
1A24(03BD) 6C 0C 0C 1E | 
1A28(03BE) 00 00 5C 66 | 
1A2C(03BF) 06 06 3E 66 |   long $663e0606,$181c0018,$60600060,$36660606,$18181818,$fe6a0000,$663e0000,$663c0000
1A30(03C0) 18 00 1C 18 | 
1A34(03C1) 60 00 60 60 | 
1A38(03C2) 06 06 66 36 | 
1A3C(03C3) 18 18 18 18 | 
1A40(03C4) 00 00 6A FE | 
1A44(03C5) 00 00 3E 66 | 
1A48(03C6) 00 00 3C 66 | 
1A4C(03C7) 00 00 3E 66 |   long $663e0000,$667c0000,$663e0000,$663c0000,$0c3e0c0c,$66660000,$66660000,$66660000
1A50(03C8) 00 00 7C 66 | 
1A54(03C9) 00 00 3E 66 | 
1A58(03CA) 00 00 3C 66 | 
1A5C(03CB) 0C 0C 3E 0C | 
1A60(03CC) 00 00 66 66 | 
1A64(03CD) 00 00 66 66 | 
1A68(03CE) 00 00 66 66 | 
1A6C(03CF) 00 00 66 66 |   long $66660000,$66660000,$607e0000,$0c180c0c,$18181818,$30183030,$0000327e,$aa55aa55
1A70(03D0) 00 00 66 66 | 
1A74(03D1) 00 00 7E 60 | 
1A78(03D2) 0C 0C 18 0C | 
1A7C(03D3) 18 18 18 18 | 
1A80(03D4) 30 30 18 30 | 
1A84(03D5) 7E 32 00 00 | 
1A88(03D6) 55 AA 55 AA | 
1A8C(03D7) 82 00 82 82 |   long $82820082,$00183c7e,$2a552a55,$30303078,$18381878,$58385838,$18381878,$00000000
1A90(03D8) 7E 3C 18 00 | 
1A94(03D9) 55 2A 55 2A | 
1A98(03DA) 78 30 30 30 | 
1A9C(03DB) 78 18 38 18 | 
1AA0(03DC) 38 58 38 58 | 
1AA4(03DD) 78 18 38 18 | 
1AA8(03DE) 00 00 00 00 | 
1AAC(03DF) 18 00 7E 00 |   long $007e0018,$18181818,$30303078,$0000001f,$1818181f,$181818f8,$000000f8,$181818ff
1AB0(03E0) 18 18 18 18 | 
1AB4(03E1) 78 30 30 30 | 
1AB8(03E2) 1F 00 00 00 | 
1ABC(03E3) 1F 18 18 18 | 
1AC0(03E4) F8 18 18 18 | 
1AC4(03E5) F8 00 00 00 | 
1AC8(03E6) FF 18 18 18 | 
1ACC(03E7) 00 00 00 00 |   long $00000000,$00000000,$0000ffff,$ff000000,$00000000,$181818f8,$1818181f,$000000ff
1AD0(03E8) 00 00 00 00 | 
1AD4(03E9) FF FF 00 00 | 
1AD8(03EA) 00 00 00 FF | 
1ADC(03EB) 00 00 00 00 | 
1AE0(03EC) F8 18 18 18 | 
1AE4(03ED) 1F 18 18 18 | 
1AE8(03EE) FF 00 00 00 | 
1AEC(03EF) FF 18 18 18 |   long $181818ff,$18181818,$7e006030,$7e00060c,$66666666,$0c0c7e18,$3a6c0c0c,$00000000
1AF0(03F0) 18 18 18 18 | 
1AF4(03F1) 30 60 00 7E | 
1AF8(03F2) 0C 06 00 7E | 
1AFC(03F3) 66 66 66 66 | 
1B00(03F4) 18 7E 0C 0C | 
1B04(03F5) 0C 0C 6C 3A | 
1B08(03F6) 00 00 00 00 | 
1B0C(03F7) 00 00 00 00 |   long $00000000,$18180018,$00000000,$24247e7e,$183c5a58,$7256740c,$5c367656,$00000000
1B10(03F8) 18 00 18 18 | 
1B14(03F9) 00 00 00 00 | 
1B18(03FA) 7E 7E 24 24 | 
1B1C(03FB) 58 5A 3C 18 | 
1B20(03FC) 0C 74 56 72 | 
1B24(03FD) 56 76 36 5C | 
1B28(03FE) 00 00 00 00 | 
1B2C(03FF) 0C 18 18 30 |   long $3018180c,$0c181830,$0024187e,$0018187e,$18383800,$0000007e,$3c180000,$06060c0c
1B30(0400) 30 18 18 0C | 
1B34(0401) 7E 18 24 00 | 
1B38(0402) 7E 18 18 00 | 
1B3C(0403) 00 38 38 18 | 
1B40(0404) 7E 00 00 00 | 
1B44(0405) 00 00 18 3C | 
1B48(0406) 0C 0C 06 06 | 
1B4C(0407) 66 66 24 18 |   long $18246666,$7e181818,$7e06060c,$3c666060,$60607e66,$3c666060,$3c666666,$0c0c1818
1B50(0408) 18 18 18 7E | 
1B54(0409) 0C 06 06 7E | 
1B58(040A) 60 60 66 3C | 
1B5C(040B) 66 7E 60 60 | 
1B60(040C) 60 60 66 3C | 
1B64(040D) 66 66 66 3C | 
1B68(040E) 18 18 0C 0C | 
1B6C(040F) 66 66 66 3C |   long $3c666666,$3c666060,$3c180000,$18383800,$6030180c,$00007e00,$060c1830,$18180018
1B70(0410) 60 60 66 3C | 
1B74(0411) 00 00 18 3C | 
1B78(0412) 00 38 38 18 | 
1B7C(0413) 0C 18 30 60 | 
1B80(0414) 00 7E 00 00 | 
1B84(0415) 30 18 0C 06 | 
1B88(0416) 18 00 18 18 | 
1B8C(0417) 7A 02 62 3C |   long $3c62027a,$66666666,$3e666666,$3c660606,$3e666666,$7e060606,$06060606,$7c666666
1B90(0418) 66 66 66 66 | 
1B94(0419) 66 66 66 3E | 
1B98(041A) 06 06 66 3C | 
1B9C(041B) 66 66 66 3E | 
1BA0(041C) 06 06 06 7E | 
1BA4(041D) 06 06 06 06 | 
1BA8(041E) 66 66 66 7C | 
1BAC(041F) 66 66 66 66 |   long $66666666,$7e181818,$3c666060,$4666361e,$7e060606,$66666666,$66667676,$3c666666
1BB0(0420) 18 18 18 7E | 
1BB4(0421) 60 60 66 3C | 
1BB8(0422) 1E 36 66 46 | 
1BBC(0423) 06 06 06 7E | 
1BC0(0424) 66 66 66 66 | 
1BC4(0425) 76 76 66 66 | 
1BC8(0426) 66 66 66 3C | 
1BCC(0427) 06 06 06 06 |   long $06060606,$3c766e66,$4666361e,$3c666060,$18181818,$3c666666,$1818183c,$42667e7e
1BD0(0428) 66 6E 76 3C | 
1BD4(0429) 1E 36 66 46 | 
1BD8(042A) 60 60 66 3C | 
1BDC(042B) 18 18 18 18 | 
1BE0(042C) 66 66 66 3C | 
1BE4(042D) 3C 18 18 18 | 
1BE8(042E) 7E 7E 66 42 | 
1BEC(042F) 3C 24 66 42 |   long $4266243c,$18181818,$7e06060c,$3c0c0c0c,$60603030,$3c303030,$00000000,$fe000000
1BF0(0430) 18 18 18 18 | 
1BF4(0431) 0C 06 06 7E | 
1BF8(0432) 0C 0C 0C 3C | 
1BFC(0433) 30 30 60 60 | 
1C00(0434) 30 30 30 3C | 
1C04(0435) 00 00 00 00 | 
1C08(0436) 00 00 00 FE | 
1C0C(0437) 00 00 00 00 |   long $00000000,$7c66667c,$3e666666,$3c660606,$7c666666,$3c66067e,$0c0c0c0c,$3c063c66
1C10(0438) 7C 66 66 7C | 
1C14(0439) 66 66 66 3E | 
1C18(043A) 06 06 66 3C | 
1C1C(043B) 66 66 66 7C | 
1C20(043C) 7E 06 66 3C | 
1C24(043D) 0C 0C 0C 0C | 
1C28(043E) 66 3C 06 3C | 
1C2C(043F) 66 66 66 66 |   long $66666666,$7e181818,$60606060,$66361e1e,$7e181818,$c6c6d6d6,$66666666,$3c666666
1C30(0440) 18 18 18 7E | 
1C34(0441) 60 60 60 60 | 
1C38(0442) 1E 1E 36 66 | 
1C3C(0443) 18 18 18 7E | 
1C40(0444) D6 D6 C6 C6 | 
1C44(0445) 66 66 66 66 | 
1C48(0446) 66 66 66 3C | 
1C4C(0447) 66 66 3E 06 |   long $063e6666,$607c6666,$06060606,$3c66300c,$386c0c0c,$7c666666,$183c3c66,$247e7e66
1C50(0448) 66 66 7C 60 | 
1C54(0449) 06 06 06 06 | 
1C58(044A) 0C 30 66 3C | 
1C5C(044B) 0C 0C 6C 38 | 
1C60(044C) 66 66 66 7C | 
1C64(044D) 66 3C 3C 18 | 
1C68(044E) 66 7E 7E 24 | 
1C6C(044F) 3C 3C 66 66 |   long $66663c3c,$607c6666,$7e060c30,$380c0c18,$18181818,$1c303018,$00000000,$aa55aa55
1C70(0450) 66 66 7C 60 | 
1C74(0451) 30 0C 06 7E | 
1C78(0452) 18 0C 0C 38 | 
1C7C(0453) 18 18 18 18 | 
1C80(0454) 18 30 30 1C | 
1C84(0455) 00 00 00 00 | 
1C88(0456) 55 AA 55 AA | 
1C8C(0457) 00 00 00 00 |   long $00000000,$00183c7e,$2a552a55,$30303078,$18381878,$58385838,$18381878,$00000000
1C90(0458) 7E 3C 18 00 | 
1C94(0459) 55 2A 55 2A | 
1C98(045A) 78 30 30 30 | 
1C9C(045B) 78 18 38 18 | 
1CA0(045C) 38 58 38 58 | 
1CA4(045D) 78 18 38 18 | 
1CA8(045E) 00 00 00 00 | 
1CAC(045F) 18 00 7E 00 |   long $007e0018,$18181818,$30303078,$00003f20,$24242720,$2424e404,$0000fc04,$2424e700
1CB0(0460) 18 18 18 18 | 
1CB4(0461) 78 30 30 30 | 
1CB8(0462) 20 3F 00 00 | 
1CBC(0463) 20 27 24 24 | 
1CC0(0464) 04 E4 24 24 | 
1CC4(0465) 04 FC 00 00 | 
1CC8(0466) 00 E7 24 24 | 
1CCC(0467) 00 00 00 00 |   long $00000000,$00000000,$0000ff00,$00ff0000,$00000000,$2424e404,$24242720,$0000ff00
1CD0(0468) 00 00 00 00 | 
1CD4(0469) 00 FF 00 00 | 
1CD8(046A) 00 00 FF 00 | 
1CDC(046B) 00 00 00 00 | 
1CE0(046C) 04 E4 24 24 | 
1CE4(046D) 20 27 24 24 | 
1CE8(046E) 00 FF 00 00 | 
1CEC(046F) 00 E7 24 24 |   long $2424e700,$24242424,$7e006030,$7e00060c,$66666666,$0c0c7e18,$3a6c0c0c,$00000000
1CF0(0470) 24 24 24 24 | 
1CF4(0471) 30 60 00 7E | 
1CF8(0472) 0C 06 00 7E | 
1CFC(0473) 66 66 66 66 | 
1D00(0474) 18 7E 0C 0C | 
1D04(0475) 0C 0C 6C 3A | 
1D08(0476) 00 00 00 00 | 
1D0C(0477) 00 00 00 00 |   long $00000000,$18180018,$00000000,$24247e7e,$183c5a58,$7256740c,$5c367656,$00000000
1D10(0478) 18 00 18 18 | 
1D14(0479) 00 00 00 00 | 
1D18(047A) 7E 7E 24 24 | 
1D1C(047B) 58 5A 3C 18 | 
1D20(047C) 0C 74 56 72 | 
1D24(047D) 56 76 36 5C | 
1D28(047E) 00 00 00 00 | 
1D2C(047F) 0C 18 18 30 |   long $3018180c,$0c181830,$0024187e,$0018187e,$18383800,$0000007e,$3c180000,$06060c0c
1D30(0480) 30 18 18 0C | 
1D34(0481) 7E 18 24 00 | 
1D38(0482) 7E 18 18 00 | 
1D3C(0483) 00 38 38 18 | 
1D40(0484) 7E 00 00 00 | 
1D44(0485) 00 00 18 3C | 
1D48(0486) 0C 0C 06 06 | 
1D4C(0487) 66 66 24 18 |   long $18246666,$7e181818,$7e06060c,$3c666060,$60607e66,$3c666060,$3c666666,$0c0c1818
1D50(0488) 18 18 18 7E | 
1D54(0489) 0C 06 06 7E | 
1D58(048A) 60 60 66 3C | 
1D5C(048B) 66 7E 60 60 | 
1D60(048C) 60 60 66 3C | 
1D64(048D) 66 66 66 3C | 
1D68(048E) 18 18 0C 0C | 
1D6C(048F) 66 66 66 3C |   long $3c666666,$3c666060,$3c180000,$18383800,$6030180c,$00007e00,$060c1830,$18180018
1D70(0490) 60 60 66 3C | 
1D74(0491) 00 00 18 3C | 
1D78(0492) 00 38 38 18 | 
1D7C(0493) 0C 18 30 60 | 
1D80(0494) 00 7E 00 00 | 
1D84(0495) 30 18 0C 06 | 
1D88(0496) 18 00 18 18 | 
1D8C(0497) 76 06 66 3C |   long $3c660676,$66666666,$3e666666,$3c660606,$3e666666,$7e060606,$06060606,$7c666666
1D90(0498) 66 66 66 66 | 
1D94(0499) 66 66 66 3E | 
1D98(049A) 06 06 66 3C | 
1D9C(049B) 66 66 66 3E | 
1DA0(049C) 06 06 06 7E | 
1DA4(049D) 06 06 06 06 | 
1DA8(049E) 66 66 66 7C | 
1DAC(049F) 66 66 66 66 |   long $66666666,$7e181818,$3c666060,$4666361e,$7e060606,$66666666,$66667676,$3c666666
1DB0(04A0) 18 18 18 7E | 
1DB4(04A1) 60 60 66 3C | 
1DB8(04A2) 1E 36 66 46 | 
1DBC(04A3) 06 06 06 7E | 
1DC0(04A4) 66 66 66 66 | 
1DC4(04A5) 76 76 66 66 | 
1DC8(04A6) 66 66 66 3C | 
1DCC(04A7) 06 06 06 06 |   long $06060606,$3c766e66,$4666361e,$3c666060,$18181818,$3c666666,$1818183c,$42667e7e
1DD0(04A8) 66 6E 76 3C | 
1DD4(04A9) 1E 36 66 46 | 
1DD8(04AA) 60 60 66 3C | 
1DDC(04AB) 18 18 18 18 | 
1DE0(04AC) 66 66 66 3C | 
1DE4(04AD) 3C 18 18 18 | 
1DE8(04AE) 7E 7E 66 42 | 
1DEC(04AF) 3C 24 66 42 |   long $4266243c,$18181818,$7e06060c,$3c0c0c0c,$60603030,$3c303030,$00000000,$fe000000
1DF0(04B0) 18 18 18 18 | 
1DF4(04B1) 0C 06 06 7E | 
1DF8(04B2) 0C 0C 0C 3C | 
1DFC(04B3) 30 30 60 60 | 
1E00(04B4) 30 30 30 3C | 
1E04(04B5) 00 00 00 00 | 
1E08(04B6) 00 00 00 FE | 
1E0C(04B7) 00 00 00 00 |   long $00000000,$7c66667c,$3e666666,$3c660606,$7c666666,$3c66067e,$0c0c0c0c,$3c063c66
1E10(04B8) 7C 66 66 7C | 
1E14(04B9) 66 66 66 3E | 
1E18(04BA) 06 06 66 3C | 
1E1C(04BB) 66 66 66 7C | 
1E20(04BC) 7E 06 66 3C | 
1E24(04BD) 0C 0C 0C 0C | 
1E28(04BE) 66 3C 06 3C | 
1E2C(04BF) 66 66 66 66 |   long $66666666,$7e181818,$60606060,$66361e1e,$7e181818,$c6c6d6d6,$66666666,$3c666666
1E30(04C0) 18 18 18 7E | 
1E34(04C1) 60 60 60 60 | 
1E38(04C2) 1E 1E 36 66 | 
1E3C(04C3) 18 18 18 7E | 
1E40(04C4) D6 D6 C6 C6 | 
1E44(04C5) 66 66 66 66 | 
1E48(04C6) 66 66 66 3C | 
1E4C(04C7) 66 66 3E 06 |   long $063e6666,$607c6666,$06060606,$3c66300c,$386c0c0c,$7c666666,$183c3c66,$247e7e66
1E50(04C8) 66 66 7C 60 | 
1E54(04C9) 06 06 06 06 | 
1E58(04CA) 0C 30 66 3C | 
1E5C(04CB) 0C 0C 6C 38 | 
1E60(04CC) 66 66 66 7C | 
1E64(04CD) 66 3C 3C 18 | 
1E68(04CE) 66 7E 7E 24 | 
1E6C(04CF) 3C 3C 66 66 |   long $66663c3c,$607c6666,$7e060c30,$380c0c18,$18181818,$1c303018,$00000000,$aa55aa55
1E70(04D0) 66 66 7C 60 | 
1E74(04D1) 30 0C 06 7E | 
1E78(04D2) 18 0C 0C 38 | 
1E7C(04D3) 18 18 18 18 | 
1E80(04D4) 18 30 30 1C | 
1E84(04D5) 00 00 00 00 | 
1E88(04D6) 55 AA 55 AA | 
1E8C(04D7) 00 82 BA 00 |   long $00ba8200,$00000000,$00002a55,$00000030,$00000018,$00000058,$00000018,$00000000
1E90(04D8) 00 00 00 00 | 
1E94(04D9) 55 2A 00 00 | 
1E98(04DA) 30 00 00 00 | 
1E9C(04DB) 18 00 00 00 | 
1EA0(04DC) 58 00 00 00 | 
1EA4(04DD) 18 00 00 00 | 
1EA8(04DE) 00 00 00 00 | 
1EAC(04DF) 00 00 00 00 |   long $00000000,$00000078,$00000030,$00000000,$18181818,$18181818,$00000000,$18181818
1EB0(04E0) 78 00 00 00 | 
1EB4(04E1) 30 00 00 00 | 
1EB8(04E2) 00 00 00 00 | 
1EBC(04E3) 18 18 18 18 | 
1EC0(04E4) 18 18 18 18 | 
1EC4(04E5) 00 00 00 00 | 
1EC8(04E6) 18 18 18 18 | 
1ECC(04E7) 00 00 00 00 |   long $00000000,$00000000,$00000000,$000000ff,$ffff0000,$18181818,$18181818,$00000000
1ED0(04E8) 00 00 00 00 | 
1ED4(04E9) 00 00 00 00 | 
1ED8(04EA) FF 00 00 00 | 
1EDC(04EB) 00 00 FF FF | 
1EE0(04EC) 18 18 18 18 | 
1EE4(04ED) 18 18 18 18 | 
1EE8(04EE) 00 00 00 00 | 
1EEC(04EF) 18 18 18 18 |   long $18181818,$18181818,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1EF0(04F0) 18 18 18 18 | 
1EF4(04F1) 00 00 00 00 | 
1EF8(04F2) 00 00 00 00 | 
1EFC(04F3) 00 00 00 00 | 
1F00(04F4) 00 00 00 00 | 
1F04(04F5) 00 00 00 00 | 
1F08(04F6) 00 00 00 00 | 
1F0C(04F7) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1F10(04F8) 00 00 00 00 | 
1F14(04F9) 00 00 00 00 | 
1F18(04FA) 00 00 00 00 | 
1F1C(04FB) 00 00 00 00 | 
1F20(04FC) 00 00 00 00 | 
1F24(04FD) 00 00 00 00 | 
1F28(04FE) 00 00 00 00 | 
1F2C(04FF) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$0000000c,$00000000,$00000018,$00000000
1F30(0500) 00 00 00 00 | 
1F34(0501) 00 00 00 00 | 
1F38(0502) 00 00 00 00 | 
1F3C(0503) 0C 00 00 00 | 
1F40(0504) 00 00 00 00 | 
1F44(0505) 18 00 00 00 | 
1F48(0506) 00 00 00 00 | 
1F4C(0507) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1F50(0508) 00 00 00 00 | 
1F54(0509) 00 00 00 00 | 
1F58(050A) 00 00 00 00 | 
1F5C(050B) 00 00 00 00 | 
1F60(050C) 00 00 00 00 | 
1F64(050D) 00 00 00 00 | 
1F68(050E) 00 00 00 00 | 
1F6C(050F) 00 00 00 00 |   long $00000000,$00000000,$00000018,$0000000c,$00000000,$00000000,$00000000,$00000000
1F70(0510) 00 00 00 00 | 
1F74(0511) 18 00 00 00 | 
1F78(0512) 0C 00 00 00 | 
1F7C(0513) 00 00 00 00 | 
1F80(0514) 00 00 00 00 | 
1F84(0515) 00 00 00 00 | 
1F88(0516) 00 00 00 00 | 
1F8C(0517) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1F90(0518) 00 00 00 00 | 
1F94(0519) 00 00 00 00 | 
1F98(051A) 00 00 00 00 | 
1F9C(051B) 00 00 00 00 | 
1FA0(051C) 00 00 00 00 | 
1FA4(051D) 00 00 00 00 | 
1FA8(051E) 00 00 00 00 | 
1FAC(051F) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1FB0(0520) 00 00 00 00 | 
1FB4(0521) 00 00 00 00 | 
1FB8(0522) 00 00 00 00 | 
1FBC(0523) 00 00 00 00 | 
1FC0(0524) 00 00 00 00 | 
1FC4(0525) 00 00 00 00 | 
1FC8(0526) 00 00 00 00 | 
1FCC(0527) 00 00 00 00 |   long $00000000,$00000060,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
1FD0(0528) 60 00 00 00 | 
1FD4(0529) 00 00 00 00 | 
1FD8(052A) 00 00 00 00 | 
1FDC(052B) 00 00 00 00 | 
1FE0(052C) 00 00 00 00 | 
1FE4(052D) 00 00 00 00 | 
1FE8(052E) 00 00 00 00 | 
1FEC(052F) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$000000fe
1FF0(0530) 00 00 00 00 | 
1FF4(0531) 00 00 00 00 | 
1FF8(0532) 00 00 00 00 | 
1FFC(0533) 00 00 00 00 | 
2000(0534) 00 00 00 00 | 
2004(0535) 00 00 00 00 | 
2008(0536) FE 00 00 00 | 
200C(0537) 00 00 00 00 |   long $00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000,$00003c66
2010(0538) 00 00 00 00 | 
2014(0539) 00 00 00 00 | 
2018(053A) 00 00 00 00 | 
201C(053B) 00 00 00 00 | 
2020(053C) 00 00 00 00 | 
2024(053D) 00 00 00 00 | 
2028(053E) 66 3C 00 00 | 
202C(053F) 00 00 00 00 |   long $00000000,$00000000,$00003c66,$00000000,$00000000,$00000000,$00000000,$00000000
2030(0540) 00 00 00 00 | 
2034(0541) 66 3C 00 00 | 
2038(0542) 00 00 00 00 | 
203C(0543) 00 00 00 00 | 
2040(0544) 00 00 00 00 | 
2044(0545) 00 00 00 00 | 
2048(0546) 00 00 00 00 | 
204C(0547) 06 06 00 00 |   long $00000606,$00006060,$00000000,$00000000,$00000000,$00000000,$00000000,$00000000
2050(0548) 60 60 00 00 | 
2054(0549) 00 00 00 00 | 
2058(054A) 00 00 00 00 | 
205C(054B) 00 00 00 00 | 
2060(054C) 00 00 00 00 | 
2064(054D) 00 00 00 00 | 
2068(054E) 00 00 00 00 | 
206C(054F) 00 00 00 00 |   long $00000000,$00003c66,$00000000,$00000000,$00000000,$00000000,$00000000,$aa55aa55
2070(0550) 66 3C 00 00 | 
2074(0551) 00 00 00 00 | 
2078(0552) 00 00 00 00 | 
207C(0553) 00 00 00 00 | 
2080(0554) 00 00 00 00 | 
2084(0555) 00 00 00 00 | 
2088(0556) 55 AA 55 AA | 
208C(0557) 00 00 00 FF |   long $ff000000,$ff000000,$ff002a55,$ff000030,$ff000018,$ff000058,$ff000018,$ff000000
2090(0558) 00 00 00 FF | 
2094(0559) 55 2A 00 FF | 
2098(055A) 30 00 00 FF | 
209C(055B) 18 00 00 FF | 
20A0(055C) 58 00 00 FF | 
20A4(055D) 18 00 00 FF | 
20A8(055E) 00 00 00 FF | 
20AC(055F) 00 00 00 FF |   long $ff000000,$ff000078,$ff000030,$00000000,$24242424,$24242424,$00000000,$24242424
20B0(0560) 78 00 00 FF | 
20B4(0561) 30 00 00 FF | 
20B8(0562) 00 00 00 00 | 
20BC(0563) 24 24 24 24 | 
20C0(0564) 24 24 24 24 | 
20C4(0565) 00 00 00 00 | 
20C8(0566) 24 24 24 24 | 
20CC(0567) 00 00 00 00 |   long $00000000,$00000000,$00000000,$000000ff,$ff00ff00,$24242424,$24242424,$00000000
20D0(0568) 00 00 00 00 | 
20D4(0569) 00 00 00 00 | 
20D8(056A) FF 00 00 00 | 
20DC(056B) 00 FF 00 FF | 
20E0(056C) 24 24 24 24 | 
20E4(056D) 24 24 24 24 | 
20E8(056E) 00 00 00 00 | 
20EC(056F) 24 24 24 24 |   long $24242424,$24242424,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
20F0(0570) 24 24 24 24 | 
20F4(0571) 00 00 00 FF | 
20F8(0572) 00 00 00 FF | 
20FC(0573) 00 00 00 FF | 
2100(0574) 00 00 00 FF | 
2104(0575) 00 00 00 FF | 
2108(0576) 00 00 00 FF | 
210C(0577) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2110(0578) 00 00 00 FF | 
2114(0579) 00 00 00 FF | 
2118(057A) 00 00 00 FF | 
211C(057B) 00 00 00 FF | 
2120(057C) 00 00 00 FF | 
2124(057D) 00 00 00 FF | 
2128(057E) 00 00 00 FF | 
212C(057F) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff00000c,$ff000000,$ff000018,$ff000000
2130(0580) 00 00 00 FF | 
2134(0581) 00 00 00 FF | 
2138(0582) 00 00 00 FF | 
213C(0583) 0C 00 00 FF | 
2140(0584) 00 00 00 FF | 
2144(0585) 18 00 00 FF | 
2148(0586) 00 00 00 FF | 
214C(0587) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2150(0588) 00 00 00 FF | 
2154(0589) 00 00 00 FF | 
2158(058A) 00 00 00 FF | 
215C(058B) 00 00 00 FF | 
2160(058C) 00 00 00 FF | 
2164(058D) 00 00 00 FF | 
2168(058E) 00 00 00 FF | 
216C(058F) 00 00 00 FF |   long $ff000000,$ff000000,$ff000018,$ff00000c,$ff000000,$ff000000,$ff000000,$ff000000
2170(0590) 00 00 00 FF | 
2174(0591) 18 00 00 FF | 
2178(0592) 0C 00 00 FF | 
217C(0593) 00 00 00 FF | 
2180(0594) 00 00 00 FF | 
2184(0595) 00 00 00 FF | 
2188(0596) 00 00 00 FF | 
218C(0597) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2190(0598) 00 00 00 FF | 
2194(0599) 00 00 00 FF | 
2198(059A) 00 00 00 FF | 
219C(059B) 00 00 00 FF | 
21A0(059C) 00 00 00 FF | 
21A4(059D) 00 00 00 FF | 
21A8(059E) 00 00 00 FF | 
21AC(059F) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
21B0(05A0) 00 00 00 FF | 
21B4(05A1) 00 00 00 FF | 
21B8(05A2) 00 00 00 FF | 
21BC(05A3) 00 00 00 FF | 
21C0(05A4) 00 00 00 FF | 
21C4(05A5) 00 00 00 FF | 
21C8(05A6) 00 00 00 FF | 
21CC(05A7) 00 00 00 FF |   long $ff000000,$ff000060,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
21D0(05A8) 60 00 00 FF | 
21D4(05A9) 00 00 00 FF | 
21D8(05AA) 00 00 00 FF | 
21DC(05AB) 00 00 00 FF | 
21E0(05AC) 00 00 00 FF | 
21E4(05AD) 00 00 00 FF | 
21E8(05AE) 00 00 00 FF | 
21EC(05AF) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff0000fe
21F0(05B0) 00 00 00 FF | 
21F4(05B1) 00 00 00 FF | 
21F8(05B2) 00 00 00 FF | 
21FC(05B3) 00 00 00 FF | 
2200(05B4) 00 00 00 FF | 
2204(05B5) 00 00 00 FF | 
2208(05B6) FE 00 00 FF | 
220C(05B7) 00 00 00 FF |   long $ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff003c66
2210(05B8) 00 00 00 FF | 
2214(05B9) 00 00 00 FF | 
2218(05BA) 00 00 00 FF | 
221C(05BB) 00 00 00 FF | 
2220(05BC) 00 00 00 FF | 
2224(05BD) 00 00 00 FF | 
2228(05BE) 66 3C 00 FF | 
222C(05BF) 00 00 00 FF |   long $ff000000,$ff000000,$ff003c66,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2230(05C0) 00 00 00 FF | 
2234(05C1) 66 3C 00 FF | 
2238(05C2) 00 00 00 FF | 
223C(05C3) 00 00 00 FF | 
2240(05C4) 00 00 00 FF | 
2244(05C5) 00 00 00 FF | 
2248(05C6) 00 00 00 FF | 
224C(05C7) 06 06 00 FF |   long $ff000606,$ff006060,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000
2250(05C8) 60 60 00 FF | 
2254(05C9) 00 00 00 FF | 
2258(05CA) 00 00 00 FF | 
225C(05CB) 00 00 00 FF | 
2260(05CC) 00 00 00 FF | 
2264(05CD) 00 00 00 FF | 
2268(05CE) 00 00 00 FF | 
226C(05CF) 00 00 00 FF |   long $ff000000,$ff003c66,$ff000000,$ff000000,$ff000000,$ff000000,$ff000000,$ff55aa55
2270(05D0) 66 3C 00 FF | 
2274(05D1) 00 00 00 FF | 
2278(05D2) 00 00 00 FF | 
227C(05D3) 00 00 00 FF | 
2280(05D4) 00 00 00 FF | 
2284(05D5) 00 00 00 FF | 
2288(05D6) 55 AA 55 FF | 
|===========================================================================|
|===========================================================================|
Spin Block start with 4 Parameters and 2 Extra Stack Longs. Method 1
PUB start(BasePin, ScreenPtr, CursorPtr, SyncPtr) : okay | i, j

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - BasePin
Local Parameter DBASE:0008 - ScreenPtr
Local Parameter DBASE:000C - CursorPtr
Local Parameter DBASE:0010 - SyncPtr
Local Variable  DBASE:0014 - i
Local Variable  DBASE:0018 - j
|===========================================================================|
Addr : 228C:             01  : Drop Anchor   
Addr : 228D:          05 02  : Call Sub 2    
Addr : 228F: 3B 20 00 00 FF  : Constant 4 Bytes - 20 00 00 FF 
Addr : 2294:             64  : Variable Operation Local Offset - 1 Read
Addr : 2295:          38 38  : Constant 1 Bytes - 38 
Addr : 2297:             E8  : Math Op &     
Addr : 2298:          38 06  : Constant 1 Bytes - 06 
Addr : 229A:             E3  : Math Op <<    
Addr : 229B:             EC  : Math Op +     
Addr : 229C:       C5 80 98  : Memory Op Long PBASE + WRITE Address = 0098
Addr : 229F:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 22A1:             64  : Variable Operation Local Offset - 1 Read
Addr : 22A2:          38 18  : Constant 1 Bytes - 18 
Addr : 22A4:             E8  : Math Op &     
Addr : 22A5:             E3  : Math Op <<    
Addr : 22A6:             75  : Variable Operation Local Offset - 5 Write
Addr : 22A7:             64  : Variable Operation Local Offset - 1 Read
Addr : 22A8:          37 04  : Constant Mask Y=4 00000020
Addr : 22AA:             E8  : Math Op &     
Addr : 22AB:             35  : Constant 1 $00000000
Addr : 22AC:             FC  : Math Op ==    
Addr : 22AD:             79  : Variable Operation Local Offset - 6 Write
Addr : 22AE:             74  : Variable Operation Local Offset - 5 Read
Addr : 22AF:             78  : Variable Operation Local Offset - 6 Read
Addr : 22B0:             E8  : Math Op &     
Addr : 22B1:       C5 80 90  : Memory Op Long PBASE + WRITE Address = 0090
Addr : 22B4:             74  : Variable Operation Local Offset - 5 Read
Addr : 22B5:             78  : Variable Operation Local Offset - 6 Read
Addr : 22B6:             E7  : Math Op !     
Addr : 22B7:             E8  : Math Op &     
Addr : 22B8:       C5 80 94  : Memory Op Long PBASE + WRITE Address = 0094
Addr : 22BB:          3F 91  : Register op CNT Read
Addr : 22BD:          37 0F  : Constant Mask Y=15 00010000
Addr : 22BF:             EC  : Math Op +     
Addr : 22C0:       C5 80 9C  : Memory Op Long PBASE + WRITE Address = 009C
Addr : 22C3:       C7 82 10  : Memory Op Long PBASE + ADDRESS Address = 0210
Addr : 22C6:             6B  : Variable Operation Local Offset - 2 Address
Addr : 22C7:          37 00  : Constant Mask Y=0 00000002
Addr : 22C9:             1E  : LongMove(To, From, Count)
Addr : 22CA:       C7 82 CC  : Memory Op Long PBASE + ADDRESS Address = 02CC
Addr : 22CD:       C5 82 18  : Memory Op Long PBASE + WRITE Address = 0218
Addr : 22D0:          38 14  : Constant 1 Bytes - 14 
Addr : 22D2:       85 81 D8  : Memory Op Byte PBASE + WRITE Address = 01D8
Addr : 22D5:          38 11  : Constant 1 Bytes - 11 
Addr : 22D7:       85 80 A8  : Memory Op Byte PBASE + WRITE Address = 00A8
Addr : 22DA:             36  : Constant 2 $00000001
Addr : 22DB:       C5 82 1C  : Memory Op Long PBASE + WRITE Address = 021C
Addr : 22DE:             34  : Constant 0 $FFFFFFFF
Addr : 22DF:          C7 0C  : Memory Op Long PBASE + ADDRESS Address = 000C
Addr : 22E1:             70  : Variable Operation Local Offset - 4 Read
Addr : 22E2:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 22E3:             36  : Constant 2 $00000001
Addr : 22E4:             EC  : Math Op +     
Addr : 22E5:             36  : Constant 2 $00000001
Addr : 22E6:          D9 00  : Memory Op Long VBASE + POP Index WRITE Address = 0000
Addr : 22E8:          37 0C  : Constant Mask Y=12 00002000
Addr : 22EA:          3F 91  : Register op CNT Read
Addr : 22EC:             EC  : Math Op +     
Addr : 22ED:             23  : WaitCnt(count)
Addr : 22EE:          38 14  : Constant 1 Bytes - 14 
Addr : 22F0:          37 01  : Constant Mask Y=1 00000004
Addr : 22F2:             EC  : Math Op +     
Addr : 22F3:       85 81 D8  : Memory Op Byte PBASE + WRITE Address = 01D8
Addr : 22F6:          38 11  : Constant 1 Bytes - 11 
Addr : 22F8:          37 01  : Constant Mask Y=1 00000004
Addr : 22FA:             ED  : Math Op -     
Addr : 22FB:       85 80 A8  : Memory Op Byte PBASE + WRITE Address = 00A8
Addr : 22FE:             35  : Constant 1 $00000000
Addr : 22FF:       C5 82 1C  : Memory Op Long PBASE + WRITE Address = 021C
Addr : 2302:             34  : Constant 0 $FFFFFFFF
Addr : 2303:          C7 0C  : Memory Op Long PBASE + ADDRESS Address = 000C
Addr : 2305:             70  : Variable Operation Local Offset - 4 Read
Addr : 2306:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 2307:             36  : Constant 2 $00000001
Addr : 2308:             EC  : Math Op +     
Addr : 2309:             35  : Constant 1 $00000000
Addr : 230A:          D9 00  : Memory Op Long VBASE + POP Index WRITE Address = 0000
Addr : 230C:             35  : Constant 1 $00000000
Addr : 230D:          D8 00  : Memory Op Long VBASE + POP Index READ Address = 0000
Addr : 230F:             36  : Constant 2 $00000001
Addr : 2310:          D8 00  : Memory Op Long VBASE + POP Index READ Address = 0000
Addr : 2312:             F0  : Math Op AND   
Addr : 2313: JZ Label0008
Addr : 2313:          0A 02  : jz Address = 2317 2
Addr : 2315:             35  : Constant 1 $00000000
Addr : 2316:             33  : Return value  
Addr : 2317: Label0008
Addr : 2317: Label0009
Addr : 2317:             01  : Drop Anchor   
Addr : 2318:          05 02  : Call Sub 2    
Addr : 231A:             32  : Return        
|===========================================================================|
Spin Block stop with 0 Parameters and 1 Extra Stack Longs. Method 2
PUB stop | i

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - i
|===========================================================================|
Addr : 231B:             35  : Constant 1 $00000000
Addr : 231C:             65  : Variable Operation Local Offset - 1 Write
Addr : 231D: Label0008
Addr : 231D:             64  : Variable Operation Local Offset - 1 Read
Addr : 231E:          D8 00  : Memory Op Long VBASE + POP Index READ Address = 0000
Addr : 2320: JZ Label000B
Addr : 2320:          0A 07  : jz Address = 2329 7
Addr : 2322:             64  : Variable Operation Local Offset - 1 Read
Addr : 2323:       DA 00 98  : Memory Op Long VBASE + POP Index ASSIGN Address = 0000 VAR~ Post-clear Push
Addr : 2326:             36  : Constant 2 $00000001
Addr : 2327:             ED  : Math Op -     
Addr : 2328:             21  : CogStop(id)   
Addr : 2329: Label000B
Addr : 2329: Label000C
Addr : 2329: Label0009
Addr : 2329:             35  : Constant 1 $00000000
Addr : 232A:             36  : Constant 2 $00000001
Addr : 232B: Repeat i Step Label0008
Addr : 232B:       66 02 6F  : Variable Operation Local Offset - 1 Assign Repeat-Var loop Address= 231D -17
Addr : 232E: Label000A
Addr : 232E:             32  : Return        
|===========================================================================|
Object E555_SPKEngine
Object Base is 2330
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
Spin Block speakerFrequency with 2 Parameters and 0 Extra Stack Longs. Method 1
PUB speakerFrequency(newFrequency, speakerPinNumber) '' 10 Stack Longs

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - newFrequency
Local Parameter DBASE:0008 - speakerPinNumber
|===========================================================================|
Addr : 2340:             01  : Drop Anchor   
Addr : 2341:             64  : Variable Operation Local Offset - 1 Read
Addr : 2342:             34  : Constant 0 $FFFFFFFF
Addr : 2343:             FB  : Math Op <>    
Addr : 2344:             68  : Variable Operation Local Offset - 2 Read
Addr : 2345:          05 03  : Call Sub 3    
Addr : 2347:             64  : Variable Operation Local Offset - 1 Read
Addr : 2348:             35  : Constant 1 $00000000
Addr : 2349:             C0  : Memory Op Long POP Address READ 
Addr : 234A:             E5  : Math Op <#    
Addr : 234B:             35  : Constant 1 $00000000
Addr : 234C:             E4  : Math Op #>    
Addr : 234D:             65  : Variable Operation Local Offset - 1 Write
Addr : 234E:             36  : Constant 2 $00000001
Addr : 234F:             61  : Variable Operation Local Offset - 0 Write
Addr : 2350:          37 04  : Constant Mask Y=4 00000020
Addr : 2352: TJZ Label0004
Addr : 2352:          08 15  : tjz Address = 2369 21
Addr : 2354: Label0002
Addr : 2354:             36  : Constant 2 $00000001
Addr : 2355:          66 43  : Variable Operation Local Offset - 1 Assign ByteMathop <<
Addr : 2357:             36  : Constant 2 $00000001
Addr : 2358:          62 41  : Variable Operation Local Offset - 0 Assign BitMathop -<
Addr : 235A:             64  : Variable Operation Local Offset - 1 Read
Addr : 235B:             35  : Constant 1 $00000000
Addr : 235C:             C0  : Memory Op Long POP Address READ 
Addr : 235D:             FE  : Math Op =>    
Addr : 235E: JZ Label0005
Addr : 235E:          0A 07  : jz Address = 2367 7
Addr : 2360:             35  : Constant 1 $00000000
Addr : 2361:             C0  : Memory Op Long POP Address READ 
Addr : 2362:          66 4D  : Variable Operation Local Offset - 1 Assign WordMathop -
Addr : 2364:             36  : Constant 2 $00000001
Addr : 2365:          62 4C  : Variable Operation Local Offset - 0 Assign WordMathop +
Addr : 2367: Label0005
Addr : 2367: Label0006
Addr : 2367: Label0003
Addr : 2367: DJNZ Label0002
Addr : 2367:          09 6B  : djnz Address = 2354 -21
Addr : 2369: Label0004
Addr : 2369:          62 98  : Variable Operation Local Offset - 0 Assign VAR~ Post-clear Push
Addr : 236B:          3F BA  : Register op FRQA Write
Addr : 236D:             35  : Constant 1 $00000000
Addr : 236E:          3F BD  : Register op PHSB Write
Addr : 2370:             32  : Return        
|===========================================================================|
Spin Block speakerVolume with 2 Parameters and 0 Extra Stack Longs. Method 2
PUB speakerVolume(newVolume, speakerPinNumber) '' 10 Stack Longs

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - newVolume
Local Parameter DBASE:0008 - speakerPinNumber
|===========================================================================|
Addr : 2371:             01  : Drop Anchor   
Addr : 2372:             64  : Variable Operation Local Offset - 1 Read
Addr : 2373:             34  : Constant 0 $FFFFFFFF
Addr : 2374:             FB  : Math Op <>    
Addr : 2375:             68  : Variable Operation Local Offset - 2 Read
Addr : 2376:          05 03  : Call Sub 3    
Addr : 2378:          38 64  : Constant 1 Bytes - 64 
Addr : 237A:             64  : Variable Operation Local Offset - 1 Read
Addr : 237B:          38 64  : Constant 1 Bytes - 64 
Addr : 237D:             E5  : Math Op <#    
Addr : 237E:             35  : Constant 1 $00000000
Addr : 237F:             E4  : Math Op #>    
Addr : 2380:             ED  : Math Op -     
Addr : 2381: 3B 02 8F 5C 28  : Constant 4 Bytes - 02 8F 5C 28 
Addr : 2386:             F4  : Math Op *     
Addr : 2387:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 2389:             EA  : Math Op |     
Addr : 238A:          3F BB  : Register op FRQB Write
Addr : 238C:             32  : Return        
|===========================================================================|
Spin Block speakerSetup with 2 Parameters and 0 Extra Stack Longs. Method 3
PRI speakerSetup(activeOrInactive, speakerPinNumber) ' 5 Stack Longs

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - activeOrInactive
Local Parameter DBASE:0008 - speakerPinNumber
|===========================================================================|
Addr : 238D:             68  : Variable Operation Local Offset - 2 Read
Addr : 238E:          37 24  : Constant Mask Y=36 Decrement 0000001F
Addr : 2390:             E5  : Math Op <#    
Addr : 2391:             35  : Constant 1 $00000000
Addr : 2392:             E4  : Math Op #>    
Addr : 2393:             69  : Variable Operation Local Offset - 2 Write
Addr : 2394:             64  : Variable Operation Local Offset - 1 Read
Addr : 2395:             68  : Variable Operation Local Offset - 2 Read
Addr : 2396:          3D B6  : Register [Bit] op DIRA Write
Addr : 2398:             35  : Constant 1 $00000000
Addr : 2399:             68  : Variable Operation Local Offset - 2 Read
Addr : 239A:          3D B4  : Register [Bit] op OUTA Write
Addr : 239C:          37 1B  : Constant Mask Y=27 10000000
Addr : 239E:             68  : Variable Operation Local Offset - 2 Read
Addr : 239F:             EC  : Math Op +     
Addr : 23A0:             64  : Variable Operation Local Offset - 1 Read
Addr : 23A1:             E8  : Math Op &     
Addr : 23A2:          3F B8  : Register op CTRA Write
Addr : 23A4: 3B 18 00 00 00  : Constant 4 Bytes - 18 00 00 00 
Addr : 23A9:             68  : Variable Operation Local Offset - 2 Read
Addr : 23AA:             EC  : Math Op +     
Addr : 23AB:             64  : Variable Operation Local Offset - 1 Read
Addr : 23AC:             E8  : Math Op &     
Addr : 23AD:          3F B9  : Register op CTRB Write
Addr : 23AF:             32  : Return        
|===========================================================================|
Object Keyboard
Object Base is 23B0
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
VBASE : 0000 LONG Size 0004 Variable cog
VBASE : 0004 LONG Size 0004 Variable par_tail
VBASE : 0008 LONG Size 0004 Variable par_head
VBASE : 000C LONG Size 0004 Variable par_present
VBASE : 0010 LONG Size 0020 Variable par_states
VBASE : 0030 LONG Size 0020 Variable par_keys
VBASE : 0050 LONG Size 0004 Variable nkey
VBASE : 0054 LONG Size 0004 Variable dkeyhd
VBASE : 0058 LONG Size 0004 Variable dkeytail
VBASE : 005C BYTE Size 0010 Variable dkeys
|===========================================================================|
Object DAT Blocks
|===========================================================================|
23E8(0000)             |                         org
23E8(0000) 3D 09 FC 54 | entry                   movd    :par,#_dpin             'load input parameters _dpin/_cpin/_locks/_auto
23EC(0001) F0 61 BE A0 |                         mov     x,par
23F0(0002) 2C 60 FE 80 |                         add     x,#11*4
23F4(0003) 04 62 FE A0 |                         mov     y,#4
23F8(0004) 30 01 BC 08 | :par                    rdlong  0,x
23FC(0005) D8 08 BC 80 |                         add     :par,dlsb
2400(0006) 04 60 FE 80 |                         add     x,#4
2404(0007) 04 62 FE E4 |                         djnz    y,#:par
2408(0008) 01 58 FE A0 |                         mov     dmask,#1                'set pin masks
240C(0009) 3D 59 BE 2C |                         shl     dmask,_dpin
2410(000A) 01 5A FE A0 |                         mov     cmask,#1
2414(000B) 3E 5B BE 2C |                         shl     cmask,_cpin
2418(000C) 20 7A 7E 61 |                         test    _dpin,#$20      wc      'modify port registers within code
241C(000D) D8 3E BD 70 |                         muxc    _d1,dlsb
2420(000E) D8 52 BD 70 |                         muxc    _d2,dlsb
2424(000F) 01 76 FD 70 |                         muxc    _d3,#1
2428(0010) 01 94 FD 70 |                         muxc    _d4,#1
242C(0011) 20 7C 7E 61 |                         test    _cpin,#$20      wc
2430(0012) D8 38 BD 70 |                         muxc    _c1,dlsb
2434(0013) D8 44 BD 70 |                         muxc    _c2,dlsb
2438(0014) 01 92 FD 70 |                         muxc    _c3,#1
243C(0015) 00 66 FE A0 |                         mov     _head,#0                'reset output parameter _head
2440(0016) 00 EC FF A0 | reset                   mov     dira,#0                 'reset directions
2444(0017) 00 EE FF A0 |                         mov     dirb,#0
2448(0018) 34 35 FC 54 |                         movd    :par,#_present          'reset output parameters _present/_states[8]
244C(0019) 09 60 FE A0 |                         mov     x,#1+8
2450(001A) 00 00 FC A0 | :par                    mov     0,#0
2454(001B) D8 34 BC 80 |                         add     :par,dlsb
2458(001C) 1A 60 FE E4 |                         djnz    x,#:par
245C(001D) 08 5C FE A0 |                         mov     stat,#8                 'set reset flag
2460(001E) 33 45 FC 54 | update                  movd    :par,#_head             'update output parameters _head/_present/_states[8]
2464(001F) F0 61 BE A0 |                         mov     x,par
2468(0020) 04 60 FE 80 |                         add     x,#1*4
246C(0021) 0A 62 FE A0 |                         mov     y,#1+1+8
2470(0022) 30 01 3C 08 | :par                    wrlong  0,x
2474(0023) D8 44 BC 80 |                         add     :par,dlsb
2478(0024) 04 60 FE 80 |                         add     x,#4
247C(0025) 22 62 FE E4 |                         djnz    y,#:par
2480(0026) 08 5C 7E 61 |                         test    stat,#8         wc      'if reset flag, transmit reset command
2484(0027) FF 5E F2 A0 |         if_c            mov     data,#$FF
2488(0028) 9C 68 F1 5C |         if_c            call    #transmit
248C(0029) 00 5C FE A0 | newcode                 mov     stat,#0                 'reset state
2490(002A) B5 88 FD 5C | :same                   call    #receive                'receive byte from keyboard
2494(002B) 84 5E 7E 85 |                         cmp     data,#$83+1     wc      'scancode?
2498(002C) AA 5E 4E 86 |         if_nc           cmp     data,#$AA       wz      'powerup/reset?
249C(002D) 80 00 48 5C |         if_nc_and_z     jmp     #configure
24A0(002E) E0 5E 4E 86 |         if_nc           cmp     data,#$E0       wz      'extended?
24A4(002F) 01 5C CA 68 |         if_nc_and_z     or      stat,#1
24A8(0030) 2A 00 48 5C |         if_nc_and_z     jmp     #:same
24AC(0031) F0 5E 4E 86 |         if_nc           cmp     data,#$F0       wz      'released?
24B0(0032) 02 5C CA 68 |         if_nc_and_z     or      stat,#2
24B4(0033) 2A 00 48 5C |         if_nc_and_z     jmp     #:same
24B8(0034) 29 00 4C 5C |         if_nc           jmp     #newcode                'unknown, ignore
24BC(0035) 01 5C 7E 61 |                         test    stat,#1         wc      'lookup code with extended flag
24C0(0036) 01 5E FE 34 |                         rcl     data,#1
24C4(0037) 94 88 FD 5C |                         call    #look
24C8(0038) 00 5E 7E 86 |                         cmp     data,#0         wz      'if unknown, ignore
24CC(0039) 29 00 68 5C |         if_z            jmp     #newcode
24D0(003A) 3B 65 BE A0 |                         mov     t,_states+6             'remember lock keys in _states
24D4(003B) 2F 61 BE A0 |                         mov     x,data                  'set/clear key bit in _states
24D8(003C) 05 60 FE 28 |                         shr     x,#5
24DC(003D) 35 61 FE 80 |                         add     x,#_states
24E0(003E) 30 85 BC 54 |                         movd    :reg,x
24E4(003F) 01 62 FE A0 |                         mov     y,#1
24E8(0040) 2F 63 BE 2C |                         shl     y,data
24EC(0041) 02 5C 7E 61 |                         test    stat,#2         wc
24F0(0042) 31 01 BC 74 | :reg                    muxnc   0,y
24F4(0043) F0 5E CE E1 |         if_nc           cmpsub  data,#$F0       wc      'if released or shift/ctrl/alt/win, done
24F8(0044) 1E 00 70 5C |         if_c            jmp     #update
24FC(0045) 3C 63 BE A0 |                         mov     y,_states+7             'get shift/ctrl/alt/win bit pairs
2500(0046) 10 62 FE 28 |                         shr     y,#16
2504(0047) E0 5E FE E1 |                         cmpsub  data,#$E0       wc      'translate keypad, considering numlock
2508(0048) 04 7E 72 62 |         if_c            test    _locks,#%100    wz
250C(0049) 08 5F E2 80 |         if_c_and_z      add     data,#@keypad1-@table
2510(004A) 18 5F D2 80 |         if_c_and_nz     add     data,#@keypad2-@table
2514(004B) 94 88 F1 5C |         if_c            call    #look
2518(004C) 6A 00 70 5C |         if_c            jmp     #:flags
251C(004D) DD 5E FE E1 |                         cmpsub  data,#$DD       wc      'handle scrlock/capslock/numlock
2520(004E) 08 60 F2 A0 |         if_c            mov     x,#%001_000
2524(004F) 2F 61 B2 2C |         if_c            shl     x,data
2528(0050) 3F 61 B2 64 |         if_c            andn    x,_locks
252C(0051) 03 60 F2 28 |         if_c            shr     x,#3
2530(0052) 1D 64 F2 28 |         if_c            shr     t,#29                   'ignore auto-repeat
2534(0053) 32 61 B2 66 |         if_c            andn    x,t             wz
2538(0054) 30 7F B2 6C |         if_c            xor     _locks,x
253C(0055) DD 5E F2 80 |         if_c            add     data,#$DD
2540(0056) 04 5C D2 68 |         if_c_and_nz     or      stat,#4                 'if change, set configure flag to update leds
2544(0057) 03 62 7E 62 |                         test    y,#%11          wz      'get shift into nz
2548(0058) 61 5E 56 85 |         if_nz           cmp     data,#$60+1     wc      'check shift1
254C(0059) 5B 5E D2 E1 |         if_nz_and_c     cmpsub  data,#$5B       wc
2550(005A) 28 5F D2 80 |         if_nz_and_c     add     data,#@shift1-@table
2554(005B) 94 88 D1 5C |         if_nz_and_c     call    #look
2558(005C) 03 62 D2 64 |         if_nz_and_c     andn    y,#%11
255C(005D) 3E 5E 56 85 |         if_nz           cmp     data,#$3D+1     wc      'check shift2
2560(005E) 27 5E D2 E1 |         if_nz_and_c     cmpsub  data,#$27       wc
2564(005F) 2E 5F D2 80 |         if_nz_and_c     add     data,#@shift2-@table
2568(0060) 94 88 D1 5C |         if_nz_and_c     call    #look
256C(0061) 03 62 D2 64 |         if_nz_and_c     andn    y,#%11
2570(0062) 02 7E 7E 61 |                         test    _locks,#%010    wc      'check shift-alpha, considering capslock
2574(0063) 20 D0 FC 74 |                         muxnc   :shift,#$20
2578(0064) 40 7E 7E 61 |                         test    _locks,#$40     wc
257C(0065) 20 D0 C4 6C |         if_nz_and_nc    xor     :shift,#$20
2580(0066) 7B 5E 7E 85 |                         cmp     data,#"z"+1     wc
2584(0067) 61 5E F2 E1 |         if_c            cmpsub  data,#"a"       wc
2588(0068) 41 5E F2 80 | :shift  if_c            add     data,#"A"
258C(0069) 03 62 F2 64 |         if_c            andn    y,#%11
2590(006A) 08 5E FE 20 | :flags                  ror     data,#8                 'add shift/ctrl/alt/win flags
2594(006B) 04 60 FE A0 |                         mov     x,#4                    '+$100 if shift
2598(006C) 03 62 7E 62 | :loop                   test    y,#%11          wz      '+$200 if ctrl
259C(006D) 02 62 FE 28 |                         shr     y,#2                    '+$400 if alt
25A0(006E) 01 5E D6 68 |         if_nz           or      data,#1                 '+$800 if win
25A4(006F) 01 5E FE 20 |                         ror     data,#1
25A8(0070) 6C 60 FE E4 |                         djnz    x,#:loop
25AC(0071) 0C 5E FE 24 |                         rol     data,#12
25B0(0072) F0 61 BE 08 |                         rdlong  x,par                   'if room in buffer and key valid, enter
25B4(0073) 01 60 FE 84 |                         sub     x,#1
25B8(0074) 0F 60 FE 60 |                         and     x,#$F
25BC(0075) 33 61 3E 86 |                         cmp     x,_head         wz
25C0(0076) FF 5E 56 62 |         if_nz           test    data,#$FF       wz
25C4(0077) F0 61 96 A0 |         if_nz           mov     x,par
25C8(0078) 2C 60 D6 80 |         if_nz           add     x,#11*4
25CC(0079) 33 61 96 80 |         if_nz           add     x,_head
25D0(007A) 33 61 96 80 |         if_nz           add     x,_head
25D4(007B) 30 5F 16 04 |         if_nz           wrword  data,x
25D8(007C) 01 66 D6 80 |         if_nz           add     _head,#1
25DC(007D) 0F 66 D6 60 |         if_nz           and     _head,#$F
25E0(007E) 04 5C 7E 61 |                         test    stat,#4         wc      'if not configure flag, done
25E4(007F) 1E 00 4C 5C |         if_nc           jmp     #update                 'else configure to update leds
25E8(0080) F3 5E FE A0 | configure               mov     data,#$F3               'set keyboard auto-repeat
25EC(0081) 9C 68 FD 5C |                         call    #transmit
25F0(0082) 40 5F BE A0 |                         mov     data,_auto
25F4(0083) 7F 5E FE 60 |                         and     data,#%11_11111
25F8(0084) 9C 68 FD 5C |                         call    #transmit
25FC(0085) ED 5E FE A0 |                         mov     data,#$ED               'set keyboard lock-leds
2600(0086) 9C 68 FD 5C |                         call    #transmit
2604(0087) 3F 5F BE A0 |                         mov     data,_locks
2608(0088) 1D 5E FE 3C |                         rev     data,#-3 & $1F
260C(0089) 04 5E 7E 61 |                         test    data,#%100      wc
2610(008A) 01 5E FE 34 |                         rcl     data,#1
2614(008B) 07 5E FE 60 |                         and     data,#%111
2618(008C) 9C 68 FD 5C |                         call    #transmit
261C(008D) 3F 61 BE A0 |                         mov     x,_locks                'insert locks into _states
2620(008E) 07 60 FE 60 |                         and     x,#%111
2624(008F) 03 78 FE 2C |                         shl     _states+7,#3
2628(0090) 30 79 BE 68 |                         or      _states+7,x
262C(0091) 03 78 FE 20 |                         ror     _states+7,#3
2630(0092) 01 68 FE A0 |                         mov     _present,#1             'set _present
2634(0093) 1E 00 7C 5C |                         jmp     #update                 'done
2638(0094) 02 5E FE 20 | look                    ror     data,#2                 'perform lookup
263C(0095) 2F 33 BD 50 |                         movs    :reg,data
2640(0096) DA 32 FD 80 |                         add     :reg,#table
2644(0097) 1B 5E FE 28 |                         shr     data,#27
2648(0098) 2F 61 BE A0 |                         mov     x,data
264C(0099) 00 5E BE A0 | :reg                    mov     data,0
2650(009A) 30 5F BE 28 |                         shr     data,x
2654(009B) C3 00 7C 5C |                         jmp     #rand                   'isolate byte
2658(009C)             | transmit
2658(009C) 2D ED BF 68 | _c1                     or      dira,cmask              'pull clock low
265C(009D) 0D A6 FD 50 |                         movs    napshr,#13              'hold clock for ~128us (must be >100us)
2660(009E) D2 AE FD 5C |                         call    #nap
2664(009F) 2C ED BF 68 | _d1                     or      dira,dmask              'pull data low
2668(00A0) 12 A6 FD 50 |                         movs    napshr,#18              'hold data for ~4us
266C(00A1) D2 AE FD 5C |                         call    #nap
2670(00A2) 2D ED BF 6C | _c2                     xor     dira,cmask              'release clock
2674(00A3) FF 5E 7E 61 |                         test    data,#$0FF      wc      'append parity and stop bits to byte
2678(00A4) 00 5F FE 74 |                         muxnc   data,#$100
267C(00A5) D8 5E BE 68 |                         or      data,dlsb
2680(00A6) 0A 60 FE A0 |                         mov     x,#10                   'ready 10 bits
2684(00A7) C5 9A FD 5C | transmit_bit            call    #wait_c0                'wait until clock low
2688(00A8) 01 5E FE 29 |                         shr     data,#1         wc      'output data bit
268C(00A9) 2C ED BF 74 | _d2                     muxnc   dira,dmask
2690(00AA) CF 96 BD A0 |                         mov     wcond,c1                'wait until clock high
2694(00AB) C6 9A FD 5C |                         call    #wait
2698(00AC) A7 60 FE E4 |                         djnz    x,#transmit_bit         'another bit?
269C(00AD) D0 96 BD A0 |                         mov     wcond,c0d0              'wait until clock and data low
26A0(00AE) C6 9A FD 5C |                         call    #wait
26A4(00AF) D1 96 BD A0 |                         mov     wcond,c1d1              'wait until clock and data high
26A8(00B0) C6 9A FD 5C |                         call    #wait
26AC(00B1) B7 88 FD 5C |                         call    #receive_ack            'receive ack byte with timed wait
26B0(00B2) FA 5E 7E 86 |                         cmp     data,#$FA       wz      'if ack error, reset keyboard
26B4(00B3) 16 00 54 5C |         if_nz           jmp     #reset
26B8(00B4) 00 00 7C 5C | transmit_ret            ret
26BC(00B5) 20 7C 7E 61 | receive                 test    _cpin,#$20      wc      'wait indefinitely for initial clock low
26C0(00B6) 2D 5B 3E F4 |                         waitpne cmask,cmask
26C4(00B7)             | receive_ack
26C4(00B7) 0B 60 FE A0 |                         mov     x,#11                   'ready 11 bits
26C8(00B8) C5 9A FD 5C | receive_bit             call    #wait_c0                'wait until clock low
26CC(00B9) 10 A6 FD 50 |                         movs    napshr,#16              'pause ~16us
26D0(00BA) D2 AE FD 5C |                         call    #nap
26D4(00BB) F2 59 3E 61 | _d3                     test    dmask,ina       wc      'input data bit
26D8(00BC) 01 5E FE 30 |                         rcr     data,#1
26DC(00BD) CF 96 BD A0 |                         mov     wcond,c1                'wait until clock high
26E0(00BE) C6 9A FD 5C |                         call    #wait
26E4(00BF) B8 60 FE E4 |                         djnz    x,#receive_bit          'another bit?
26E8(00C0) 16 5E FE 28 |                         shr     data,#22                'align byte
26EC(00C1) FF 5F 7E 61 |                         test    data,#$1FF      wc      'if parity error, reset keyboard
26F0(00C2) 16 00 4C 5C |         if_nc           jmp     #reset
26F4(00C3) FF 5E FE 60 | rand                    and     data,#$FF               'isolate byte
26F8(00C4)             | look_ret
26F8(00C4)             | receive_ack_ret
26F8(00C4) 00 00 7C 5C | receive_ret             ret
26FC(00C5) CE 96 BD A0 | wait_c0                 mov     wcond,c0                '(wait until clock low)
2700(00C6) D9 62 BE A0 | wait                    mov     y,tenms                 'set timeout to 10ms
2704(00C7) 12 A6 FD 50 | wloop                   movs    napshr,#18              'nap ~4us
2708(00C8) D2 AE FD 5C |                         call    #nap
270C(00C9) F2 5B 3E 61 | _c3                     test    cmask,ina       wc      'check required state(s)
2710(00CA) F2 59 3E 62 | _d4                     test    dmask,ina       wz      'loop until got state(s) or timeout
2714(00CB) C7 62 C2 E4 | wcond   if_never        djnz    y,#wloop                '(replaced with c0/c1/c0d0/c1d1)
2718(00CC) 16 62 7E EC |                         tjz     y,#reset                'if timeout, reset keyboard
271C(00CD)             | wait_ret
271C(00CD) 00 00 7C 5C | wait_c0_ret             ret
2720(00CE) C7 62 F2 E4 | c0      if_c            djnz    y,#wloop                '(if_never replacements)
2724(00CF) C7 62 CE E4 | c1      if_nc           djnz    y,#wloop
2728(00D0) C7 62 F6 E4 | c0d0    if_c_or_nz      djnz    y,#wloop
272C(00D1) C7 62 EE E4 | c1d1    if_nc_or_z      djnz    y,#wloop
2730(00D2) 00 64 FE 08 | nap                     rdlong  t,#0                    'get clkfreq
2734(00D3) 00 64 FE 28 | napshr                  shr     t,#18/16/13             'shr scales time
2738(00D4) 03 64 FE 48 |                         min     t,#3                    'ensure waitcnt won't snag
273C(00D5) F1 65 BE 80 |                         add     t,cnt                   'add cnt to time
2740(00D6) 00 64 FE F8 |                         waitcnt t,#0                    'wait until time elapses (nap)
2744(00D7) 00 00 7C 5C | nap_ret                 ret
2748(00D8) 00 02 00 00 | dlsb                    long    1 << 9
274C(00D9) C4 09 00 00 | tenms                   long    10_000 / 4
2750(00DA) 00 00       | table                   word    $0000   '00
2752(00DA) D8 00       |                         word    $00D8   '01             F9
2754(00DB) 00 00       |                         word    $0000   '02
2756(00DB) D4 00       |                         word    $00D4   '03             F5
2758(00DC) D2 00       |                         word    $00D2   '04             F3
275A(00DC) D0 00       |                         word    $00D0   '05             F1
275C(00DD) D1 00       |                         word    $00D1   '06             F2
275E(00DD) DB 00       |                         word    $00DB   '07             F12
2760(00DE) 00 00       |                         word    $0000   '08
2762(00DE) D9 00       |                         word    $00D9   '09             F10
2764(00DF) D7 00       |                         word    $00D7   '0A             F8
2766(00DF) D5 00       |                         word    $00D5   '0B             F6
2768(00E0) D3 00       |                         word    $00D3   '0C             F4
276A(00E0) 09 00       |                         word    $0009   '0D             Tab
276C(00E1) 60 00       |                         word    $0060   '0E             `
276E(00E1) 00 00       |                         word    $0000   '0F
2770(00E2) 00 00       |                         word    $0000   '10
2772(00E2) F4 F5       |                         word    $F5F4   '11     Alt-R   Alt-L
2774(00E3) F0 00       |                         word    $00F0   '12             Shift-L
2776(00E3) 00 00       |                         word    $0000   '13
2778(00E4) F2 F3       |                         word    $F3F2   '14     Ctrl-R  Ctrl-L
277A(00E4) 71 00       |                         word    $0071   '15             q
277C(00E5) 31 00       |                         word    $0031   '16             1
277E(00E5) 00 00       |                         word    $0000   '17
2780(00E6) 00 00       |                         word    $0000   '18
2782(00E6) 00 00       |                         word    $0000   '19
2784(00E7) 7A 00       |                         word    $007A   '1A             z
2786(00E7) 73 00       |                         word    $0073   '1B             s
2788(00E8) 61 00       |                         word    $0061   '1C             a
278A(00E8) 77 00       |                         word    $0077   '1D             w
278C(00E9) 32 00       |                         word    $0032   '1E             2
278E(00E9) 00 F6       |                         word    $F600   '1F     Win-L
2790(00EA) 00 00       |                         word    $0000   '20
2792(00EA) 63 00       |                         word    $0063   '21             c
2794(00EB) 78 00       |                         word    $0078   '22             x
2796(00EB) 64 00       |                         word    $0064   '23             d
2798(00EC) 65 00       |                         word    $0065   '24             e
279A(00EC) 34 00       |                         word    $0034   '25             4
279C(00ED) 33 00       |                         word    $0033   '26             3
279E(00ED) 00 F7       |                         word    $F700   '27     Win-R
27A0(00EE) 00 00       |                         word    $0000   '28
27A2(00EE) 20 00       |                         word    $0020   '29             Space
27A4(00EF) 76 00       |                         word    $0076   '2A             v
27A6(00EF) 66 00       |                         word    $0066   '2B             f
27A8(00F0) 74 00       |                         word    $0074   '2C             t
27AA(00F0) 72 00       |                         word    $0072   '2D             r
27AC(00F1) 35 00       |                         word    $0035   '2E             5
27AE(00F1) 00 CC       |                         word    $CC00   '2F     Apps
27B0(00F2) 00 00       |                         word    $0000   '30
27B2(00F2) 6E 00       |                         word    $006E   '31             n
27B4(00F3) 62 00       |                         word    $0062   '32             b
27B6(00F3) 68 00       |                         word    $0068   '33             h
27B8(00F4) 67 00       |                         word    $0067   '34             g
27BA(00F4) 79 00       |                         word    $0079   '35             y
27BC(00F5) 36 00       |                         word    $0036   '36             6
27BE(00F5) 00 CD       |                         word    $CD00   '37     Power
27C0(00F6) 00 00       |                         word    $0000   '38
27C2(00F6) 00 00       |                         word    $0000   '39
27C4(00F7) 6D 00       |                         word    $006D   '3A             m
27C6(00F7) 6A 00       |                         word    $006A   '3B             j
27C8(00F8) 75 00       |                         word    $0075   '3C             u
27CA(00F8) 37 00       |                         word    $0037   '3D             7
27CC(00F9) 38 00       |                         word    $0038   '3E             8
27CE(00F9) 00 CE       |                         word    $CE00   '3F     Sleep
27D0(00FA) 00 00       |                         word    $0000   '40
27D2(00FA) 2C 00       |                         word    $002C   '41             ,
27D4(00FB) 6B 00       |                         word    $006B   '42             k
27D6(00FB) 69 00       |                         word    $0069   '43             i
27D8(00FC) 6F 00       |                         word    $006F   '44             o
27DA(00FC) 30 00       |                         word    $0030   '45             0
27DC(00FD) 39 00       |                         word    $0039   '46             9
27DE(00FD) 00 00       |                         word    $0000   '47
27E0(00FE) 00 00       |                         word    $0000   '48
27E2(00FE) 2E 00       |                         word    $002E   '49             .
27E4(00FF) 2F EF       |                         word    $EF2F   '4A     (/)     /
27E6(00FF) 6C 00       |                         word    $006C   '4B             l
27E8(0100) 3B 00       |                         word    $003B   '4C             ;
27EA(0100) 70 00       |                         word    $0070   '4D             p
27EC(0101) 2D 00       |                         word    $002D   '4E             -
27EE(0101) 00 00       |                         word    $0000   '4F
27F0(0102) 00 00       |                         word    $0000   '50
27F2(0102) 00 00       |                         word    $0000   '51
27F4(0103) 27 00       |                         word    $0027   '52             '
27F6(0103) 00 00       |                         word    $0000   '53
27F8(0104) 5B 00       |                         word    $005B   '54             [
27FA(0104) 3D 00       |                         word    $003D   '55             =
27FC(0105) 00 00       |                         word    $0000   '56
27FE(0105) 00 00       |                         word    $0000   '57
2800(0106) DE 00       |                         word    $00DE   '58             CapsLock
2802(0106) F1 00       |                         word    $00F1   '59             Shift-R
2804(0107) 0D EB       |                         word    $EB0D   '5A     (Enter) Enter
2806(0107) 5D 00       |                         word    $005D   '5B             ]
2808(0108) 00 00       |                         word    $0000   '5C
280A(0108) 5C 00       |                         word    $005C   '5D             \
280C(0109) 00 CF       |                         word    $CF00   '5E     WakeUp
280E(0109) 00 00       |                         word    $0000   '5F
2810(010A) 00 00       |                         word    $0000   '60
2812(010A) 00 00       |                         word    $0000   '61
2814(010B) 00 00       |                         word    $0000   '62
2816(010B) 00 00       |                         word    $0000   '63
2818(010C) 00 00       |                         word    $0000   '64
281A(010C) 00 00       |                         word    $0000   '65
281C(010D) C8 00       |                         word    $00C8   '66             BackSpace
281E(010D) 00 00       |                         word    $0000   '67
2820(010E) 00 00       |                         word    $0000   '68
2822(010E) E1 C5       |                         word    $C5E1   '69     End     (1)
2824(010F) 00 00       |                         word    $0000   '6A
2826(010F) E4 C0       |                         word    $C0E4   '6B     Left    (4)
2828(0110) E7 C4       |                         word    $C4E7   '6C     Home    (7)
282A(0110) 00 00       |                         word    $0000   '6D
282C(0111) 00 00       |                         word    $0000   '6E
282E(0111) 00 00       |                         word    $0000   '6F
2830(0112) E0 CA       |                         word    $CAE0   '70     Insert  (0)
2832(0112) EA C9       |                         word    $C9EA   '71     Delete  (.)
2834(0113) E2 C3       |                         word    $C3E2   '72     Down    (2)
2836(0113) E5 00       |                         word    $00E5   '73             (5)
2838(0114) E6 C1       |                         word    $C1E6   '74     Right   (6)
283A(0114) E8 C2       |                         word    $C2E8   '75     Up      (8)
283C(0115) CB 00       |                         word    $00CB   '76             Esc
283E(0115) DF 00       |                         word    $00DF   '77             NumLock
2840(0116) DA 00       |                         word    $00DA   '78             F11
2842(0116) EC 00       |                         word    $00EC   '79             (+)
2844(0117) E3 C7       |                         word    $C7E3   '7A     PageDn  (3)
2846(0117) ED 00       |                         word    $00ED   '7B             (-)
2848(0118) EE DC       |                         word    $DCEE   '7C     PrScr   (*)
284A(0118) E9 C6       |                         word    $C6E9   '7D     PageUp  (9)
284C(0119) DD 00       |                         word    $00DD   '7E             ScrLock
284E(0119) 00 00       |                         word    $0000   '7F
2850(011A) 00 00       |                         word    $0000   '80
2852(011A) 00 00       |                         word    $0000   '81
2854(011B) 00 00       |                         word    $0000   '82
2856(011B) D6 00       |                         word    $00D6   '83             F7
2858(011C) CA          | keypad1                 byte    $CA, $C5, $C3, $C7, $C0, 0, $C1, $C4, $C2, $C6, $C9, $0D, "+-*/"
2859(011C) C5          | 
285A(011C) C3          | 
285B(011C) C7          | 
285C(011D) C0          | 
285D(011D) 00          | 
285E(011D) C1          | 
285F(011D) C4          | 
2860(011E) C2          | 
2861(011E) C6          | 
2862(011E) C9          | 
2863(011E) 0D          | 
2864(011F) 2B          | 
2865(011F) 2D          | 
2866(011F) 2A          | 
2867(011F) 2F          | 
2868(0120) 30          | keypad2                 byte    "0123456789.", $0D, "+-*/"
2869(0120) 31          | 
286A(0120) 32          | 
286B(0120) 33          | 
286C(0121) 34          | 
286D(0121) 35          | 
286E(0121) 36          | 
286F(0121) 37          | 
2870(0122) 38          | 
2871(0122) 39          | 
2872(0122) 2E          | 
2873(0122) 0D          | 
2874(0123) 2B          | 
2875(0123) 2D          | 
2876(0123) 2A          | 
2877(0123) 2F          | 
2878(0124) 7B          | shift1                  byte    "{|}", 0, 0, "~"
2879(0124) 7C          | 
287A(0124) 7D          | 
287B(0124) 00          | 
287C(0125) 00          | 
287D(0125) 7E          | 
287E(0125) 22          | shift2                  byte    $22, 0, 0, 0, 0, "<_>?)!@#$%^&*(", 0, ":", 0, "+"
287F(0125) 00          | 
2880(0126) 00          | 
2881(0126) 00          | 
2882(0126) 00          | 
2883(0126) 3C          | 
2884(0127) 5F          | 
2885(0127) 3E          | 
2886(0127) 3F          | 
2887(0127) 29          | 
2888(0128) 21          | 
2889(0128) 40          | 
288A(0128) 23          | 
288B(0128) 24          | 
288C(0129) 25          | 
288D(0129) 5E          | 
288E(0129) 26          | 
288F(0129) 2A          | 
2890(012A) 28          | 
2891(012A) 00          | 
2892(012A) 3A          | 
2893(012A) 00          | 
2894(012B) 2B          | 
2895(012B)             | dmask                   res     1
2898(012D)             | cmask                   res     1
2898(012E)             | stat                    res     1
2898(012F)             | data                    res     1
2898(0130)             | x                       res     1
2898(0131)             | y                       res     1
2898(0132)             | t                       res     1
2898(0133)             | _head                   res     1       'write-only
2898(0134)             | _present                res     1       'write-only
2898(0135)             | _states                 res     8       'write-only
2898(013D)             | _dpin                   res     1       'read-only at start
2898(013E)             | _cpin                   res     1       'read-only at start
2898(013F)             | _locks                  res     1       'read-only at start
2898(0140)             | _auto                   res     1       'read-only at start
|===========================================================================|
|===========================================================================|
Spin Block start with 2 Parameters and 0 Extra Stack Longs. Method 1
PUB start(dpin, cpin) : okay

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - dpin
Local Parameter DBASE:0008 - cpin
|===========================================================================|
Addr : 2898:             00  : Drop Anchor Push 
Addr : 2899:             64  : Variable Operation Local Offset - 1 Read
Addr : 289A:             68  : Variable Operation Local Offset - 2 Read
Addr : 289B:          37 01  : Constant Mask Y=1 00000004
Addr : 289D:          38 28  : Constant 1 Bytes - 28 
Addr : 289F:          05 02  : Call Sub 2    
Addr : 28A1:             61  : Variable Operation Local Offset - 0 Write
Addr : 28A2:             35  : Constant 1 $00000000
Addr : 28A3:       CA 58 80  : Memory Op Long VBASE + ASSIGN Address = 0058 Write Push
Addr : 28A6:       CA 54 80  : Memory Op Long VBASE + ASSIGN Address = 0054 Write Push
Addr : 28A9:          C9 50  : Memory Op Long VBASE + WRITE Address = 0050
Addr : 28AB:             32  : Return        
|===========================================================================|
Spin Block startx with 4 Parameters and 0 Extra Stack Longs. Method 2
PUB startx(dpin, cpin, locks, auto) : okay

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - dpin
Local Parameter DBASE:0008 - cpin
Local Parameter DBASE:000C - locks
Local Parameter DBASE:0010 - auto
|===========================================================================|
Addr : 28AC:             01  : Drop Anchor   
Addr : 28AD:          05 03  : Call Sub 3    
Addr : 28AF:          CB 30  : Memory Op Long VBASE + ADDRESS Address = 0030
Addr : 28B1:             67  : Variable Operation Local Offset - 1 Address
Addr : 28B2:          37 01  : Constant Mask Y=1 00000004
Addr : 28B4:             1E  : LongMove(To, From, Count)
Addr : 28B5:             34  : Constant 0 $FFFFFFFF
Addr : 28B6:          C7 38  : Memory Op Long PBASE + ADDRESS Address = 0038
Addr : 28B8:             47  : Variable Operation Global Offset - 1 Address
Addr : 28B9:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 28BA:             36  : Constant 2 $00000001
Addr : 28BB:             EC  : Math Op +     
Addr : 28BC:          42 80  : Variable Operation Global Offset - 0 Assign Write Push
Addr : 28BE:             61  : Variable Operation Local Offset - 0 Write
Addr : 28BF:             32  : Return        
|===========================================================================|
Spin Block stop with 0 Parameters and 0 Extra Stack Longs. Method 3
PUB stop

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 28C0:             40  : Variable Operation Global Offset - 0 Read
Addr : 28C1: JZ Label0002
Addr : 28C1:          0A 05  : jz Address = 28C8 5
Addr : 28C3:          42 98  : Variable Operation Global Offset - 0 Assign VAR~ Post-clear Push
Addr : 28C5:             36  : Constant 2 $00000001
Addr : 28C6:             ED  : Math Op -     
Addr : 28C7:             21  : CogStop(id)   
Addr : 28C8: Label0002
Addr : 28C8: Label0003
Addr : 28C8:             47  : Variable Operation Global Offset - 1 Address
Addr : 28C9:             35  : Constant 1 $00000000
Addr : 28CA:          38 13  : Constant 1 Bytes - 13 
Addr : 28CC:             1A  : LongFill(Start, Value, Count)
Addr : 28CD:             32  : Return        
|===========================================================================|
Spin Block present with 0 Parameters and 0 Extra Stack Longs. Method 4
PUB present : truefalse

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 28CE:             4C  : Variable Operation Global Offset - 3 Read
Addr : 28CF:             E6  : Math Op -     
Addr : 28D0:             61  : Variable Operation Local Offset - 0 Write
Addr : 28D1:             32  : Return        
|===========================================================================|
Spin Block key with 0 Parameters and 0 Extra Stack Longs. Method 5
PUB key : keycode

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 28D2:             44  : Variable Operation Global Offset - 1 Read
Addr : 28D3:             48  : Variable Operation Global Offset - 2 Read
Addr : 28D4:             FB  : Math Op <>    
Addr : 28D5: JZ Label0002
Addr : 28D5:          0A 0A  : jz Address = 28E1 10
Addr : 28D7:             44  : Variable Operation Global Offset - 1 Read
Addr : 28D8:          B8 30  : Memory Op Word VBASE + POP Index READ Address = 0030
Addr : 28DA:             61  : Variable Operation Local Offset - 0 Write
Addr : 28DB:          46 A6  : Variable Operation Global Offset - 1 Assign ++VAR pre-inc Long Push
Addr : 28DD:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 28DF:             E8  : Math Op &     
Addr : 28E0:             45  : Variable Operation Global Offset - 1 Write
Addr : 28E1: Label0002
Addr : 28E1: Label0003
Addr : 28E1:             32  : Return        
|===========================================================================|
Spin Block getkey with 0 Parameters and 1 Extra Stack Longs. Method 6
PUB getkey : keycode | temp

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - temp
|===========================================================================|
Addr : 28E2:             00  : Drop Anchor Push 
Addr : 28E3:          05 05  : Call Sub 5    
Addr : 28E5:             65  : Variable Operation Local Offset - 1 Write
Addr : 28E6:             64  : Variable Operation Local Offset - 1 Read
Addr : 28E7:             35  : Constant 1 $00000000
Addr : 28E8:             FA  : Math Op >     
Addr : 28E9: JZ Label0002
Addr : 28E9:          0A 04  : jz Address = 28EF 4
Addr : 28EB:             01  : Drop Anchor   
Addr : 28EC:             64  : Variable Operation Local Offset - 1 Read
Addr : 28ED:          05 0D  : Call Sub 13   
Addr : 28EF: Label0002
Addr : 28EF: Label0003
Addr : 28EF:             35  : Constant 1 $00000000
Addr : 28F0:             61  : Variable Operation Local Offset - 0 Write
Addr : 28F1:          C8 50  : Memory Op Long VBASE + READ Address = 0050
Addr : 28F3: JZ Label0004
Addr : 28F3:          0A 14  : jz Address = 2909 20
Addr : 28F5:             36  : Constant 2 $00000001
Addr : 28F6:       CA 50 4D  : Memory Op Long VBASE + ASSIGN Address = 0050 WordMathop -
Addr : 28F9:          C8 58  : Memory Op Long VBASE + READ Address = 0058
Addr : 28FB:          98 5C  : Memory Op Byte VBASE + POP Index READ Address = 005C
Addr : 28FD:             61  : Variable Operation Local Offset - 0 Write
Addr : 28FE:             35  : Constant 1 $00000000
Addr : 28FF:       CA 58 AE  : Memory Op Long VBASE + ASSIGN Address = 0058 VAR++ post inc Long Push
Addr : 2902:          99 5C  : Memory Op Byte VBASE + POP Index WRITE Address = 005C
Addr : 2904:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 2906:       CA 58 48  : Memory Op Long VBASE + ASSIGN Address = 0058 BitMathop &
Addr : 2909: Label0004
Addr : 2909: Label0005
Addr : 2909:             32  : Return        
|===========================================================================|
Spin Block newkey with 0 Parameters and 0 Extra Stack Longs. Method 7
PUB newkey : keycode

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 290A:             48  : Variable Operation Global Offset - 2 Read
Addr : 290B:             45  : Variable Operation Global Offset - 1 Write
Addr : 290C:             00  : Drop Anchor Push 
Addr : 290D:          05 06  : Call Sub 6    
Addr : 290F:             61  : Variable Operation Local Offset - 0 Write
Addr : 2910:             32  : Return        
|===========================================================================|
Spin Block gotkey with 0 Parameters and 1 Extra Stack Longs. Method 8
PUB gotkey : truefalse | temp

Local Parameter DBASE:0000 - Result
Local Variable  DBASE:0004 - temp
|===========================================================================|
Addr : 2911:             00  : Drop Anchor Push 
Addr : 2912:          05 05  : Call Sub 5    
Addr : 2914:             65  : Variable Operation Local Offset - 1 Write
Addr : 2915:             64  : Variable Operation Local Offset - 1 Read
Addr : 2916:             35  : Constant 1 $00000000
Addr : 2917:             FA  : Math Op >     
Addr : 2918: JZ Label0002
Addr : 2918:          0A 04  : jz Address = 291E 4
Addr : 291A:             01  : Drop Anchor   
Addr : 291B:             64  : Variable Operation Local Offset - 1 Read
Addr : 291C:          05 0D  : Call Sub 13   
Addr : 291E: Label0002
Addr : 291E: Label0003
Addr : 291E:          C8 50  : Memory Op Long VBASE + READ Address = 0050
Addr : 2920:             33  : Return value  
Addr : 2921: Data : 32                       2
|===========================================================================|
Spin Block clearkeys with 0 Parameters and 0 Extra Stack Longs. Method 9
PUB clearkeys

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 2922:             48  : Variable Operation Global Offset - 2 Read
Addr : 2923:             45  : Variable Operation Global Offset - 1 Write
Addr : 2924:             32  : Return        
|===========================================================================|
Spin Block keystate with 1 Parameters and 0 Extra Stack Longs. Method 10
PUB keystate(k) : state

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - k
|===========================================================================|
Addr : 2925:             64  : Variable Operation Local Offset - 1 Read
Addr : 2926:          38 05  : Constant 1 Bytes - 05 
Addr : 2928:             E2  : Math Op >>    
Addr : 2929:          D8 10  : Memory Op Long VBASE + POP Index READ Address = 0010
Addr : 292B:             64  : Variable Operation Local Offset - 1 Read
Addr : 292C:             E2  : Math Op >>    
Addr : 292D:             36  : Constant 2 $00000001
Addr : 292E:             E8  : Math Op &     
Addr : 292F:             E6  : Math Op -     
Addr : 2930:             61  : Variable Operation Local Offset - 0 Write
Addr : 2931:             32  : Return        
|===========================================================================|
Spin Block enqueue with 1 Parameters and 0 Extra Stack Longs. Method 11
PRI enqueue(c)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - c
|===========================================================================|
Addr : 2932:          C8 50  : Memory Op Long VBASE + READ Address = 0050
Addr : 2934:          37 03  : Constant Mask Y=3 00000010
Addr : 2936:             FC  : Math Op ==    
Addr : 2937: JZ Label0002
Addr : 2937:          0A 01  : jz Address = 293A 1
Addr : 2939:             32  : Return        
Addr : 293A: Label0002
Addr : 293A: Label0003
Addr : 293A:             64  : Variable Operation Local Offset - 1 Read
Addr : 293B:       CA 54 AE  : Memory Op Long VBASE + ASSIGN Address = 0054 VAR++ post inc Long Push
Addr : 293E:          99 5C  : Memory Op Byte VBASE + POP Index WRITE Address = 005C
Addr : 2940:             36  : Constant 2 $00000001
Addr : 2941:       CA 50 4C  : Memory Op Long VBASE + ASSIGN Address = 0050 WordMathop +
Addr : 2944:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 2946:       CA 54 48  : Memory Op Long VBASE + ASSIGN Address = 0054 BitMathop &
Addr : 2949:             32  : Return        
|===========================================================================|
Spin Block escstr with 1 Parameters and 1 Extra Stack Longs. Method 12
PRI escstr(s) | xx

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - s
Local Variable  DBASE:0008 - xx
|===========================================================================|
Addr : 294A:             01  : Drop Anchor   
Addr : 294B:          38 1B  : Constant 1 Bytes - 1B 
Addr : 294D:          05 0B  : Call Sub 11   
Addr : 294F:             35  : Constant 1 $00000000
Addr : 2950:             69  : Variable Operation Local Offset - 2 Write
Addr : 2951: Label0002
Addr : 2951:             01  : Drop Anchor   
Addr : 2952:             64  : Variable Operation Local Offset - 1 Read
Addr : 2953:             68  : Variable Operation Local Offset - 2 Read
Addr : 2954:             90  : Memory Op Byte POP Address POP Index READ 
Addr : 2955:          05 0B  : Call Sub 11   
Addr : 2957: Label0003
Addr : 2957:             35  : Constant 1 $00000000
Addr : 2958:             64  : Variable Operation Local Offset - 1 Read
Addr : 2959:             16  : StrSize(String)
Addr : 295A:             36  : Constant 2 $00000001
Addr : 295B:             ED  : Math Op -     
Addr : 295C: Repeat xx Step Label0002
Addr : 295C:       6A 02 72  : Variable Operation Local Offset - 2 Assign Repeat-Var loop Address= 2951 -14
Addr : 295F: Label0004
Addr : 295F:             32  : Return        
|===========================================================================|
Spin Block decode_key with 1 Parameters and 1 Extra Stack Longs. Method 13
PRI decode_key(scode)   | s

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - scode
Local Variable  DBASE:0008 - s
|===========================================================================|
Addr : 2960: Constant Address of Label0002
Addr : 2960:       39 06 47  : Constant 2 Bytes - 06 47 
Addr : 2963:             64  : Variable Operation Local Offset - 1 Read
Addr : 2964:          38 C0  : Constant 1 Bytes - C0 
Addr : 2966: Case_Value Label0003
Addr : 2966:       0D 80 5C  : Value Case Address = 29C5 92
Addr : 2969:          38 C1  : Constant 1 Bytes - C1 
Addr : 296B: Case_Value Label0005
Addr : 296B:       0D 80 5C  : Value Case Address = 29CA 92
Addr : 296E:          38 C2  : Constant 1 Bytes - C2 
Addr : 2970: Case_Value Label0007
Addr : 2970:       0D 80 5C  : Value Case Address = 29CF 92
Addr : 2973:          38 C3  : Constant 1 Bytes - C3 
Addr : 2975: Case_Value Label0009
Addr : 2975:       0D 80 5C  : Value Case Address = 29D4 92
Addr : 2978:          38 C4  : Constant 1 Bytes - C4 
Addr : 297A: Case_Value Label000B
Addr : 297A:       0D 80 5C  : Value Case Address = 29D9 92
Addr : 297D:          38 C5  : Constant 1 Bytes - C5 
Addr : 297F: Case_Value Label000D
Addr : 297F:       0D 80 5C  : Value Case Address = 29DE 92
Addr : 2982:          38 C6  : Constant 1 Bytes - C6 
Addr : 2984: Case_Value Label000F
Addr : 2984:       0D 80 5C  : Value Case Address = 29E3 92
Addr : 2987:          38 C7  : Constant 1 Bytes - C7 
Addr : 2989: Case_Value Label0011
Addr : 2989:       0D 80 5C  : Value Case Address = 29E8 92
Addr : 298C:          38 C9  : Constant 1 Bytes - C9 
Addr : 298E: Case_Value Label0013
Addr : 298E:       0D 80 5C  : Value Case Address = 29ED 92
Addr : 2991:          38 CA  : Constant 1 Bytes - CA 
Addr : 2993: Case_Value Label0015
Addr : 2993:       0D 80 5C  : Value Case Address = 29F2 92
Addr : 2996:             64  : Variable Operation Local Offset - 1 Read
Addr : 2997:          38 CB  : Constant 1 Bytes - CB 
Addr : 2999:             FC  : Math Op ==    
Addr : 299A: JZ Label0017
Addr : 299A:          0A 03  : jz Address = 299F 3
Addr : 299C:          38 1B  : Constant 1 Bytes - 1B 
Addr : 299E:             65  : Variable Operation Local Offset - 1 Write
Addr : 299F: Label0017
Addr : 299F: Label0018
Addr : 299F:             64  : Variable Operation Local Offset - 1 Read
Addr : 29A0:          38 C8  : Constant 1 Bytes - C8 
Addr : 29A2:             FC  : Math Op ==    
Addr : 29A3: JZ Label0019
Addr : 29A3:          0A 03  : jz Address = 29A8 3
Addr : 29A5:          37 02  : Constant Mask Y=2 00000008
Addr : 29A7:             65  : Variable Operation Local Offset - 1 Write
Addr : 29A8: Label0019
Addr : 29A8: Label001A
Addr : 29A8:             64  : Variable Operation Local Offset - 1 Read
Addr : 29A9:       39 02 60  : Constant 2 Bytes - 02 60 
Addr : 29AC:             FA  : Math Op >     
Addr : 29AD:             64  : Variable Operation Local Offset - 1 Read
Addr : 29AE:       39 02 7B  : Constant 2 Bytes - 02 7B 
Addr : 29B1:             F9  : Math Op <     
Addr : 29B2:             F0  : Math Op AND   
Addr : 29B3: JZ Label001B
Addr : 29B3:          0A 04  : jz Address = 29B9 4
Addr : 29B5:          37 24  : Constant Mask Y=36 Decrement 0000001F
Addr : 29B7:          66 48  : Variable Operation Local Offset - 1 Assign BitMathop &
Addr : 29B9: Label001B
Addr : 29B9: Label001C
Addr : 29B9:             64  : Variable Operation Local Offset - 1 Read
Addr : 29BA:          37 06  : Constant Mask Y=6 00000080
Addr : 29BC:             F9  : Math Op <     
Addr : 29BD: JZ Label001D
Addr : 29BD:          0A 04  : jz Address = 29C3 4
Addr : 29BF:             01  : Drop Anchor   
Addr : 29C0:             64  : Variable Operation Local Offset - 1 Read
Addr : 29C1:          05 0B  : Call Sub 11   
Addr : 29C3: Label001D
Addr : 29C3: Label001E
Addr : 29C3:             32  : Return        
Addr : 29C4: CaseDone Label0015
Addr : 29C4:             0C  : Casedone      
Addr : 29C5: Label0003
Addr : 29C5: PBASE Constant Address of Label0004
Addr : 29C5:       87 86 4C  : Memory Op Byte PBASE + ADDRESS Address = 064C
Addr : 29C8:             69  : Variable Operation Local Offset - 2 Write
Addr : 29C9: CaseDone Label0003
Addr : 29C9:             0C  : Casedone      
Addr : 29CA: Label0005
Addr : 29CA: PBASE Constant Address of Label0006
Addr : 29CA:       87 86 4F  : Memory Op Byte PBASE + ADDRESS Address = 064F
Addr : 29CD:             69  : Variable Operation Local Offset - 2 Write
Addr : 29CE: CaseDone Label0005
Addr : 29CE:             0C  : Casedone      
Addr : 29CF: Label0007
Addr : 29CF: PBASE Constant Address of Label0008
Addr : 29CF:       87 86 52  : Memory Op Byte PBASE + ADDRESS Address = 0652
Addr : 29D2:             69  : Variable Operation Local Offset - 2 Write
Addr : 29D3: CaseDone Label0007
Addr : 29D3:             0C  : Casedone      
Addr : 29D4: Label0009
Addr : 29D4: PBASE Constant Address of Label000A
Addr : 29D4:       87 86 55  : Memory Op Byte PBASE + ADDRESS Address = 0655
Addr : 29D7:             69  : Variable Operation Local Offset - 2 Write
Addr : 29D8: CaseDone Label0009
Addr : 29D8:             0C  : Casedone      
Addr : 29D9: Label000B
Addr : 29D9: PBASE Constant Address of Label000C
Addr : 29D9:       87 86 58  : Memory Op Byte PBASE + ADDRESS Address = 0658
Addr : 29DC:             69  : Variable Operation Local Offset - 2 Write
Addr : 29DD: CaseDone Label000B
Addr : 29DD:             0C  : Casedone      
Addr : 29DE: Label000D
Addr : 29DE: PBASE Constant Address of Label000E
Addr : 29DE:       87 86 5B  : Memory Op Byte PBASE + ADDRESS Address = 065B
Addr : 29E1:             69  : Variable Operation Local Offset - 2 Write
Addr : 29E2: CaseDone Label000D
Addr : 29E2:             0C  : Casedone      
Addr : 29E3: Label000F
Addr : 29E3: PBASE Constant Address of Label0010
Addr : 29E3:       87 86 5E  : Memory Op Byte PBASE + ADDRESS Address = 065E
Addr : 29E6:             69  : Variable Operation Local Offset - 2 Write
Addr : 29E7: CaseDone Label000F
Addr : 29E7:             0C  : Casedone      
Addr : 29E8: Label0011
Addr : 29E8: PBASE Constant Address of Label0012
Addr : 29E8:       87 86 62  : Memory Op Byte PBASE + ADDRESS Address = 0662
Addr : 29EB:             69  : Variable Operation Local Offset - 2 Write
Addr : 29EC: CaseDone Label0011
Addr : 29EC:             0C  : Casedone      
Addr : 29ED: Label0013
Addr : 29ED: PBASE Constant Address of Label0014
Addr : 29ED:       87 86 66  : Memory Op Byte PBASE + ADDRESS Address = 0666
Addr : 29F0:             69  : Variable Operation Local Offset - 2 Write
Addr : 29F1: CaseDone Label0013
Addr : 29F1:             0C  : Casedone      
Addr : 29F2: Label0015
Addr : 29F2: PBASE Constant Address of Label0016
Addr : 29F2:       87 86 6A  : Memory Op Byte PBASE + ADDRESS Address = 066A
Addr : 29F5:             69  : Variable Operation Local Offset - 2 Write
Addr : 29F6: CaseDone Label0015
Addr : 29F6:             0C  : Casedone      
Addr : 29F7: Label0002
Addr : 29F7:             01  : Drop Anchor   
Addr : 29F8:             68  : Variable Operation Local Offset - 2 Read
Addr : 29F9:          05 0C  : Call Sub 12   
Addr : 29FB:             32  : Return        
Addr : 29FC: Label0004
Addr : 29FC: Data : 5B 44 00                 [D.
Addr : 29FF: Label0006
Addr : 29FF: Data : 5B 43 00                 [C.
Addr : 2A02: Label0008
Addr : 2A02: Data : 5B 41 00                 [A.
Addr : 2A05: Label000A
Addr : 2A05: Data : 5B 42 00                 [B.
Addr : 2A08: Label000C
Addr : 2A08: Data : 4F 48 00                 OH.
Addr : 2A0B: Label000E
Addr : 2A0B: Data : 4F 46 00                 OF.
Addr : 2A0E: Label0010
Addr : 2A0E: Data : 5B 35 7E 00              [5~.
Addr : 2A12: Label0012
Addr : 2A12: Data : 5B 36 7E 00              [6~.
Addr : 2A16: Label0014
Addr : 2A16: Data : 5B 33 7E 00              [3~.
Addr : 2A1A: Label0016
Addr : 2A1A: Data : 5B 32 7E 00              [2~.
|===========================================================================|
Object safe_spi
Object Base is 2A20
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
VBASE Global Variables
|===========================================================================|
|===========================================================================|
Object DAT Blocks
|===========================================================================|
2A60(0000) 00 00 00 00 | SPI_engine_cog          long 0
2A64(0001) 00 00 00 00 | SPI_command             long 0  ' "t", "r", "w", 0 =>done, <0 => error          | unused
2A68(0002) 00 00 00 00 | SPI_block_index         long 0  ' which 512-byte block to read/write            | cnt at init
2A6C(0003) 00 00 00 00 | SPI_buffer_address      long 0  ' where to get/put the data in Hub RAM          | unused
2A70(0004) 00 00 00 00 | SPI_capacity            long 0
2A74(0005) 00          | SPI_csdbuf              byte 0 [16]
2A84(0009)             | ORG 0
2A84(0000)             | SPI_engine_entry
2A84(0000) 2F F1 BF A0 |         mov ctra,writeMode
2A88(0001) 31 F3 BF A0 |         mov ctrb,clockLineMode
2A8C(0002) 2B ED BF A0 |         mov dira,maskAll
2A90(0003) 01 80 FE A4 |         neg user_request,#1
2A94(0004) F0 81 3E 08 |         wrlong user_request,par
2A98(0005) F1 8B BE A0 |         mov last_time,cnt
2A9C(0006)             | waiting_for_command
2A9C(0006) A4 66 FD 5C |         call #handle_time
2AA0(0007) F0 81 BE 08 |         rdlong user_request,par
2AA4(0008) 00 80 7E C3 |         cmps user_request,#0 wz,wc
2AA8(0009) 06 00 78 5C | if_be   jmp #waiting_for_command
2AAC(000A) 72 80 7E 86 |         cmp user_request,#"r" wz
2AB0(000B) 1D 00 68 5C | if_z    jmp #read_ahead
2AB4(000C) 77 80 7E 86 |         cmp user_request,#"w" wz
2AB8(000D) 2D 00 68 5C | if_z    jmp #write_behind
2ABC(000E) 7A 80 7E 86 |         cmp user_request,#"z" wz
2AC0(000F) 16 00 68 5C | if_z    jmp #release_card
2AC4(0010) 74 80 7E 86 |         cmp user_request,#"t" wz    ' time
2AC8(0011) 2E 6F 2A 08 | if_z    wrlong seconds,sdAdr    ' seconds goes into the SD index register
2ACC(0012) 2D 71 2A 08 | if_z    wrlong dtime,bufAdr     ' the remainder goes into the buffer address register
2AD0(0013) 00 80 FE A0 |         mov user_request,#0
2AD4(0014) F0 81 3E 08 |         wrlong user_request,par
2AD8(0015) 06 00 7C 5C |         jmp #waiting_for_command
2ADC(0016)             | release_card
2ADC(0016) 7A 82 FE A0 |         mov user_cmd,#"z"       ' request a release 
2AE0(0017) 01 76 FE A4 |         neg lastIndexPlus,#1    ' reset the last block index 
2AE4(0018) 01 84 FE A4 |         neg user_idx,#1         ' and make this match it 
2AE8(0019) 35 96 FC 5C |         call #handle_command
2AEC(001A) 41 81 BE A0 |         mov user_request,user_cmd
2AF0(001B) F0 81 3E 08 |         wrlong user_request,par
2AF4(001C) 06 00 7C 5C |         jmp #waiting_for_command
2AF8(001D)             | read_ahead
2AF8(001D) 2E 85 BE 08 |         rdlong user_idx,sdAdr
2AFC(001E) 42 7F BE A0 |         mov tmp1,user_idx
2B00(001F) 01 7E FE 80 |         add tmp1,#1
2B04(0020) 3B 7F 3E 86 |         cmp tmp1,lastIndexPlus wz
2B08(0021) 72 78 6A 86 | if_z    cmp lastCommand,#"r" wz
2B0C(0022) 25 00 68 5C | if_z    jmp #:get_on_with_it
2B10(0023) 72 82 FE A0 |         mov user_cmd,#"r"
2B14(0024) 35 96 FC 5C |         call #handle_command
2B18(0025)             | :get_on_with_it
2B18(0025) 10 78 FD 58 |         movi transfer_long,#%000010_000 'set to wrlong
2B1C(0026) B4 8A FD 5C |         call #hub_cog_transfer
2B20(0027) 41 81 BE A0 |         mov user_request,user_cmd
2B24(0028) F0 81 3E 08 |         wrlong user_request,par
2B28(0029) 72 82 FE A0 |         mov user_cmd,#"r"
2B2C(002A) 01 84 FE 80 |         add user_idx,#1
2B30(002B) 35 96 FC 5C |         call #handle_command
2B34(002C) 06 00 7C 5C |         jmp #waiting_for_command
2B38(002D)             | write_behind
2B38(002D) 2E 85 BE 08 |         rdlong user_idx,sdAdr
2B3C(002E) 11 78 FD 58 |         movi transfer_long,#%000010_001 'set to rdlong
2B40(002F) B4 8A FD 5C |         call #hub_cog_transfer
2B44(0030) 41 81 BE A0 |         mov user_request,user_cmd
2B48(0031) F0 81 3E 08 |         wrlong user_request,par
2B4C(0032) 77 82 FE A0 |         mov user_cmd,#"w"
2B50(0033) 35 96 FC 5C |         call #handle_command
2B54(0034) 06 00 7C 5C |         jmp #waiting_for_command
2B58(0035)             | handle_command
2B58(0035) 42 77 3E 86 |         cmp lastIndexPlus,user_idx wz
2B5C(0036) 3C 83 2A 86 | if_z    cmp user_cmd,lastCommand wz
2B60(0037) 42 00 68 5C | if_z    jmp #:execute_block_command
2B64(0038) 77 78 7E 86 |         cmp lastCommand,#"w" wz
2B68(0039) 5A C4 E8 5C | if_z    call #stop_mb_write
2B6C(003A) 72 78 7E 86 |         cmp lastCommand,#"r" wz  
2B70(003B) 53 AC E8 5C | if_z    call #stop_mb_read
2B74(003C) 77 82 7E 86 |         cmp user_cmd,#"w" wz
2B78(003D) 57 B2 E8 5C | if_z    call #start_mb_write
2B7C(003E) 72 82 7E 86 |         cmp user_cmd,#"r" wz
2B80(003F) 50 A4 E8 5C | if_z    call #start_mb_read
2B84(0040) 7A 82 7E 86 |         cmp user_cmd,#"z" wz
2B88(0041) 4C 9E E8 5C | if_z    call #release_DO
2B8C(0042)             | :execute_block_command
2B8C(0042) 42 77 BE A0 |         mov lastIndexPlus,user_idx
2B90(0043) 01 76 FE 80 |         add lastIndexPlus,#1
2B94(0044) 41 79 BE A0 |         mov lastCommand,user_cmd
2B98(0045) 77 82 7E 86 |         cmp user_cmd,#"w" wz
2B9C(0046) F0 48 EA 5C | if_z    call #write_single_block
2BA0(0047) 72 82 7E 86 |         cmp user_cmd,#"r" wz
2BA4(0048) C6 DE E9 5C | if_z    call #read_single_block
2BA8(0049) 7A 82 7E 86 |         cmp user_cmd,#"z" wz
2BAC(004A) 00 82 EA A0 | if_z    mov user_cmd,#0
2BB0(004B)             | handle_command_ret
2BB0(004B) 00 00 7C 5C |         ret   
2BB4(004C)             | release_DO
2BB4(004C) 2A E9 BF 68 |         or outa,maskCS
2BB8(004D) 8D 46 FD 5C |         call #in8
2BBC(004E) 8D 46 FD 5C |         call #in8
2BC0(004F)             | release_DO_ret
2BC0(004F) 00 00 7C 5C |         ret
2BC4(0050)             | start_mb_read  
2BC4(0050) A4 86 FE 58 |         movi block_cmd,#CMD18<<1
2BC8(0051) 63 F6 FC 5C |         call #send_SPI_command_fast       
2BCC(0052)             | start_mb_read_ret
2BCC(0052) 00 00 7C 5C |         ret
2BD0(0053)             | stop_mb_read
2BD0(0053) 98 86 FE 58 |         movi block_cmd,#CMD12<<1
2BD4(0054) 63 F6 FC 5C |         call #send_SPI_command_fast
2BD8(0055) 7C 00 FD 5C |         call #busy_fast
2BDC(0056)             | stop_mb_read_ret
2BDC(0056) 00 00 7C 5C |         ret
2BE0(0057)             | start_mb_write  
2BE0(0057) B2 86 FE 58 |         movi block_cmd,#CMD25<<1
2BE4(0058) 63 F6 FC 5C |         call #send_SPI_command_fast
2BE8(0059)             | start_mb_write_ret
2BE8(0059) 00 00 7C 5C |         ret
2BEC(005A)             | stop_mb_write
2BEC(005A) 7C 00 FD 5C |         call #busy_fast
2BF0(005B) 10 7E FE A0 |         mov tmp1,#16
2BF4(005C)             | :loopity
2BF4(005C) 8D 46 FD 5C |         call #in8         
2BF8(005D) 5C 7E FE E4 |         djnz tmp1,#:loopity
2BFC(005E) FA F9 FF 58 |         movi phsa,#$FD<<1
2C00(005F) 81 18 FD 5C |         call #out8
2C04(0060) 8D 46 FD 5C |         call #in8       ' stuff byte
2C08(0061) 7C 00 FD 5C |         call #busy_fast
2C0C(0062)             | stop_mb_write_ret
2C0C(0062) 00 00 7C 5C |         ret
2C10(0063)             | send_SPI_command_fast
2C10(0063) 2B ED BF A0 |         mov dira,maskAll
2C14(0064) 2A E9 BF 68 |         or outa,maskCS  
2C18(0065) 2A E9 BF 64 |         andn outa,maskCS
2C1C(0066) 8D 46 FD 5C |         call #in8 
2C20(0067) 43 F9 BF A0 |         mov phsa,block_cmd                      ' do which ever block command this is (already in the top 8 bits)
2C24(0068) 81 18 FD 5C |         call #out8                               ' write the byte
2C28(0069) 42 F9 BF A0 |         mov phsa,user_idx                       ' read in the desired block index
2C2C(006A) 2C F9 BF 2C |         shl phsa,adrShift                       ' this will multiply by 512 (bytes/sector) for MMC and SD
2C30(006B) 81 18 FD 5C |         call #out8                               ' move out the 1st MSB                              '
2C34(006C) 01 F8 FF 24 |         rol phsa,#1
2C38(006D) 81 18 FD 5C |         call #out8                               ' move out the 1st MSB                              '
2C3C(006E) 01 F8 FF 24 |         rol phsa,#1
2C40(006F) 81 18 FD 5C |         call #out8                               ' move out the 1st MSB                              '
2C44(0070) 01 F8 FF 24 |         rol phsa,#1
2C48(0071) 81 18 FD 5C |         call #out8                               ' move out the 1st MSB                              '
2C4C(0072) 8D 46 FD 5C |         call #in8                                ' in8 looks like out8 with $FF
2C50(0073) 18 86 FE 28 |         shr block_cmd,#24
2C54(0074) 4C 86 7E 86 |         cmp block_cmd,#CMD12 wz
2C58(0075) 8D 46 E9 5C | if_z    call #in8                               ' 8 clocks
2C5C(0076) 09 7E FE A0 |         mov tmp1,#9
2C60(0077)             | :cmd_response
2C60(0077) 8D 46 FD 5C |         call #in8
2C64(0078) 80 7C 7E 63 |         test readback,#$80 wc,wz
2C68(0079) 77 7E F2 E4 | if_c    djnz tmp1,#:cmd_response
2C6C(007A) 3E 83 96 A4 | if_nz   neg user_cmd,readback
2C70(007B)             | send_SPI_command_fast_ret
2C70(007B) 00 00 7C 5C |         ret    
2C74(007C)             | busy_fast
2C74(007C) 30 7F BE A0 |         mov tmp1,N_in8_500ms
2C78(007D)             | :still_busy
2C78(007D) 8D 46 FD 5C |         call #in8
2C7C(007E) FF 7C 7E 86 |         cmp readback,#$FF wz
2C80(007F) 7D 7E D6 E4 | if_nz   djnz tmp1,#:still_busy
2C84(0080)             | busy_fast_ret
2C84(0080) 00 00 7C 5C |         ret
2C88(0081)             | out8
2C88(0081) 29 E9 BF 64 |         andn outa,maskDI 
2C8C(0082) 00 FA FF A0 |         mov phsb,#0
2C90(0083) 80 F6 FF 58 |         movi frqb,#%01_0000000        
2C94(0084) 01 F8 FF 24 |         rol phsa,#1
2C98(0085) 01 F8 FF 24 |         rol phsa,#1
2C9C(0086) 01 F8 FF 24 |         rol phsa,#1
2CA0(0087) 01 F8 FF 24 |         rol phsa,#1
2CA4(0088) 01 F8 FF 24 |         rol phsa,#1
2CA8(0089) 01 F8 FF 24 |         rol phsa,#1
2CAC(008A) 01 F8 FF 24 |         rol phsa,#1
2CB0(008B) 00 F6 FF A0 |         mov frqb,#0
2CB4(008C)             | out8_ret
2CB4(008C) 00 00 7C 5C |         ret
2CB8(008D)             | in8
2CB8(008D) 01 F8 FF A4 |         neg phsa,#1' DI high
2CBC(008E) 00 7C FE A0 |         mov readback,#0
2CC0(008F) C0 FA FF 58 |         movi phsb,#%011_000000
2CC4(0090) 40 F6 FF 58 |         movi frqb,#%001_000000
2CC8(0091) F2 51 3E 61 |         test maskDO,ina wc
2CCC(0092) 01 7C FE 34 |         rcl readback,#1
2CD0(0093) F2 51 3E 61 |         test maskDO,ina wc
2CD4(0094) 01 7C FE 34 |         rcl readback,#1
2CD8(0095) F2 51 3E 61 |         test maskDO,ina wc
2CDC(0096) 01 7C FE 34 |         rcl readback,#1
2CE0(0097) F2 51 3E 61 |         test maskDO,ina wc
2CE4(0098) 01 7C FE 34 |         rcl readback,#1
2CE8(0099) F2 51 3E 61 |         test maskDO,ina wc
2CEC(009A) 01 7C FE 34 |         rcl readback,#1
2CF0(009B) F2 51 3E 61 |         test maskDO,ina wc
2CF4(009C) 01 7C FE 34 |         rcl readback,#1
2CF8(009D) F2 51 3E 61 |         test maskDO,ina wc
2CFC(009E) 01 7C FE 34 |         rcl readback,#1
2D00(009F) F2 51 3E 61 |         test maskDO,ina wc
2D04(00A0) 00 F6 FF A0 |         mov frqb,#0 ' stop the clock
2D08(00A1) 01 7C FE 34 |         rcl readback,#1
2D0C(00A2) 00 F8 FF A0 |         mov phsa,#0 'DI low
2D10(00A3)             | in8_ret
2D10(00A3) 00 00 7C 5C |         ret
2D14(00A4)             | handle_time        
2D14(00A4) F1 7F BE A0 |         mov tmp1,cnt            ' get the current timestamp
2D18(00A5) 3F 73 BE 80 |         add idle_time,tmp1      ' add the current time to my idle time counter
2D1C(00A6) 45 73 BE 84 |         sub idle_time,last_time ' subtract the last time from my idle counter (hence delta)    
2D20(00A7) 3F 71 BE 80 |         add dtime,tmp1          ' add to my accumulator, 
2D24(00A8) 45 71 BE 84 |         sub dtime,last_time     ' and subtract the old (adding delta)
2D28(00A9) 3F 8B BE A0 |         mov last_time,tmp1      ' update my "last timestamp"        
2D2C(00AA) 00 7E FE 08 |         rdlong tmp1,#0          ' what is the clock frequency?
2D30(00AB) 3F 71 BE E1 |         cmpsub dtime,tmp1 wc    ' if I have more than a second in my accumulator
2D34(00AC) 00 6E FE C8 |         addx seconds,#0         ' then add it to "seconds"
2D38(00AD) 3A 73 3E 87 |         cmp idle_time,idle_limit wz,wc
2D3C(00AE) B3 00 70 5C | if_b    jmp #handle_time_ret    ' don't clear if we haven't hit the limit
2D40(00AF) 7A 82 FE A0 |         mov user_cmd,#"z"       ' we can't overdo it, the command handler makes sure
2D44(00B0) 01 76 FE A4 |         neg lastIndexPlus,#1    ' reset the last block index 
2D48(00B1) 01 84 FE A4 |         neg user_idx,#1         ' and make this match it 
2D4C(00B2) 35 96 FC 5C |         call #handle_command    ' release the card, but don't mess with the user's request register
2D50(00B3)             | handle_time_ret
2D50(00B3) 00 00 7C 5C |         ret
2D54(00B4)             | hub_cog_transfer
2D54(00B4) 32 F3 BF A0 |         mov ctrb,clockXferMode
2D58(00B5) 01 F6 FF A0 |         mov frqb,#1 
2D5C(00B6) 2D 89 BE 08 |         rdlong buf_ptr,bufAdr
2D60(00B7) 04 7A FE A0 |         mov ops_left,#4
2D64(00B8) 46 79 FD 54 |         movd transfer_long,#speed_buf
2D68(00B9)             | four_transfer_passes
2D68(00B9) 3F 7F BE 08 |         rdlong tmp1,tmp1
2D6C(00BA) 20 7E FE A0 |         mov tmp1,#(512 / 4 / 4)
2D70(00BB) 44 FB BF A0 |         mov phsb,buf_ptr
2D74(00BC)             | transfer_long
2D74(00BC) FD 01 BC 08 |         rdlong 0-0,phsb
2D78(00BD) 35 79 BD 80 |         add transfer_long,incDest4
2D7C(00BE) BC 7E FE E4 |         djnz tmp1,#transfer_long
2D80(00BF) 36 79 BD 84 |         sub transfer_long,decDestNminus1
2D84(00C0) 04 88 FE 80 |         add buf_ptr,#4
2D88(00C1) B9 7A FE E4 |         djnz ops_left,#four_transfer_passes
2D8C(00C2) 00 F6 FF A0 |         mov frqb,#0
2D90(00C3) 00 FA FF A0 |         mov phsb,#0
2D94(00C4) 31 F3 BF A0 |         mov ctrb,clockLineMode
2D98(00C5)             | hub_cog_transfer_ret
2D98(00C5) 00 00 7C 5C |         ret
2D9C(00C6)             | read_single_block
2D9C(00C6) 46 CD FD 54 |         movd :store_read_long,#speed_buf
2DA0(00C7) 80 7A FE A0 |         mov ops_left,#128
2DA4(00C8) 30 7F BE A0 |         mov tmp1,N_in8_500ms
2DA8(00C9)             | :get_resp
2DA8(00C9) 8D 46 FD 5C |         call #in8
2DAC(00CA) FE 7C 7E 86 |         cmp readback,#$FE wz        
2DB0(00CB) C9 7E D6 E4 | if_nz   djnz tmp1,#:get_resp
2DB4(00CC) 64 82 D6 A4 | if_nz   neg user_cmd,#ERR_ASM_NO_READ_TOKEN  
2DB8(00CD) EF 00 54 5C | if_nz   jmp #read_single_block_ret
2DBC(00CE) 01 F8 FF A4 |         neg phsa,#1
2DC0(00CF) 80 7A FE A0 |         mov ops_left,#128
2DC4(00D0)             | :read_loop        
2DC4(00D0) 04 7E FE A0 |         mov tmp1,#4
2DC8(00D1) C0 FA FF 58 |         movi phsb,#%011_000000
2DCC(00D2)             | :in_byte        
2DCC(00D2) 40 F6 FF 58 |         movi frqb,#%001_000000
2DD0(00D3) F2 51 3E 61 |         test maskDO,ina wc
2DD4(00D4) 08 7C FE 34 |         rcl readback,#8
2DD8(00D5) F2 51 3E 61 |         test maskDO,ina wc
2DDC(00D6) 02 7C FE 70 |         muxc readback,#2
2DE0(00D7) F2 51 3E 61 |         test maskDO,ina wc
2DE4(00D8) 04 7C FE 70 |         muxc readback,#4
2DE8(00D9) F2 51 3E 61 |         test maskDO,ina wc
2DEC(00DA) 08 7C FE 70 |         muxc readback,#8
2DF0(00DB) F2 51 3E 61 |         test maskDO,ina wc
2DF4(00DC) 10 7C FE 70 |         muxc readback,#16
2DF8(00DD) F2 51 3E 61 |         test maskDO,ina wc
2DFC(00DE) 20 7C FE 70 |         muxc readback,#32
2E00(00DF) F2 51 3E 61 |         test maskDO,ina wc
2E04(00E0) 40 7C FE 70 |         muxc readback,#64
2E08(00E1) F2 51 3E 61 |         test maskDO,ina wc
2E0C(00E2) 00 F6 FF A0 |         mov frqb,#0 ' stop the clock
2E10(00E3) 80 7C FE 70 |         muxc readback,#128
2E14(00E4) D2 7E FE E4 |         djnz tmp1,#:in_byte
2E18(00E5) 00 7C FE 3C |         rev readback,#0
2E1C(00E6)             | :store_read_long
2E1C(00E6) 3E 01 BC A0 |         mov 0-0,readback       ' due to some counter weirdness, we need this mov
2E20(00E7) 33 CD BD 80 |         add :store_read_long,const512
2E24(00E8) D0 7A FE E4 |         djnz ops_left,#:read_loop
2E28(00E9) 00 F8 FF A0 |         mov phsa,#0
2E2C(00EA) 8D 46 FD 5C |         call #in8      ' out8 is 2x faster than in8
2E30(00EB) 8D 46 FD 5C |         call #in8      ' and I'm not using the CRC anyway
2E34(00EC) 8D 46 FD 5C |         call #in8       ' in8 looks like out8($FF)
2E38(00ED) 00 72 FE A0 |         mov idle_time,#0
2E3C(00EE) 00 82 FE A0 |         mov user_cmd,#0               
2E40(00EF)             | read_single_block_ret
2E40(00EF) 00 00 7C 5C |         ret          
2E44(00F0)             | write_single_block               
2E44(00F0) 46 ED FD 50 |         movs :write_loop,#speed_buf
2E48(00F1) 80 7A FE A0 |         mov ops_left,#128        
2E4C(00F2) 7C 00 FD 5C |         call #busy_fast 
2E50(00F3) F8 F9 FF 58 |         movi phsa,#$FC<<1
2E54(00F4) 81 18 FD 5C |         call #out8
2E58(00F5) 00 FA FF A0 |         mov phsb,#0             ' make sure my clock accumulator is right
2E5C(00F6)             | :write_loop
2E5C(00F6) 46 F9 BF A0 |         mov phsa,speed_buf
2E60(00F7) 01 EC FD 80 |         add :write_loop,#1
2E64(00F8) 18 F8 FF 24 |         rol phsa,#24            ' move A7 into position, so I can do the swizzled version
2E68(00F9) 80 F6 FF 58 |         movi frqb,#%010000000   ' start the clock (remember A7 is already in place)
2E6C(00FA) 01 F8 FF 24 |         rol phsa,#1             ' A7 is going out, at the end of this instr, A6 is in place
2E70(00FB) 01 F8 FF 24 |         rol phsa,#1             ' A5
2E74(00FC) 01 F8 FF 24 |         rol phsa,#1             ' A4
2E78(00FD) 01 F8 FF 24 |         rol phsa,#1             ' A3
2E7C(00FE) 01 F8 FF 24 |         rol phsa,#1             ' A2
2E80(00FF) 01 F8 FF 24 |         rol phsa,#1             ' A1
2E84(0100) 01 F8 FF 24 |         rol phsa,#1             ' A0
2E88(0101) 11 F8 FF 24 |         rol phsa,#17            ' B7
2E8C(0102) 01 F8 FF 24 |         rol phsa,#1             ' B6
2E90(0103) 01 F8 FF 24 |         rol phsa,#1             ' B5
2E94(0104) 01 F8 FF 24 |         rol phsa,#1             ' B4
2E98(0105) 01 F8 FF 24 |         rol phsa,#1             ' B3
2E9C(0106) 01 F8 FF 24 |         rol phsa,#1             ' B2
2EA0(0107) 01 F8 FF 24 |         rol phsa,#1             ' B1
2EA4(0108) 01 F8 FF 24 |         rol phsa,#1             ' B0
2EA8(0109) 11 F8 FF 24 |         rol phsa,#17            ' C7
2EAC(010A) 01 F8 FF 24 |         rol phsa,#1             ' C6
2EB0(010B) 01 F8 FF 24 |         rol phsa,#1             ' C5
2EB4(010C) 01 F8 FF 24 |         rol phsa,#1             ' C4
2EB8(010D) 01 F8 FF 24 |         rol phsa,#1             ' C3
2EBC(010E) 01 F8 FF 24 |         rol phsa,#1             ' C2
2EC0(010F) 01 F8 FF 24 |         rol phsa,#1             ' C1
2EC4(0110) 01 F8 FF 24 |         rol phsa,#1             ' C0
2EC8(0111) 11 F8 FF 24 |         rol phsa,#17            ' D7
2ECC(0112) 01 F8 FF 24 |         rol phsa,#1             ' D6
2ED0(0113) 01 F8 FF 24 |         rol phsa,#1             ' D5
2ED4(0114) 01 F8 FF 24 |         rol phsa,#1             ' D4
2ED8(0115) 01 F8 FF 24 |         rol phsa,#1             ' D3
2EDC(0116) 01 F8 FF 24 |         rol phsa,#1             ' D2
2EE0(0117) 01 F8 FF 24 |         rol phsa,#1             ' D1
2EE4(0118) 01 F8 FF 24 |         rol phsa,#1             ' D0 will be in place _after_ this instruction
2EE8(0119) 00 F6 FF A0 |         mov frqb,#0             ' shuts the clock off, _after_ this instruction
2EEC(011A) F6 7A FE E4 |         djnz ops_left,#:write_loop
2EF0(011B) 8D 46 FD 5C |         call #in8
2EF4(011C) 8D 46 FD 5C |         call #in8
2EF8(011D) 8D 46 FD 5C |         call #in8
2EFC(011E) 1F 7C FE 60 |         and readback,#$1F
2F00(011F) 05 7C 7E 86 |         cmp readback,#5 wz
2F04(0120) 00 82 EA A0 | if_z    mov user_cmd,#0 ' great
2F08(0121) 65 82 D6 A4 | if_nz   neg user_cmd,#ERR_ASM_BLOCK_NOT_WRITTEN ' oops
2F0C(0122) 8D 46 FD 5C |         call #in8 
2F10(0123) 00 72 FE A0 |         mov idle_time,#0
2F14(0124)             | write_single_block_ret
2F14(0124) 00 00 7C 5C |         ret
2F18(0125) 00 00 00 00 | pinDO         long 0    ' pin is controlled by a counter
2F1C(0126) 00 00 00 00 | pinCLK        long 0    ' pin is controlled by a counter
2F20(0127) 00 00 00 00 | pinDI         long 0    ' pin is controlled by a counter
2F24(0128) 00 00 00 00 | maskDO        long 0    ' mask for reading the DO line from the card
2F28(0129) 00 00 00 00 | maskDI        long 0    ' mask for setting the pin high while reading  
2F2C(012A) 00 00 00 00 | maskCS        long 0    ' mask = (1<<pin), and is controlled directly
2F30(012B) 00 00 00 00 | maskAll       long 0
2F34(012C) 09 00 00 00 | adrShift      long 9    ' will be 0 for SDHC, 9 for MMC & SD
2F38(012D) 00 00 00 00 | bufAdr        long 0    ' where in Hub RAM is the buffer to copy to/from?
2F3C(012E) 00 00 00 00 | sdAdr         long 0    ' where on the SD card does it read/write?
2F40(012F) 00 00 00 00 | writeMode     long 0    ' the counter setup in NCO single ended, clocking data out on pinDI
2F44(0130) 40 42 0F 00 | N_in8_500ms   long 1_000_000 ' used for timeout checking in PASM
2F48(0131) 00 00 00 00 | clockLineMode long 0
2F4C(0132) 00 00 00 7C | clockXferMode long %11111 << 26
2F50(0133) 00 02 00 00 | const512      long 512
2F54(0134) 00 04 00 00 | const1024     long 1024
2F58(0135) 00 08 00 00 | incDest4      long 4 << 9
2F5C(0136) 00 FE 00 00 | decDestNminus1 long (512 / 4 - 1) << 9         
2F60(0137) 00 00 00 00 | seconds       long 0
2F64(0138) 00 00 00 00 | dtime         long 0
2F68(0139) 00 00 00 00 | idle_time     long 0
2F6C(013A) 00 00 00 00 | idle_limit    long 0
2F70(013B) FF FF FF FF | lastIndexPlus long -1   ' state handler will check against lastIndexPlus, which will not have been -1
2F74(013C) 00 00 00 00 | lastCommand   long 0    ' this will never be the last command.
2F78(013D)             | ops_left      res 1     ' used as a counter for bytes, words, longs, whatever (start w/ # byte clocks out)
2F78(013E)             | readback      res 1     ' all reading from the card goes through here
2F78(013F)             | tmp1          res 1     ' this may get used in all subroutines...don't use except in lowest 
2F78(0140)             | user_request  res 1     ' the main command variable, read in from Hub: "r"-read single, "w"-write single
2F78(0141)             | user_cmd      res 1     ' used internally to handle actual commands to be executed
2F78(0142)             | user_idx      res 1     ' the pointer to the Hub RAM where the data block is/goes
2F78(0143)             | block_cmd     res 1     ' one of the SD/MMC command codes, no app-specific allowed
2F78(0144)             | buf_ptr       res 1     ' moving pointer to the Hub RAM buffer
2F78(0145)             | last_time     res 1     ' tracking the timestamp
2F78(0146)             | speed_buf     res 128   ' 512 bytes to be used for read-ahead / write-behind
2F78(01C6)             | FIT 496
2F78(01C6)             | There are 42 ($02A) Longs left in the cog
|===========================================================================|
|===========================================================================|
Spin Block start with 1 Parameters and 0 Extra Stack Longs. Method 1
PUB start( basepin )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - basepin
|===========================================================================|
Addr : 2F78:             00  : Drop Anchor Push 
Addr : 2F79:             64  : Variable Operation Local Offset - 1 Read
Addr : 2F7A:             64  : Variable Operation Local Offset - 1 Read
Addr : 2F7B:             36  : Constant 2 $00000001
Addr : 2F7C:             EC  : Math Op +     
Addr : 2F7D:             64  : Variable Operation Local Offset - 1 Read
Addr : 2F7E:          37 00  : Constant Mask Y=0 00000002
Addr : 2F80:             EC  : Math Op +     
Addr : 2F81:             64  : Variable Operation Local Offset - 1 Read
Addr : 2F82:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 2F84:             EC  : Math Op +     
Addr : 2F85:          05 08  : Call Sub 8    
Addr : 2F87:             33  : Return value  
Addr : 2F88: Data : 32                       2
|===========================================================================|
Spin Block readblock with 2 Parameters and 0 Extra Stack Longs. Method 2
PUB readblock( block_index, buffer_address )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - block_index
Local Parameter DBASE:0008 - buffer_address
|===========================================================================|
Addr : 2F89:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 2F8B:             35  : Constant 1 $00000000
Addr : 2F8C:             FC  : Math Op ==    
Addr : 2F8D: JZ Label0002
Addr : 2F8D:          0A 05  : jz Address = 2F94 5
Addr : 2F8F:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 2F92:             E7  : Math Op !     
Addr : 2F93:             31  : Abort value   
Addr : 2F94: Label0002
Addr : 2F94: Label0003
Addr : 2F94:             68  : Variable Operation Local Offset - 2 Read
Addr : 2F95:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 2F97:             E8  : Math Op &     
Addr : 2F98: JZ Label0004
Addr : 2F98:          0A 03  : jz Address = 2F9D 3
Addr : 2F9A:          37 61  : Constant Mask Y=97 Decrement Invert FFFFFFFC
Addr : 2F9C:             31  : Abort value   
Addr : 2F9D: Label0004
Addr : 2F9D: Label0005
Addr : 2F9D:             64  : Variable Operation Local Offset - 1 Read
Addr : 2F9E:          C5 48  : Memory Op Long PBASE + WRITE Address = 0048
Addr : 2FA0:             68  : Variable Operation Local Offset - 2 Read
Addr : 2FA1:          C5 4C  : Memory Op Long PBASE + WRITE Address = 004C
Addr : 2FA3:          38 72  : Constant 1 Bytes - 72 
Addr : 2FA5:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 2FA7: Label0006
Addr : 2FA7:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 2FA9:          38 72  : Constant 1 Bytes - 72 
Addr : 2FAB:             FC  : Math Op ==    
Addr : 2FAC: JZ Label0008
Addr : 2FAC:          0A 02  : jz Address = 2FB0 2
Addr : 2FAE: Label0007
Addr : 2FAE: JMP Label0006
Addr : 2FAE:          04 77  : Jmp 2FA7 -9   
Addr : 2FB0: Label0008
Addr : 2FB0:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 2FB2:             35  : Constant 1 $00000000
Addr : 2FB3:             F9  : Math Op <     
Addr : 2FB4: JZ Label0009
Addr : 2FB4:          0A 03  : jz Address = 2FB9 3
Addr : 2FB6:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 2FB8:             31  : Abort value   
Addr : 2FB9: Label0009
Addr : 2FB9: Label000A
Addr : 2FB9:             32  : Return        
|===========================================================================|
Spin Block writeblock with 2 Parameters and 0 Extra Stack Longs. Method 3
PUB writeblock( block_index, buffer_address )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - block_index
Local Parameter DBASE:0008 - buffer_address
|===========================================================================|
Addr : 2FBA:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 2FBC:             35  : Constant 1 $00000000
Addr : 2FBD:             FC  : Math Op ==    
Addr : 2FBE: JZ Label0002
Addr : 2FBE:          0A 05  : jz Address = 2FC5 5
Addr : 2FC0:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 2FC3:             E7  : Math Op !     
Addr : 2FC4:             31  : Abort value   
Addr : 2FC5: Label0002
Addr : 2FC5: Label0003
Addr : 2FC5:             68  : Variable Operation Local Offset - 2 Read
Addr : 2FC6:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 2FC8:             E8  : Math Op &     
Addr : 2FC9: JZ Label0004
Addr : 2FC9:          0A 03  : jz Address = 2FCE 3
Addr : 2FCB:          37 61  : Constant Mask Y=97 Decrement Invert FFFFFFFC
Addr : 2FCD:             31  : Abort value   
Addr : 2FCE: Label0004
Addr : 2FCE: Label0005
Addr : 2FCE:             64  : Variable Operation Local Offset - 1 Read
Addr : 2FCF:          C5 48  : Memory Op Long PBASE + WRITE Address = 0048
Addr : 2FD1:             68  : Variable Operation Local Offset - 2 Read
Addr : 2FD2:          C5 4C  : Memory Op Long PBASE + WRITE Address = 004C
Addr : 2FD4:          38 77  : Constant 1 Bytes - 77 
Addr : 2FD6:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 2FD8: Label0006
Addr : 2FD8:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 2FDA:          38 77  : Constant 1 Bytes - 77 
Addr : 2FDC:             FC  : Math Op ==    
Addr : 2FDD: JZ Label0008
Addr : 2FDD:          0A 02  : jz Address = 2FE1 2
Addr : 2FDF: Label0007
Addr : 2FDF: JMP Label0006
Addr : 2FDF:          04 77  : Jmp 2FD8 -9   
Addr : 2FE1: Label0008
Addr : 2FE1:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 2FE3:             35  : Constant 1 $00000000
Addr : 2FE4:             F9  : Math Op <     
Addr : 2FE5: JZ Label0009
Addr : 2FE5:          0A 03  : jz Address = 2FEA 3
Addr : 2FE7:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 2FE9:             31  : Abort value   
Addr : 2FEA: Label0009
Addr : 2FEA: Label000A
Addr : 2FEA:             32  : Return        
|===========================================================================|
Spin Block getcapacity with 0 Parameters and 0 Extra Stack Longs. Method 4
PUB getcapacity

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 2FEB:          C4 50  : Memory Op Long PBASE + READ Address = 0050
Addr : 2FED:             61  : Variable Operation Local Offset - 0 Write
Addr : 2FEE:             32  : Return        
|===========================================================================|
Spin Block getcsd with 1 Parameters and 0 Extra Stack Longs. Method 5
PUB getcsd( buffer_address )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - buffer_address
|===========================================================================|
Addr : 2FEF:             64  : Variable Operation Local Offset - 1 Read
Addr : 2FF0:          87 54  : Memory Op Byte PBASE + ADDRESS Address = 0054
Addr : 2FF2:          37 03  : Constant Mask Y=3 00000010
Addr : 2FF4:             1C  : ByteMove(To, From, Count)
Addr : 2FF5:             32  : Return        
|===========================================================================|
Spin Block get_seconds with 0 Parameters and 0 Extra Stack Longs. Method 6
PUB get_seconds

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 2FF6:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 2FF8:             35  : Constant 1 $00000000
Addr : 2FF9:             FC  : Math Op ==    
Addr : 2FFA: JZ Label0002
Addr : 2FFA:          0A 05  : jz Address = 3001 5
Addr : 2FFC:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 2FFF:             E7  : Math Op !     
Addr : 3000:             31  : Abort value   
Addr : 3001: Label0002
Addr : 3001: Label0003
Addr : 3001:          38 74  : Constant 1 Bytes - 74 
Addr : 3003:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 3005: Label0004
Addr : 3005:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 3007:          38 74  : Constant 1 Bytes - 74 
Addr : 3009:             FC  : Math Op ==    
Addr : 300A: JZ Label0006
Addr : 300A:          0A 02  : jz Address = 300E 2
Addr : 300C: Label0005
Addr : 300C: JMP Label0004
Addr : 300C:          04 77  : Jmp 3005 -9   
Addr : 300E: Label0006
Addr : 300E:          C4 48  : Memory Op Long PBASE + READ Address = 0048
Addr : 3010:             33  : Return value  
Addr : 3011: Data : 32                       2
|===========================================================================|
Spin Block get_milliseconds with 0 Parameters and 0 Extra Stack Longs. Method 7
PUB get_milliseconds : ms

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3012:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 3014:             35  : Constant 1 $00000000
Addr : 3015:             FC  : Math Op ==    
Addr : 3016: JZ Label0002
Addr : 3016:          0A 05  : jz Address = 301D 5
Addr : 3018:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 301B:             E7  : Math Op !     
Addr : 301C:             31  : Abort value   
Addr : 301D: Label0002
Addr : 301D: Label0003
Addr : 301D:          38 74  : Constant 1 Bytes - 74 
Addr : 301F:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 3021: Label0004
Addr : 3021:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 3023:          38 74  : Constant 1 Bytes - 74 
Addr : 3025:             FC  : Math Op ==    
Addr : 3026: JZ Label0006
Addr : 3026:          0A 02  : jz Address = 302A 2
Addr : 3028: Label0005
Addr : 3028: JMP Label0004
Addr : 3028:          04 77  : Jmp 3021 -9   
Addr : 302A: Label0006
Addr : 302A:          C4 48  : Memory Op Long PBASE + READ Address = 0048
Addr : 302C:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 302F:             F4  : Math Op *     
Addr : 3030:             61  : Variable Operation Local Offset - 0 Write
Addr : 3031:          C4 4C  : Memory Op Long PBASE + READ Address = 004C
Addr : 3033:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 3036:             F4  : Math Op *     
Addr : 3037:             35  : Constant 1 $00000000
Addr : 3038:             C0  : Memory Op Long POP Address READ 
Addr : 3039:             F6  : Math Op /     
Addr : 303A:          62 4C  : Variable Operation Local Offset - 0 Assign WordMathop +
Addr : 303C:             32  : Return        
|===========================================================================|
Spin Block start_explicit with 4 Parameters and 2 Extra Stack Longs. Method 8
PUB start_explicit( DO, CLK, DI, CS ) : card_type | tmp, i

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - DO
Local Parameter DBASE:0008 - CLK
Local Parameter DBASE:000C - DI
Local Parameter DBASE:0010 - CS
Local Variable  DBASE:0014 - tmp
Local Variable  DBASE:0018 - i
|===========================================================================|
Addr : 303D:             01  : Drop Anchor   
Addr : 303E:          05 0A  : Call Sub 10   
Addr : 3040:             35  : Constant 1 $00000000
Addr : 3041:          C5 50  : Memory Op Long PBASE + WRITE Address = 0050
Addr : 3043:       39 01 F4  : Constant 2 Bytes - 01 F4 
Addr : 3046:             35  : Constant 1 $00000000
Addr : 3047:             C0  : Memory Op Long POP Address READ 
Addr : 3048:          37 02  : Constant Mask Y=2 00000008
Addr : 304A:             E2  : Math Op >>    
Addr : 304B:             EC  : Math Op +     
Addr : 304C:          3F 91  : Register op CNT Read
Addr : 304E:             EC  : Math Op +     
Addr : 304F:             23  : WaitCnt(count)
Addr : 3050:             64  : Variable Operation Local Offset - 1 Read
Addr : 3051:       C5 84 F8  : Memory Op Long PBASE + WRITE Address = 04F8
Addr : 3054:             64  : Variable Operation Local Offset - 1 Read
Addr : 3055:             F3  : Math Op |<    
Addr : 3056:       C5 85 04  : Memory Op Long PBASE + WRITE Address = 0504
Addr : 3059:             68  : Variable Operation Local Offset - 2 Read
Addr : 305A:       C5 84 FC  : Memory Op Long PBASE + WRITE Address = 04FC
Addr : 305D:             6C  : Variable Operation Local Offset - 3 Read
Addr : 305E:       C5 85 00  : Memory Op Long PBASE + WRITE Address = 0500
Addr : 3061:             6C  : Variable Operation Local Offset - 3 Read
Addr : 3062:             F3  : Math Op |<    
Addr : 3063:       C5 85 08  : Memory Op Long PBASE + WRITE Address = 0508
Addr : 3066:             70  : Variable Operation Local Offset - 4 Read
Addr : 3067:             F3  : Math Op |<    
Addr : 3068:       C5 85 0C  : Memory Op Long PBASE + WRITE Address = 050C
Addr : 306B:          38 09  : Constant 1 Bytes - 09 
Addr : 306D:       C5 85 14  : Memory Op Long PBASE + WRITE Address = 0514
Addr : 3070:       C4 85 0C  : Memory Op Long PBASE + READ Address = 050C
Addr : 3073:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 3076:             F3  : Math Op |<    
Addr : 3077:             EA  : Math Op |     
Addr : 3078:       C4 85 08  : Memory Op Long PBASE + READ Address = 0508
Addr : 307B:             EA  : Math Op |     
Addr : 307C:       C5 85 10  : Memory Op Long PBASE + WRITE Address = 0510
Addr : 307F:       C4 85 10  : Memory Op Long PBASE + READ Address = 0510
Addr : 3082:       3F D6 4A  : Register op DIRA ByteMathop |
Addr : 3085:       C4 85 10  : Memory Op Long PBASE + READ Address = 0510
Addr : 3088:       3F D4 4A  : Register op OUTA ByteMathop |
Addr : 308B:          37 0B  : Constant Mask Y=11 00001000
Addr : 308D: TJZ Label0004
Addr : 308D:          08 0A  : tjz Address = 3099 10
Addr : 308F: Label0002
Addr : 308F:             68  : Variable Operation Local Offset - 2 Read
Addr : 3090:       3D D4 1C  : Register [Bit] op OUTA VAR~~ Post-set
Addr : 3093:             68  : Variable Operation Local Offset - 2 Read
Addr : 3094:       3D D4 18  : Register [Bit] op OUTA VAR~ Post-clear
Addr : 3097: Label0003
Addr : 3097: DJNZ Label0002
Addr : 3097:          09 76  : djnz Address = 308F -10
Addr : 3099: Label0004
Addr : 3099:          3F 91  : Register op CNT Read
Addr : 309B:          C5 48  : Memory Op Long PBASE + WRITE Address = 0048
Addr : 309D:          76 18  : Variable Operation Local Offset - 5 Assign VAR~ Post-clear
Addr : 309F:             35  : Constant 1 $00000000
Addr : 30A0:             79  : Variable Operation Local Offset - 6 Write
Addr : 30A1: Label0005
Addr : 30A1:             74  : Variable Operation Local Offset - 5 Read
Addr : 30A2:             36  : Constant 2 $00000001
Addr : 30A3:             FB  : Math Op <>    
Addr : 30A4: JZ Label0008
Addr : 30A4:          0A 3B  : jz Address = 30E1 59
Addr : 30A6:             00  : Drop Anchor Push 
Addr : 30A7:          37 05  : Constant Mask Y=5 00000040
Addr : 30A9:             35  : Constant 1 $00000000
Addr : 30AA:          38 95  : Constant 1 Bytes - 95 
Addr : 30AC:          05 0C  : Call Sub 12   
Addr : 30AE:             75  : Variable Operation Local Offset - 5 Write
Addr : 30AF:             74  : Variable Operation Local Offset - 5 Read
Addr : 30B0:          37 01  : Constant Mask Y=1 00000004
Addr : 30B2:             E8  : Math Op &     
Addr : 30B3: JZ Label000A
Addr : 30B3:          0A 2C  : jz Address = 30E1 44
Addr : 30B5:             78  : Variable Operation Local Offset - 6 Read
Addr : 30B6:             36  : Constant 2 $00000001
Addr : 30B7:             E8  : Math Op &     
Addr : 30B8: JZ Label000C
Addr : 30B8:          0A 1F  : jz Address = 30D9 31
Addr : 30BA:          37 01  : Constant Mask Y=1 00000004
Addr : 30BC: TJZ Label0010
Addr : 30BC:          08 05  : tjz Address = 30C3 5
Addr : 30BE: Label000E
Addr : 30BE:             01  : Drop Anchor   
Addr : 30BF:          05 0E  : Call Sub 14   
Addr : 30C1: Label000F
Addr : 30C1: DJNZ Label000E
Addr : 30C1:          09 7B  : djnz Address = 30BE -5
Addr : 30C3: Label0010
Addr : 30C3:             01  : Drop Anchor   
Addr : 30C4:          38 FD  : Constant 1 Bytes - FD 
Addr : 30C6:          37 02  : Constant Mask Y=2 00000008
Addr : 30C8:          05 0D  : Call Sub 13   
Addr : 30CA:             01  : Drop Anchor   
Addr : 30CB:          05 0E  : Call Sub 14   
Addr : 30CD: Label0011
Addr : 30CD:             00  : Drop Anchor Push 
Addr : 30CE:          05 0F  : Call Sub 15   
Addr : 30D0:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 30D2:             FB  : Math Op <>    
Addr : 30D3: JZ Label0013
Addr : 30D3:          0A 02  : jz Address = 30D7 2
Addr : 30D5: Label0012
Addr : 30D5: JMP Label0011
Addr : 30D5:          04 76  : Jmp 30CD -10  
Addr : 30D7: Label0013
Addr : 30D7: JMP Label000D
Addr : 30D7:          04 08  : Jmp 30E1 8    
Addr : 30D9: Label000C
Addr : 30D9:             01  : Drop Anchor   
Addr : 30DA:          38 4C  : Constant 1 Bytes - 4C 
Addr : 30DC:             35  : Constant 1 $00000000
Addr : 30DD:          38 61  : Constant 1 Bytes - 61 
Addr : 30DF:          05 0C  : Call Sub 12   
Addr : 30E1: Label0014
Addr : 30E1: Label000D
Addr : 30E1: Label000A
Addr : 30E1: Label000B
Addr : 30E1: Label0008
Addr : 30E1: Label0009
Addr : 30E1: Label0006
Addr : 30E1:             35  : Constant 1 $00000000
Addr : 30E2:          38 09  : Constant 1 Bytes - 09 
Addr : 30E4: Repeat i Step Label0005
Addr : 30E4:    7A 02 FF B9  : Variable Operation Local Offset - 6 Assign Repeat-Var loop Address= 30A1 -71
Addr : 30E8: Label0007
Addr : 30E8:             74  : Variable Operation Local Offset - 5 Read
Addr : 30E9:             36  : Constant 2 $00000001
Addr : 30EA:             FB  : Math Op <>    
Addr : 30EB: JZ Label0015
Addr : 30EB:          0A 04  : jz Address = 30F1 4
Addr : 30ED:             01  : Drop Anchor   
Addr : 30EE:             34  : Constant 0 $FFFFFFFF
Addr : 30EF:          05 0B  : Call Sub 11   
Addr : 30F1: Label0015
Addr : 30F1: Label0016
Addr : 30F1:             00  : Drop Anchor Push 
Addr : 30F2:          38 48  : Constant 1 Bytes - 48 
Addr : 30F4:       39 01 AA  : Constant 2 Bytes - 01 AA 
Addr : 30F7:          38 87  : Constant 1 Bytes - 87 
Addr : 30F9:          05 0C  : Call Sub 12   
Addr : 30FB:             36  : Constant 2 $00000001
Addr : 30FC:             FC  : Math Op ==    
Addr : 30FD: JZ Label0017
Addr : 30FD:       0A 80 4B  : jz Address = 314B 75
Addr : 3100:             00  : Drop Anchor Push 
Addr : 3101:          05 0E  : Call Sub 14   
Addr : 3103:             75  : Variable Operation Local Offset - 5 Write
Addr : 3104:             74  : Variable Operation Local Offset - 5 Read
Addr : 3105:          37 28  : Constant Mask Y=40 Decrement 000001FF
Addr : 3107:             E8  : Math Op &     
Addr : 3108:       39 01 AA  : Constant 2 Bytes - 01 AA 
Addr : 310B:             FB  : Math Op <>    
Addr : 310C: JZ Label0019
Addr : 310C:          0A 05  : jz Address = 3113 5
Addr : 310E:             01  : Drop Anchor   
Addr : 310F:          37 60  : Constant Mask Y=96 Decrement Invert FFFFFFFE
Addr : 3111:          05 0B  : Call Sub 11   
Addr : 3113: Label0019
Addr : 3113: Label001A
Addr : 3113: Label001B
Addr : 3113:             00  : Drop Anchor Push 
Addr : 3114:          38 E9  : Constant 1 Bytes - E9 
Addr : 3116:          38 1E  : Constant 1 Bytes - 1E 
Addr : 3118:             F3  : Math Op |<    
Addr : 3119:          38 77  : Constant 1 Bytes - 77 
Addr : 311B:          05 0C  : Call Sub 12   
Addr : 311D: JZ Label001D
Addr : 311D:          0A 02  : jz Address = 3121 2
Addr : 311F: Label001C
Addr : 311F: JMP Label001B
Addr : 311F:          04 72  : Jmp 3113 -14  
Addr : 3121: Label001D
Addr : 3121:             00  : Drop Anchor Push 
Addr : 3122:          38 7A  : Constant 1 Bytes - 7A 
Addr : 3124:             35  : Constant 1 $00000000
Addr : 3125:          38 FD  : Constant 1 Bytes - FD 
Addr : 3127:          05 0C  : Call Sub 12   
Addr : 3129:             35  : Constant 1 $00000000
Addr : 312A:             FB  : Math Op <>    
Addr : 312B: JZ Label001E
Addr : 312B:          0A 05  : jz Address = 3132 5
Addr : 312D:             01  : Drop Anchor   
Addr : 312E:          37 40  : Constant Mask Y=64 Invert FFFFFFFD
Addr : 3130:          05 0B  : Call Sub 11   
Addr : 3132: Label001E
Addr : 3132: Label001F
Addr : 3132:             00  : Drop Anchor Push 
Addr : 3133:          05 0E  : Call Sub 14   
Addr : 3135:             75  : Variable Operation Local Offset - 5 Write
Addr : 3136:             74  : Variable Operation Local Offset - 5 Read
Addr : 3137:          38 1E  : Constant 1 Bytes - 1E 
Addr : 3139:             F3  : Math Op |<    
Addr : 313A:             E8  : Math Op &     
Addr : 313B: JZ Label0020
Addr : 313B:          0A 09  : jz Address = 3146 9
Addr : 313D:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 313F:             61  : Variable Operation Local Offset - 0 Write
Addr : 3140:             35  : Constant 1 $00000000
Addr : 3141:       C5 85 14  : Memory Op Long PBASE + WRITE Address = 0514
Addr : 3144: JMP Label0021
Addr : 3144:          04 03  : Jmp 3149 3    
Addr : 3146: Label0020
Addr : 3146:          37 00  : Constant Mask Y=0 00000002
Addr : 3148:             61  : Variable Operation Local Offset - 0 Write
Addr : 3149: Label0022
Addr : 3149: Label0021
Addr : 3149: JMP Label0018
Addr : 3149:          04 35  : Jmp 3180 53   
Addr : 314B: Label0017
Addr : 314B:             00  : Drop Anchor Push 
Addr : 314C:          38 E9  : Constant 1 Bytes - E9 
Addr : 314E:             35  : Constant 1 $00000000
Addr : 314F:          38 E5  : Constant 1 Bytes - E5 
Addr : 3151:          05 0C  : Call Sub 12   
Addr : 3153:          37 00  : Constant Mask Y=0 00000002
Addr : 3155:             F9  : Math Op <     
Addr : 3156: JZ Label0024
Addr : 3156:          0A 11  : jz Address = 3169 17
Addr : 3158:          37 00  : Constant Mask Y=0 00000002
Addr : 315A:             61  : Variable Operation Local Offset - 0 Write
Addr : 315B: Label0026
Addr : 315B:             00  : Drop Anchor Push 
Addr : 315C:          38 E9  : Constant 1 Bytes - E9 
Addr : 315E:             35  : Constant 1 $00000000
Addr : 315F:          38 E5  : Constant 1 Bytes - E5 
Addr : 3161:          05 0C  : Call Sub 12   
Addr : 3163: JZ Label0028
Addr : 3163:          0A 02  : jz Address = 3167 2
Addr : 3165: Label0027
Addr : 3165: JMP Label0026
Addr : 3165:          04 74  : Jmp 315B -12  
Addr : 3167: Label0028
Addr : 3167: JMP Label0025
Addr : 3167:          04 0E  : Jmp 3177 14   
Addr : 3169: Label0024
Addr : 3169:             36  : Constant 2 $00000001
Addr : 316A:             61  : Variable Operation Local Offset - 0 Write
Addr : 316B: Label002A
Addr : 316B:             00  : Drop Anchor Push 
Addr : 316C:          38 41  : Constant 1 Bytes - 41 
Addr : 316E:             35  : Constant 1 $00000000
Addr : 316F:          38 F9  : Constant 1 Bytes - F9 
Addr : 3171:          05 0C  : Call Sub 12   
Addr : 3173: JZ Label002C
Addr : 3173:          0A 02  : jz Address = 3177 2
Addr : 3175: Label002B
Addr : 3175: JMP Label002A
Addr : 3175:          04 74  : Jmp 316B -12  
Addr : 3177: Label002C
Addr : 3177: Label0029
Addr : 3177: Label0025
Addr : 3177:             01  : Drop Anchor   
Addr : 3178:          38 50  : Constant 1 Bytes - 50 
Addr : 317A:          37 08  : Constant Mask Y=8 00000200
Addr : 317C:          38 15  : Constant 1 Bytes - 15 
Addr : 317E:          05 0C  : Call Sub 12   
Addr : 3180: Label0023
Addr : 3180: Label0018
Addr : 3180:             00  : Drop Anchor Push 
Addr : 3181:          38 7B  : Constant 1 Bytes - 7B 
Addr : 3183:             35  : Constant 1 $00000000
Addr : 3184:          38 91  : Constant 1 Bytes - 91 
Addr : 3186:          05 0C  : Call Sub 12   
Addr : 3188:             35  : Constant 1 $00000000
Addr : 3189:             FB  : Math Op <>    
Addr : 318A: JZ Label002D
Addr : 318A:          0A 05  : jz Address = 3191 5
Addr : 318C:             01  : Drop Anchor   
Addr : 318D:          37 41  : Constant Mask Y=65 Invert FFFFFFFB
Addr : 318F:          05 0B  : Call Sub 11   
Addr : 3191: Label002D
Addr : 3191: Label002E
Addr : 3191:             00  : Drop Anchor Push 
Addr : 3192:          38 4D  : Constant 1 Bytes - 4D 
Addr : 3194:             35  : Constant 1 $00000000
Addr : 3195:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 3197:          05 0C  : Call Sub 12   
Addr : 3199:             35  : Constant 1 $00000000
Addr : 319A:             FB  : Math Op <>    
Addr : 319B: JZ Label002F
Addr : 319B:          0A 06  : jz Address = 31A3 6
Addr : 319D:             01  : Drop Anchor   
Addr : 319E:          38 05  : Constant 1 Bytes - 05 
Addr : 31A0:             E7  : Math Op !     
Addr : 31A1:          05 0B  : Call Sub 11   
Addr : 31A3: Label002F
Addr : 31A3: Label0030
Addr : 31A3:             01  : Drop Anchor   
Addr : 31A4:          05 0F  : Call Sub 15   
Addr : 31A6:             00  : Drop Anchor Push 
Addr : 31A7:          38 49  : Constant 1 Bytes - 49 
Addr : 31A9:             35  : Constant 1 $00000000
Addr : 31AA:          37 27  : Constant Mask Y=39 Decrement 000000FF
Addr : 31AC:          05 0C  : Call Sub 12   
Addr : 31AE:             35  : Constant 1 $00000000
Addr : 31AF:             FB  : Math Op <>    
Addr : 31B0: JZ Label0031
Addr : 31B0:          0A 06  : jz Address = 31B8 6
Addr : 31B2:             01  : Drop Anchor   
Addr : 31B3:          38 06  : Constant 1 Bytes - 06 
Addr : 31B5:             E7  : Math Op !     
Addr : 31B6:          05 0B  : Call Sub 11   
Addr : 31B8: Label0031
Addr : 31B8: Label0032
Addr : 31B8:          37 04  : Constant Mask Y=4 00000020
Addr : 31BA:             79  : Variable Operation Local Offset - 6 Write
Addr : 31BB: Label0033
Addr : 31BB:             00  : Drop Anchor Push 
Addr : 31BC:          05 0F  : Call Sub 15   
Addr : 31BE:          38 FE  : Constant 1 Bytes - FE 
Addr : 31C0:             FB  : Math Op <>    
Addr : 31C1: JZ Label0035
Addr : 31C1:          0A 0D  : jz Address = 31D0 13
Addr : 31C3:             78  : Variable Operation Local Offset - 6 Read
Addr : 31C4:             35  : Constant 1 $00000000
Addr : 31C5:             FC  : Math Op ==    
Addr : 31C6: JZ Label0036
Addr : 31C6:          0A 06  : jz Address = 31CE 6
Addr : 31C8:             01  : Drop Anchor   
Addr : 31C9:          38 06  : Constant 1 Bytes - 06 
Addr : 31CB:             E7  : Math Op !     
Addr : 31CC:          05 0B  : Call Sub 11   
Addr : 31CE: Label0036
Addr : 31CE: Label0037
Addr : 31CE: Label0034
Addr : 31CE: JMP Label0033
Addr : 31CE:          04 6B  : Jmp 31BB -21  
Addr : 31D0: Label0035
Addr : 31D0:             35  : Constant 1 $00000000
Addr : 31D1:             79  : Variable Operation Local Offset - 6 Write
Addr : 31D2: Label0038
Addr : 31D2:             00  : Drop Anchor Push 
Addr : 31D3:          05 0F  : Call Sub 15   
Addr : 31D5:             78  : Variable Operation Local Offset - 6 Read
Addr : 31D6:          95 54  : Memory Op Byte PBASE + POP Index WRITE Address = 0054
Addr : 31D8: Label0039
Addr : 31D8:             35  : Constant 1 $00000000
Addr : 31D9:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 31DB: Repeat i Step Label0038
Addr : 31DB:       7A 02 74  : Variable Operation Local Offset - 6 Assign Repeat-Var loop Address= 31D2 -12
Addr : 31DE: Label003A
Addr : 31DE:             01  : Drop Anchor   
Addr : 31DF:          05 0F  : Call Sub 15   
Addr : 31E1:             01  : Drop Anchor   
Addr : 31E2:          05 0F  : Call Sub 15   
Addr : 31E4: Constant Address of Label003B
Addr : 31E4:       39 08 4E  : Constant 2 Bytes - 08 4E 
Addr : 31E7:             60  : Variable Operation Local Offset - 0 Read
Addr : 31E8:             36  : Constant 2 $00000001
Addr : 31E9: Case_Value Label003C
Addr : 31E9:          0D 0D  : Value Case Address = 31F8 13
Addr : 31EB:          37 00  : Constant Mask Y=0 00000002
Addr : 31ED: Case_Value Label003C
Addr : 31ED:          0D 09  : Value Case Address = 31F8 9
Addr : 31EF:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 31F1: Case_Value Label003D
Addr : 31F1:       0D 80 55  : Value Case Address = 3249 85
Addr : 31F4:             35  : Constant 1 $00000000
Addr : 31F5:          C5 50  : Memory Op Long PBASE + WRITE Address = 0050
Addr : 31F7: CaseDone Label003D
Addr : 31F7:             0C  : Casedone      
Addr : 31F8: Label003C
Addr : 31F8:          38 09  : Constant 1 Bytes - 09 
Addr : 31FA:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 31FC:             75  : Variable Operation Local Offset - 5 Write
Addr : 31FD:             74  : Variable Operation Local Offset - 5 Read
Addr : 31FE:          37 02  : Constant Mask Y=2 00000008
Addr : 3200:             E3  : Math Op <<    
Addr : 3201:          38 0A  : Constant 1 Bytes - 0A 
Addr : 3203:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3205:             EA  : Math Op |     
Addr : 3206:             75  : Variable Operation Local Offset - 5 Write
Addr : 3207:             74  : Variable Operation Local Offset - 5 Read
Addr : 3208:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 320A:             E2  : Math Op >>    
Addr : 320B:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 320D:             E8  : Math Op &     
Addr : 320E:             79  : Variable Operation Local Offset - 6 Write
Addr : 320F:          38 05  : Constant 1 Bytes - 05 
Addr : 3211:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3213:             75  : Variable Operation Local Offset - 5 Write
Addr : 3214:             74  : Variable Operation Local Offset - 5 Read
Addr : 3215:          37 23  : Constant Mask Y=35 Decrement 0000000F
Addr : 3217:             E8  : Math Op &     
Addr : 3218:          7A 4C  : Variable Operation Local Offset - 6 Assign WordMathop +
Addr : 321A:          38 06  : Constant 1 Bytes - 06 
Addr : 321C:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 321E:          37 21  : Constant Mask Y=33 Decrement 00000003
Addr : 3220:             E8  : Math Op &     
Addr : 3221:             75  : Variable Operation Local Offset - 5 Write
Addr : 3222:             74  : Variable Operation Local Offset - 5 Read
Addr : 3223:          37 02  : Constant Mask Y=2 00000008
Addr : 3225:             E3  : Math Op <<    
Addr : 3226:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 3228:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 322A:             EA  : Math Op |     
Addr : 322B:             75  : Variable Operation Local Offset - 5 Write
Addr : 322C:             74  : Variable Operation Local Offset - 5 Read
Addr : 322D:          37 02  : Constant Mask Y=2 00000008
Addr : 322F:             E3  : Math Op <<    
Addr : 3230:          37 02  : Constant Mask Y=2 00000008
Addr : 3232:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3234:             EA  : Math Op |     
Addr : 3235:             75  : Variable Operation Local Offset - 5 Write
Addr : 3236:             74  : Variable Operation Local Offset - 5 Read
Addr : 3237:          38 06  : Constant 1 Bytes - 06 
Addr : 3239:             E2  : Math Op >>    
Addr : 323A:             75  : Variable Operation Local Offset - 5 Write
Addr : 323B:             74  : Variable Operation Local Offset - 5 Read
Addr : 323C:             36  : Constant 2 $00000001
Addr : 323D:             EC  : Math Op +     
Addr : 323E:          37 00  : Constant Mask Y=0 00000002
Addr : 3240:             78  : Variable Operation Local Offset - 6 Read
Addr : 3241:             EC  : Math Op +     
Addr : 3242:             E3  : Math Op <<    
Addr : 3243:          38 09  : Constant 1 Bytes - 09 
Addr : 3245:             E2  : Math Op >>    
Addr : 3246:          C5 50  : Memory Op Long PBASE + WRITE Address = 0050
Addr : 3248: CaseDone Label003C
Addr : 3248:             0C  : Casedone      
Addr : 3249: Label003D
Addr : 3249:          37 22  : Constant Mask Y=34 Decrement 00000007
Addr : 324B:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 324D:          37 25  : Constant Mask Y=37 Decrement 0000003F
Addr : 324F:             E8  : Math Op &     
Addr : 3250:             75  : Variable Operation Local Offset - 5 Write
Addr : 3251:             74  : Variable Operation Local Offset - 5 Read
Addr : 3252:          37 02  : Constant Mask Y=2 00000008
Addr : 3254:             E3  : Math Op <<    
Addr : 3255:          37 02  : Constant Mask Y=2 00000008
Addr : 3257:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3259:             EA  : Math Op |     
Addr : 325A:             75  : Variable Operation Local Offset - 5 Write
Addr : 325B:             74  : Variable Operation Local Offset - 5 Read
Addr : 325C:          37 02  : Constant Mask Y=2 00000008
Addr : 325E:             E3  : Math Op <<    
Addr : 325F:          38 09  : Constant 1 Bytes - 09 
Addr : 3261:          94 54  : Memory Op Byte PBASE + POP Index READ Address = 0054
Addr : 3263:             EA  : Math Op |     
Addr : 3264:             75  : Variable Operation Local Offset - 5 Write
Addr : 3265:             74  : Variable Operation Local Offset - 5 Read
Addr : 3266:             36  : Constant 2 $00000001
Addr : 3267:             EC  : Math Op +     
Addr : 3268:          37 09  : Constant Mask Y=9 00000400
Addr : 326A:             F4  : Math Op *     
Addr : 326B:          C5 50  : Memory Op Long PBASE + WRITE Address = 0050
Addr : 326D: CaseDone Label003D
Addr : 326D:             0C  : Casedone      
Addr : 326E: Label003B
Addr : 326E:       C4 85 0C  : Memory Op Long PBASE + READ Address = 050C
Addr : 3271:       3F D4 4A  : Register op OUTA ByteMathop |
Addr : 3274:          37 01  : Constant Mask Y=1 00000004
Addr : 3276:          38 1A  : Constant 1 Bytes - 1A 
Addr : 3278:             E3  : Math Op <<    
Addr : 3279:             6C  : Variable Operation Local Offset - 3 Read
Addr : 327A:             35  : Constant 1 $00000000
Addr : 327B:             E3  : Math Op <<    
Addr : 327C:             EA  : Math Op |     
Addr : 327D:       C5 85 20  : Memory Op Long PBASE + WRITE Address = 0520
Addr : 3280:          37 01  : Constant Mask Y=1 00000004
Addr : 3282:          38 1A  : Constant 1 Bytes - 1A 
Addr : 3284:             E3  : Math Op <<    
Addr : 3285:             68  : Variable Operation Local Offset - 2 Read
Addr : 3286:             35  : Constant 1 $00000000
Addr : 3287:             E3  : Math Op <<    
Addr : 3288:             EA  : Math Op |     
Addr : 3289:       C5 85 28  : Memory Op Long PBASE + WRITE Address = 0528
Addr : 328C:             35  : Constant 1 $00000000
Addr : 328D:             C0  : Memory Op Long POP Address READ 
Addr : 328E:          38 06  : Constant 1 Bytes - 06 
Addr : 3290:             E2  : Math Op >>    
Addr : 3291:       C5 85 24  : Memory Op Long PBASE + WRITE Address = 0524
Addr : 3294:          38 7D  : Constant 1 Bytes - 7D 
Addr : 3296:       C5 85 4C  : Memory Op Long PBASE + WRITE Address = 054C
Addr : 3299:             35  : Constant 1 $00000000
Addr : 329A:             C0  : Memory Op Long POP Address READ 
Addr : 329B:       39 03 E8  : Constant 2 Bytes - 03 E8 
Addr : 329E:       C4 85 4C  : Memory Op Long PBASE + READ Address = 054C
Addr : 32A1:             F6  : Math Op /     
Addr : 32A2:             F6  : Math Op /     
Addr : 32A3:       C5 85 4C  : Memory Op Long PBASE + WRITE Address = 054C
Addr : 32A6:          C7 4C  : Memory Op Long PBASE + ADDRESS Address = 004C
Addr : 32A8:       C5 85 18  : Memory Op Long PBASE + WRITE Address = 0518
Addr : 32AB:          C7 48  : Memory Op Long PBASE + ADDRESS Address = 0048
Addr : 32AD:       C5 85 1C  : Memory Op Long PBASE + WRITE Address = 051C
Addr : 32B0:             35  : Constant 1 $00000000
Addr : 32B1:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 32B3:             34  : Constant 0 $FFFFFFFF
Addr : 32B4:          C7 64  : Memory Op Long PBASE + ADDRESS Address = 0064
Addr : 32B6:          C7 44  : Memory Op Long PBASE + ADDRESS Address = 0044
Addr : 32B8:             28  : CogInit(Id, Addr, Ptr) Push
Addr : 32B9:             36  : Constant 2 $00000001
Addr : 32BA:             EC  : Math Op +     
Addr : 32BB:          C5 40  : Memory Op Long PBASE + WRITE Address = 0040
Addr : 32BD:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 32BF:             35  : Constant 1 $00000000
Addr : 32C0:             FC  : Math Op ==    
Addr : 32C1: JZ Label003E
Addr : 32C1:          0A 07  : jz Address = 32CA 7
Addr : 32C3:             01  : Drop Anchor   
Addr : 32C4:       39 03 E6  : Constant 2 Bytes - 03 E6 
Addr : 32C7:             E7  : Math Op !     
Addr : 32C8:          05 0B  : Call Sub 11   
Addr : 32CA: Label003E
Addr : 32CA: Label003F
Addr : 32CA: Label0040
Addr : 32CA:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 32CC:             34  : Constant 0 $FFFFFFFF
Addr : 32CD:             FB  : Math Op <>    
Addr : 32CE: JZ Label0042
Addr : 32CE:          0A 02  : jz Address = 32D2 2
Addr : 32D0: Label0041
Addr : 32D0: JMP Label0040
Addr : 32D0:          04 78  : Jmp 32CA -8   
Addr : 32D2: Label0042
Addr : 32D2:       C4 85 10  : Memory Op Long PBASE + READ Address = 0510
Addr : 32D5:             E7  : Math Op !     
Addr : 32D6:       3F D6 48  : Register op DIRA BitMathop &
Addr : 32D9:             32  : Return        
|===========================================================================|
Spin Block release with 0 Parameters and 0 Extra Stack Longs. Method 9
PUB release

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 32DA:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 32DC: JZ Label0002
Addr : 32DC:          0A 0D  : jz Address = 32EB 13
Addr : 32DE:          38 7A  : Constant 1 Bytes - 7A 
Addr : 32E0:          C5 44  : Memory Op Long PBASE + WRITE Address = 0044
Addr : 32E2: Label0004
Addr : 32E2:          C4 44  : Memory Op Long PBASE + READ Address = 0044
Addr : 32E4:          38 7A  : Constant 1 Bytes - 7A 
Addr : 32E6:             FC  : Math Op ==    
Addr : 32E7: JZ Label0006
Addr : 32E7:          0A 02  : jz Address = 32EB 2
Addr : 32E9: Label0005
Addr : 32E9: JMP Label0004
Addr : 32E9:          04 77  : Jmp 32E2 -9   
Addr : 32EB: Label0006
Addr : 32EB: Label0002
Addr : 32EB: Label0003
Addr : 32EB:             32  : Return        
|===========================================================================|
Spin Block stop with 0 Parameters and 0 Extra Stack Longs. Method 10
PUB stop

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 32EC:             01  : Drop Anchor   
Addr : 32ED:          05 09  : Call Sub 9    
Addr : 32EF:          C4 40  : Memory Op Long PBASE + READ Address = 0040
Addr : 32F1: JZ Label0002
Addr : 32F1:          0A 06  : jz Address = 32F9 6
Addr : 32F3:       C6 40 98  : Memory Op Long PBASE + ASSIGN Address = 0040 VAR~ Post-clear Push
Addr : 32F6:             36  : Constant 2 $00000001
Addr : 32F7:             ED  : Math Op -     
Addr : 32F8:             21  : CogStop(id)   
Addr : 32F9: Label0002
Addr : 32F9: Label0003
Addr : 32F9:             32  : Return        
|===========================================================================|
Spin Block crash with 1 Parameters and 0 Extra Stack Longs. Method 11
PRI crash( abort_code )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - abort_code
|===========================================================================|
Addr : 32FA:       C4 85 10  : Memory Op Long PBASE + READ Address = 0510
Addr : 32FD:             E7  : Math Op !     
Addr : 32FE:       3F D6 48  : Register op DIRA BitMathop &
Addr : 3301:             64  : Variable Operation Local Offset - 1 Read
Addr : 3302:             31  : Abort value   
Addr : 3303: Data : 32                       2
|===========================================================================|
Spin Block send_cmd_slow with 3 Parameters and 1 Extra Stack Longs. Method 12
PRI send_cmd_slow( cmd, val, crc ) : reply | time_stamp

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - cmd
Local Parameter DBASE:0008 - val
Local Parameter DBASE:000C - crc
Local Variable  DBASE:0010 - time_stamp
|===========================================================================|
Addr : 3304:             64  : Variable Operation Local Offset - 1 Read
Addr : 3305:          37 06  : Constant Mask Y=6 00000080
Addr : 3307:             E8  : Math Op &     
Addr : 3308: JZ Label0002
Addr : 3308:          0A 14  : jz Address = 331E 20
Addr : 330A:          37 26  : Constant Mask Y=38 Decrement 0000007F
Addr : 330C:          66 48  : Variable Operation Local Offset - 1 Assign BitMathop &
Addr : 330E:             00  : Drop Anchor Push 
Addr : 330F:          38 77  : Constant 1 Bytes - 77 
Addr : 3311:             35  : Constant 1 $00000000
Addr : 3312:          38 65  : Constant 1 Bytes - 65 
Addr : 3314:          05 0C  : Call Sub 12   
Addr : 3316:             61  : Variable Operation Local Offset - 0 Write
Addr : 3317:             60  : Variable Operation Local Offset - 0 Read
Addr : 3318:             36  : Constant 2 $00000001
Addr : 3319:             FA  : Math Op >     
Addr : 331A: JZ Label0004
Addr : 331A:          0A 02  : jz Address = 331E 2
Addr : 331C:             60  : Variable Operation Local Offset - 0 Read
Addr : 331D:             33  : Return value  
Addr : 331E: Label0004
Addr : 331E: Label0005
Addr : 331E: Label0002
Addr : 331E: Label0003
Addr : 331E:       C4 85 0C  : Memory Op Long PBASE + READ Address = 050C
Addr : 3321:       3F D4 4A  : Register op OUTA ByteMathop |
Addr : 3324:       C4 85 0C  : Memory Op Long PBASE + READ Address = 050C
Addr : 3327:             E7  : Math Op !     
Addr : 3328:       3F D4 48  : Register op OUTA BitMathop &
Addr : 332B:             01  : Drop Anchor   
Addr : 332C:          05 0E  : Call Sub 14   
Addr : 332E:             01  : Drop Anchor   
Addr : 332F:             64  : Variable Operation Local Offset - 1 Read
Addr : 3330:          37 02  : Constant Mask Y=2 00000008
Addr : 3332:          05 0D  : Call Sub 13   
Addr : 3334:             01  : Drop Anchor   
Addr : 3335:             68  : Variable Operation Local Offset - 2 Read
Addr : 3336:          37 04  : Constant Mask Y=4 00000020
Addr : 3338:          05 0D  : Call Sub 13   
Addr : 333A:             01  : Drop Anchor   
Addr : 333B:             6C  : Variable Operation Local Offset - 3 Read
Addr : 333C:          37 02  : Constant Mask Y=2 00000008
Addr : 333E:          05 0D  : Call Sub 13   
Addr : 3340:             64  : Variable Operation Local Offset - 1 Read
Addr : 3341:          38 4C  : Constant 1 Bytes - 4C 
Addr : 3343:             FC  : Math Op ==    
Addr : 3344: JZ Label0006
Addr : 3344:          0A 03  : jz Address = 3349 3
Addr : 3346:             01  : Drop Anchor   
Addr : 3347:          05 0F  : Call Sub 15   
Addr : 3349: Label0006
Addr : 3349: Label0007
Addr : 3349:          38 09  : Constant 1 Bytes - 09 
Addr : 334B:             71  : Variable Operation Local Offset - 4 Write
Addr : 334C: Label0008
Addr : 334C:             00  : Drop Anchor Push 
Addr : 334D:          05 0F  : Call Sub 15   
Addr : 334F:             61  : Variable Operation Local Offset - 0 Write
Addr : 3350: Label0009
Addr : 3350:             60  : Variable Operation Local Offset - 0 Read
Addr : 3351:          37 06  : Constant Mask Y=6 00000080
Addr : 3353:             E8  : Math Op &     
Addr : 3354:          72 BE  : Variable Operation Local Offset - 4 Assign VAR-- post-dec Long Push
Addr : 3356:             F0  : Math Op AND   
Addr : 3357: JNZ Label0008
Addr : 3357:          0B 73  : jnz Address = 334C -13
Addr : 3359: Label000A
Addr : 3359:             32  : Return        
|===========================================================================|
Spin Block send_slow with 2 Parameters and 0 Extra Stack Longs. Method 13
PRI send_slow( value, bits_to_send )

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - bits_to_send
|===========================================================================|
Addr : 335A:             68  : Variable Operation Local Offset - 2 Read
Addr : 335B:          66 4F  : Variable Operation Local Offset - 1 Assign LongMathop ><
Addr : 335D:             68  : Variable Operation Local Offset - 2 Read
Addr : 335E: TJZ Label0004
Addr : 335E:          08 17  : tjz Address = 3377 23
Addr : 3360: Label0002
Addr : 3360:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 3363:       3D D4 18  : Register [Bit] op OUTA VAR~ Post-clear
Addr : 3366:             64  : Variable Operation Local Offset - 1 Read
Addr : 3367:       C4 85 00  : Memory Op Long PBASE + READ Address = 0500
Addr : 336A:          3D B4  : Register [Bit] op OUTA Write
Addr : 336C:             36  : Constant 2 $00000001
Addr : 336D:          66 42  : Variable Operation Local Offset - 1 Assign ByteMathop >>
Addr : 336F:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 3372:       3D D4 1C  : Register [Bit] op OUTA VAR~~ Post-set
Addr : 3375: Label0003
Addr : 3375: DJNZ Label0002
Addr : 3375:          09 69  : djnz Address = 3360 -23
Addr : 3377: Label0004
Addr : 3377:             32  : Return        
|===========================================================================|
Spin Block read_32_slow with 0 Parameters and 0 Extra Stack Longs. Method 14
PRI read_32_slow : r

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3378:          37 01  : Constant Mask Y=1 00000004
Addr : 337A: TJZ Label0004
Addr : 337A:          08 0B  : tjz Address = 3387 11
Addr : 337C: Label0002
Addr : 337C:          37 02  : Constant Mask Y=2 00000008
Addr : 337E:          62 43  : Variable Operation Local Offset - 0 Assign ByteMathop <<
Addr : 3380:             00  : Drop Anchor Push 
Addr : 3381:          05 0F  : Call Sub 15   
Addr : 3383:          62 4A  : Variable Operation Local Offset - 0 Assign ByteMathop |
Addr : 3385: Label0003
Addr : 3385: DJNZ Label0002
Addr : 3385:          09 75  : djnz Address = 337C -11
Addr : 3387: Label0004
Addr : 3387:             32  : Return        
|===========================================================================|
Spin Block read_slow with 0 Parameters and 0 Extra Stack Longs. Method 15
PRI read_slow : r

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3388:       C4 85 00  : Memory Op Long PBASE + READ Address = 0500
Addr : 338B:       3D D4 1C  : Register [Bit] op OUTA VAR~~ Post-set
Addr : 338E:          37 02  : Constant Mask Y=2 00000008
Addr : 3390: TJZ Label0004
Addr : 3390:          08 17  : tjz Address = 33A9 23
Addr : 3392: Label0002
Addr : 3392:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 3395:       3D D4 18  : Register [Bit] op OUTA VAR~ Post-clear
Addr : 3398:       C4 84 FC  : Memory Op Long PBASE + READ Address = 04FC
Addr : 339B:       3D D4 1C  : Register [Bit] op OUTA VAR~~ Post-set
Addr : 339E:             60  : Variable Operation Local Offset - 0 Read
Addr : 339F:       C4 84 F8  : Memory Op Long PBASE + READ Address = 04F8
Addr : 33A2:          3D 92  : Register [Bit] op INA Read
Addr : 33A4:             EC  : Math Op +     
Addr : 33A5:          62 4C  : Variable Operation Local Offset - 0 Assign WordMathop +
Addr : 33A7: Label0003
Addr : 33A7: DJNZ Label0002
Addr : 33A7:          09 69  : djnz Address = 3392 -23
Addr : 33A9: Label0004
Addr : 33A9:          3F 91  : Register op CNT Read
Addr : 33AB:          C4 48  : Memory Op Long PBASE + READ Address = 0048
Addr : 33AD:             ED  : Math Op -     
Addr : 33AE:             35  : Constant 1 $00000000
Addr : 33AF:             C0  : Memory Op Long POP Address READ 
Addr : 33B0:          37 00  : Constant Mask Y=0 00000002
Addr : 33B2:             E3  : Math Op <<    
Addr : 33B3:             FA  : Math Op >     
Addr : 33B4: JZ Label0005
Addr : 33B4:          0A 07  : jz Address = 33BD 7
Addr : 33B6:             01  : Drop Anchor   
Addr : 33B7:       39 03 E7  : Constant 2 Bytes - 03 E7 
Addr : 33BA:             E7  : Math Op !     
Addr : 33BB:          05 0B  : Call Sub 11   
Addr : 33BD: Label0005
Addr : 33BD: Label0006
Addr : 33BD:             32  : Return        
|===========================================================================|
Object Parallax Serial Terminal Null
Object Base is 33C0
|===========================================================================|
Object Constants
|===========================================================================|
|===========================================================================|
Spin Block Start with 1 Parameters and 0 Extra Stack Longs. Method 1
PUB Start(baudrate)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - baudrate
|===========================================================================|
Addr : 3448:             32  : Return        
|===========================================================================|
Spin Block StartRxTx with 4 Parameters and 0 Extra Stack Longs. Method 2
PUB StartRxTx(rxpin, txpin, mode, baudrate)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - rxpin
Local Parameter DBASE:0008 - txpin
Local Parameter DBASE:000C - mode
Local Parameter DBASE:0010 - baudrate
|===========================================================================|
Addr : 3449:             32  : Return        
|===========================================================================|
Spin Block Stop with 0 Parameters and 0 Extra Stack Longs. Method 3
PUB Stop

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 344A:             32  : Return        
|===========================================================================|
Spin Block Char with 1 Parameters and 0 Extra Stack Longs. Method 4
PUB Char(bytechr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - bytechr
|===========================================================================|
Addr : 344B:             32  : Return        
|===========================================================================|
Spin Block Chars with 2 Parameters and 0 Extra Stack Longs. Method 5
PUB Chars(bytechr, count)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - bytechr
Local Parameter DBASE:0008 - count
|===========================================================================|
Addr : 344C:             32  : Return        
|===========================================================================|
Spin Block CharIn with 0 Parameters and 0 Extra Stack Longs. Method 6
PUB CharIn

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 344D:             32  : Return        
|===========================================================================|
Spin Block Str with 1 Parameters and 0 Extra Stack Longs. Method 7
PUB Str(stringptr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - stringptr
|===========================================================================|
Addr : 344E:             32  : Return        
|===========================================================================|
Spin Block StrIn with 1 Parameters and 0 Extra Stack Longs. Method 8
PUB StrIn(stringptr)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - stringptr
|===========================================================================|
Addr : 344F:             32  : Return        
|===========================================================================|
Spin Block StrInMax with 2 Parameters and 0 Extra Stack Longs. Method 9
PUB StrInMax(stringptr, maxcount)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - stringptr
Local Parameter DBASE:0008 - maxcount
|===========================================================================|
Addr : 3450:             32  : Return        
|===========================================================================|
Spin Block Dec with 1 Parameters and 2 Extra Stack Longs. Method 10
PUB Dec(value) | i, x

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Variable  DBASE:0008 - i
Local Variable  DBASE:000C - x
|===========================================================================|
Addr : 3451:             32  : Return        
|===========================================================================|
Spin Block DecIn with 0 Parameters and 0 Extra Stack Longs. Method 11
PUB DecIn : value

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3452:             32  : Return        
|===========================================================================|
Spin Block Bin with 2 Parameters and 0 Extra Stack Longs. Method 12
PUB Bin(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 3453:             32  : Return        
|===========================================================================|
Spin Block BinIn with 0 Parameters and 0 Extra Stack Longs. Method 13
PUB BinIn : value

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3454:             32  : Return        
|===========================================================================|
Spin Block Hex with 2 Parameters and 0 Extra Stack Longs. Method 14
PUB Hex(value, digits)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - value
Local Parameter DBASE:0008 - digits
|===========================================================================|
Addr : 3455:             32  : Return        
|===========================================================================|
Spin Block HexIn with 0 Parameters and 0 Extra Stack Longs. Method 15
PUB HexIn : value

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3456:             32  : Return        
|===========================================================================|
Spin Block Clear with 0 Parameters and 0 Extra Stack Longs. Method 16
PUB Clear

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3457:             32  : Return        
|===========================================================================|
Spin Block ClearEnd with 0 Parameters and 0 Extra Stack Longs. Method 17
PUB ClearEnd

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3458:             32  : Return        
|===========================================================================|
Spin Block ClearBelow with 0 Parameters and 0 Extra Stack Longs. Method 18
PUB ClearBelow

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3459:             32  : Return        
|===========================================================================|
Spin Block Home with 0 Parameters and 0 Extra Stack Longs. Method 19
PUB Home

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 345A:             32  : Return        
|===========================================================================|
Spin Block Position with 2 Parameters and 0 Extra Stack Longs. Method 20
PUB Position(x, y)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - x
Local Parameter DBASE:0008 - y
|===========================================================================|
Addr : 345B:             32  : Return        
|===========================================================================|
Spin Block PositionX with 1 Parameters and 0 Extra Stack Longs. Method 21
PUB PositionX(x)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - x
|===========================================================================|
Addr : 345C:             32  : Return        
|===========================================================================|
Spin Block PositionY with 1 Parameters and 0 Extra Stack Longs. Method 22
PUB PositionY(y)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - y
|===========================================================================|
Addr : 345D:             32  : Return        
|===========================================================================|
Spin Block NewLine with 0 Parameters and 0 Extra Stack Longs. Method 23
PUB NewLine

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 345E:             32  : Return        
|===========================================================================|
Spin Block LineFeed with 0 Parameters and 0 Extra Stack Longs. Method 24
PUB LineFeed

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 345F:             32  : Return        
|===========================================================================|
Spin Block MoveLeft with 1 Parameters and 0 Extra Stack Longs. Method 25
PUB MoveLeft(x)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - x
|===========================================================================|
Addr : 3460:             32  : Return        
|===========================================================================|
Spin Block MoveRight with 1 Parameters and 0 Extra Stack Longs. Method 26
PUB MoveRight(x)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - x
|===========================================================================|
Addr : 3461:             32  : Return        
|===========================================================================|
Spin Block MoveUp with 1 Parameters and 0 Extra Stack Longs. Method 27
PUB MoveUp(y)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - y
|===========================================================================|
Addr : 3462:             32  : Return        
|===========================================================================|
Spin Block MoveDown with 1 Parameters and 0 Extra Stack Longs. Method 28
PUB MoveDown(y)

Local Parameter DBASE:0000 - Result
Local Parameter DBASE:0004 - y
|===========================================================================|
Addr : 3463:             32  : Return        
|===========================================================================|
Spin Block Tab with 0 Parameters and 0 Extra Stack Longs. Method 29
PUB Tab

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3464:             32  : Return        
|===========================================================================|
Spin Block Backspace with 0 Parameters and 0 Extra Stack Longs. Method 30
PUB Backspace

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3465:             32  : Return        
|===========================================================================|
Spin Block Beep with 0 Parameters and 0 Extra Stack Longs. Method 31
PUB Beep

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3466:             32  : Return        
|===========================================================================|
Spin Block RxCount with 0 Parameters and 0 Extra Stack Longs. Method 32
PUB RxCount : count

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3467:             32  : Return        
|===========================================================================|
Spin Block RxFlush with 0 Parameters and 0 Extra Stack Longs. Method 33
PUB RxFlush

Local Parameter DBASE:0000 - Result
|===========================================================================|
Addr : 3468:             32  : Return        
